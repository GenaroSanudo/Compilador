Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
Rule 10    main_point -> empty
Rule 11    main_final -> empty
Rule 12    body -> body_2 func_agrega_v estatuto body_3
Rule 13    body_2 -> vars
Rule 14    body_2 -> empty
Rule 15    body_3 -> estatuto body_3
Rule 16    body_3 -> empty
Rule 17    tipo_simple -> INT
Rule 18    tipo_simple -> FLOAT
Rule 19    tipo_simple -> CHAR
Rule 20    tipo_comp -> DATAFRAME
Rule 21    vars -> VAR vars_2 SEMICOLON vars_8
Rule 22    vars_2 -> tipo_comp vars_3
Rule 23    vars_2 -> tipo_simple vars_4
Rule 24    vars_3 -> ID vars_5
Rule 25    vars_4 -> vars_3
Rule 26    vars_4 -> ID vars_6
Rule 27    vars_5 -> COMMA vars_3
Rule 28    vars_5 -> empty
Rule 29    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 30    vars_6 -> empty
Rule 31    punto_id_especial -> empty
Rule 32    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 33    vars_7 -> var_array
Rule 34    var_array -> empty
Rule 35    var_mat -> empty
Rule 36    vars_8 -> vars
Rule 37    vars_8 -> empty
Rule 38    param -> tipo_simple ID punto_param param_2
Rule 39    param -> empty
Rule 40    param_2 -> COMMA param
Rule 41    param_2 -> empty
Rule 42    punto_param -> empty
Rule 43    punto_param_2 -> empty
Rule 44    variable -> ID variable_2 variable_point
Rule 45    variable_point -> empty
Rule 46    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 47    variable_2 -> empty
Rule 48    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 49    variable_3 -> empty
Rule 50    estatuto -> asigna
Rule 51    estatuto -> llamada
Rule 52    estatuto -> llamada_void
Rule 53    estatuto -> read
Rule 54    estatuto -> write
Rule 55    estatuto -> if_1
Rule 56    estatuto -> for_l
Rule 57    estatuto -> while_l
Rule 58    estatuto -> return
Rule 59    estatuto -> func_extra
Rule 60    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 61    asigna_point -> empty
Rule 62    llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
Rule 63    llamada_2 -> exp verify_parameter
Rule 64    llamada_2 -> empty
Rule 65    llamada_3 -> COMMA exp verify_parameter llamada_3
Rule 66    llamada_3 -> empty
Rule 67    llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
Rule 68    llamada_void_2 -> exp verify_parameter
Rule 69    llamada_void_2 -> empty
Rule 70    llamada_void_3 -> COMMA exp verify_parameter llamada_void_3
Rule 71    llamada_void_3 -> empty
Rule 72    not_void -> empty
Rule 73    verify_func -> empty
Rule 74    verify_parameter -> empty
Rule 75    gosub -> empty
Rule 76    add_temp -> empty
Rule 77    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 78    read_point -> empty
Rule 79    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 80    write_2 -> exp write_point
Rule 81    write_2 -> CTE_S add_constant_s write_point
Rule 82    write_3 -> COMMA write_2 write_3
Rule 83    write_3 -> empty
Rule 84    write_point -> empty
Rule 85    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 86    if_2 -> estatuto if_2
Rule 87    if_2 -> empty
Rule 88    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 89    if_3 -> empty
Rule 90    if_point -> empty
Rule 91    if_point_2 -> empty
Rule 92    if_point_3 -> empty
Rule 93    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 94    for_l_2 -> estatuto for_l_2
Rule 95    for_l_2 -> empty
Rule 96    for_point_1 -> empty
Rule 97    for_point_2 -> empty
Rule 98    for_point_3 -> empty
Rule 99    for_point_4 -> empty
Rule 100   while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 101   while_l_2 -> estatuto while_l_2
Rule 102   while_l_2 -> empty
Rule 103   while_point -> empty
Rule 104   while_point_2 -> empty
Rule 105   while_point_3 -> empty
Rule 106   return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON
Rule 107   check_valid_func -> empty
Rule 108   func_extra -> empty
Rule 109   exp -> t_exp add_operator_4 exp_2
Rule 110   exp_2 -> OR add_operator exp
Rule 111   exp_2 -> empty
Rule 112   t_exp -> g_exp add_operator_4 t_exp_2
Rule 113   t_exp_2 -> AND add_operator t_exp
Rule 114   t_exp_2 -> empty
Rule 115   g_exp -> m_exp g_exp_2 add_operator_3
Rule 116   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 117   g_exp_2 -> LESS add_operator m_exp
Rule 118   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 119   g_exp_2 -> GREATER add_operator m_exp
Rule 120   g_exp_2 -> COMPARE add_operator m_exp
Rule 121   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 122   g_exp_2 -> empty
Rule 123   m_exp -> t add_operator_2 m_exp_2
Rule 124   m_exp_2 -> PLUS add_operator m_exp
Rule 125   m_exp_2 -> MINUS add_operator m_exp
Rule 126   m_exp_2 -> empty
Rule 127   t -> f add_operator_1 t_2
Rule 128   t_2 -> TIMES add_operator t
Rule 129   t_2 -> DIVIDE add_operator t
Rule 130   t_2 -> empty
Rule 131   f -> LPAR add_floor exp RPAR remove_floor
Rule 132   f -> variable
Rule 133   f -> llamada
Rule 134   f -> f_2
Rule 135   f_2 -> CTE_I add_constant_i
Rule 136   f_2 -> CTE_F add_constant_f
Rule 137   add_floor -> empty
Rule 138   remove_floor -> empty
Rule 139   add_operator -> empty
Rule 140   add_operator_1 -> empty
Rule 141   add_operator_2 -> empty
Rule 142   add_operator_3 -> empty
Rule 143   add_operator_4 -> empty
Rule 144   add_constant_i -> empty
Rule 145   add_constant_s -> empty
Rule 146   add_constant_f -> empty
Rule 147   function -> FUNC function_2 SEMICOLON function_4
Rule 148   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 149   function_3 -> tipo_simple
Rule 150   function_3 -> VOID
Rule 151   function_4 -> function
Rule 152   function_4 -> empty
Rule 153   function_punto1 -> empty
Rule 154   func_agrega_v -> empty
Rule 155   final_func_point -> empty
Rule 156   empty -> <empty>

Terminals, with rules where they appear

AND                  : 113
CHAR                 : 19
COLON                : 1
COMMA                : 27 40 65 70 82
COMPARE              : 120
CTE_F                : 136
CTE_I                : 29 32 135
CTE_S                : 81
DATAFRAME            : 20
DIVIDE               : 129
ELSE                 : 88
EQUAL                : 60 93
FLOAT                : 18
FOR                  : 93
FUNC                 : 147
GREATER              : 119
GREATER_EQUAL        : 118
ID                   : 1 24 26 38 44 62 67 93 148
IF                   : 85
INT                  : 17
LESS                 : 117
LESS_EQUAL           : 116
LPAR                 : 9 62 67 77 79 85 93 100 106 131 148
L_C_BRACKET          : 9 85 88 93 100 148
L_S_BRACKET          : 29 32 46 48
MAIN                 : 9
MINUS                : 125
NOT_EQUAL            : 121
OR                   : 110
PLUS                 : 124
PROGRAM              : 1
READ                 : 77
RETURN               : 106
RPAR                 : 9 62 67 77 79 85 93 100 106 131 148
R_C_BRACKET          : 9 85 88 93 100 148
R_S_BRACKET          : 29 32 46 48
SEMICOLON            : 9 21 60 62 67 77 79 85 93 100 106 147
STRING               : 
TIMES                : 128
TO                   : 93
VAR                  : 21
VOID                 : 150
WHILE                : 100
WRITE                : 79
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 136
add_constant_i       : 135
add_constant_s       : 81
add_floor            : 131
add_operator         : 60 110 113 116 117 118 119 120 121 124 125 128 129
add_operator_1       : 127
add_operator_2       : 123
add_operator_3       : 115
add_operator_4       : 109 112
add_temp             : 62
asigna               : 50
asigna_point         : 60
body                 : 9 148
body_2               : 12
body_3               : 12 15
check_valid_func     : 106
empty                : 2 4 6 8 10 11 14 16 28 30 31 34 35 37 39 41 42 43 45 47 49 61 64 66 69 71 72 73 74 75 76 78 83 84 87 89 90 91 92 95 96 97 98 99 102 103 104 105 107 108 111 114 122 126 130 137 138 139 140 141 142 143 144 145 146 152 153 154 155
estatuto             : 12 15 85 86 88 93 94 100 101
exp                  : 46 48 60 63 65 68 70 80 85 93 93 100 106 110 131
exp_2                : 109
f                    : 127
f_2                  : 134
final_func_point     : 148
for_l                : 56
for_l_2              : 93 94
for_point_1          : 93
for_point_2          : 93
for_point_3          : 93
for_point_4          : 93
func_agrega_v        : 12
func_extra           : 59
function             : 7 151
function_2           : 147
function_3           : 148
function_4           : 147
function_punto1      : 148
g_exp                : 112
g_exp_2              : 115
gosub                : 62 67
if_1                 : 55
if_2                 : 85 86 88
if_3                 : 85
if_point             : 85
if_point_2           : 85
if_point_3           : 88
llamada              : 51 133
llamada_2            : 62
llamada_3            : 62 65
llamada_void         : 52
llamada_void_2       : 67
llamada_void_3       : 67 70
m_exp                : 115 116 117 118 119 120 121 124 125
m_exp_2              : 123
main                 : 1
main_final           : 9
main_point           : 9
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
not_void             : 62
param                : 40 148
param_2              : 38
program              : 0
program_point        : 1
punto_id_especial    : 29
punto_param          : 38
punto_param_2        : 148
read                 : 53
read_point           : 77
remove_floor         : 131
return               : 58
t                    : 123 128 129
t_2                  : 127
t_exp                : 109 113
t_exp_2              : 112
tipo_comp            : 22
tipo_simple          : 23 38 149
var_array            : 33
var_mat              : 32
variable             : 60 77 132
variable_2           : 44
variable_3           : 46
variable_point       : 44
vars                 : 5 13 36
vars_2               : 21
vars_3               : 22 25 27
vars_4               : 23
vars_5               : 24
vars_6               : 26
vars_7               : 29
vars_8               : 21
verify_func          : 62 67
verify_parameter     : 63 65 68 70
while_l              : 57
while_l_2            : 100 101
while_point          : 100
while_point_2        : 100
while_point_3        : 100
write                : 54
write_2              : 79 82
write_3              : 79 82
write_point          : 80 81

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (156) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 156 (empty -> .)
    MAIN            reduce using rule 156 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (156) empty -> .

    FUNC            reduce using rule 156 (empty -> .)
    MAIN            reduce using rule 156 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (21) vars -> VAR . vars_2 SEMICOLON vars_8
    (22) vars_2 -> . tipo_comp vars_3
    (23) vars_2 -> . tipo_simple vars_4
    (20) tipo_comp -> . DATAFRAME
    (17) tipo_simple -> . INT
    (18) tipo_simple -> . FLOAT
    (19) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
    (10) main_point -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (147) function -> . FUNC function_2 SEMICOLON function_4
    (156) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 156 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (21) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (22) vars_2 -> tipo_comp . vars_3
    (24) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (23) vars_2 -> tipo_simple . vars_4
    (25) vars_4 -> . vars_3
    (26) vars_4 -> . ID vars_6
    (24) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (20) tipo_comp -> DATAFRAME .

    ID              reduce using rule 20 (tipo_comp -> DATAFRAME .)


state 20

    (17) tipo_simple -> INT .

    ID              reduce using rule 17 (tipo_simple -> INT .)


state 21

    (18) tipo_simple -> FLOAT .

    ID              reduce using rule 18 (tipo_simple -> FLOAT .)


state 22

    (19) tipo_simple -> CHAR .

    ID              reduce using rule 19 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    LPAR            shift and go to state 35


state 24

    (10) main_point -> empty .

    LPAR            reduce using rule 10 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 26

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 27

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 28

    (147) function -> FUNC . function_2 SEMICOLON function_4
    (148) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (149) function_3 -> . tipo_simple
    (150) function_3 -> . VOID
    (17) tipo_simple -> . INT
    (18) tipo_simple -> . FLOAT
    (19) tipo_simple -> . CHAR

    VOID            shift and go to state 39
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 36
    function_3                     shift and go to state 37
    tipo_simple                    shift and go to state 38

state 29

    (21) vars -> VAR vars_2 SEMICOLON . vars_8
    (36) vars_8 -> . vars
    (37) vars_8 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (156) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 156 (empty -> .)
    MAIN            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    vars_8                         shift and go to state 40
    vars                           shift and go to state 41
    empty                          shift and go to state 42

state 30

    (22) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 22 (vars_2 -> tipo_comp vars_3 .)


state 31

    (24) vars_3 -> ID . vars_5
    (27) vars_5 -> . COMMA vars_3
    (28) vars_5 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 156 (empty -> .)

    vars_5                         shift and go to state 43
    empty                          shift and go to state 45

state 32

    (23) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 23 (vars_2 -> tipo_simple vars_4 .)


state 33

    (25) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 25 (vars_4 -> vars_3 .)


state 34

    (26) vars_4 -> ID . vars_6
    (24) vars_3 -> ID . vars_5
    (29) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (30) vars_6 -> . empty
    (27) vars_5 -> . COMMA vars_3
    (28) vars_5 -> . empty
    (31) punto_id_especial -> . empty
    (156) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 156 (empty -> .)
    L_S_BRACKET     reduce using rule 156 (empty -> .)

    vars_6                         shift and go to state 46
    vars_5                         shift and go to state 43
    punto_id_especial              shift and go to state 47
    empty                          shift and go to state 48

state 35

    (9) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    RPAR            shift and go to state 49


state 36

    (147) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 50


state 37

    (148) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 51


state 38

    (149) function_3 -> tipo_simple .

    ID              reduce using rule 149 (function_3 -> tipo_simple .)


state 39

    (150) function_3 -> VOID .

    ID              reduce using rule 150 (function_3 -> VOID .)


state 40

    (21) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 41

    (36) vars_8 -> vars .

    FUNC            reduce using rule 36 (vars_8 -> vars .)
    MAIN            reduce using rule 36 (vars_8 -> vars .)
    ID              reduce using rule 36 (vars_8 -> vars .)
    READ            reduce using rule 36 (vars_8 -> vars .)
    WRITE           reduce using rule 36 (vars_8 -> vars .)
    IF              reduce using rule 36 (vars_8 -> vars .)
    FOR             reduce using rule 36 (vars_8 -> vars .)
    WHILE           reduce using rule 36 (vars_8 -> vars .)
    RETURN          reduce using rule 36 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 36 (vars_8 -> vars .)


state 42

    (37) vars_8 -> empty .

    FUNC            reduce using rule 37 (vars_8 -> empty .)
    MAIN            reduce using rule 37 (vars_8 -> empty .)
    ID              reduce using rule 37 (vars_8 -> empty .)
    READ            reduce using rule 37 (vars_8 -> empty .)
    WRITE           reduce using rule 37 (vars_8 -> empty .)
    IF              reduce using rule 37 (vars_8 -> empty .)
    FOR             reduce using rule 37 (vars_8 -> empty .)
    WHILE           reduce using rule 37 (vars_8 -> empty .)
    RETURN          reduce using rule 37 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 37 (vars_8 -> empty .)


state 43

    (24) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 24 (vars_3 -> ID vars_5 .)


state 44

    (27) vars_5 -> COMMA . vars_3
    (24) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 52

state 45

    (28) vars_5 -> empty .

    SEMICOLON       reduce using rule 28 (vars_5 -> empty .)


state 46

    (26) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 26 (vars_4 -> ID vars_6 .)


state 47

    (29) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 53


state 48

    (30) vars_6 -> empty .
    (28) vars_5 -> empty .
    (31) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 28 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 31 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 30 (vars_6 -> empty .) ]


state 49

    (9) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    L_C_BRACKET     shift and go to state 54


state 50

    (147) function -> FUNC function_2 SEMICOLON . function_4
    (151) function_4 -> . function
    (152) function_4 -> . empty
    (147) function -> . FUNC function_2 SEMICOLON function_4
    (156) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 156 (empty -> .)

    function_4                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 51

    (148) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (153) function_punto1 -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 52

    (27) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 27 (vars_5 -> COMMA vars_3 .)


state 53

    (29) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 60


state 54

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON main_final
    (12) body -> . body_2 func_agrega_v estatuto body_3
    (13) body_2 -> . vars
    (14) body_2 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (156) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    body                           shift and go to state 61
    body_2                         shift and go to state 62
    vars                           shift and go to state 63
    empty                          shift and go to state 64

state 55

    (147) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 147 (function -> FUNC function_2 SEMICOLON function_4 .)


state 56

    (151) function_4 -> function .

    MAIN            reduce using rule 151 (function_4 -> function .)


state 57

    (152) function_4 -> empty .

    MAIN            reduce using rule 152 (function_4 -> empty .)


state 58

    (148) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 65


state 59

    (153) function_punto1 -> empty .

    LPAR            reduce using rule 153 (function_punto1 -> empty .)


state 60

    (29) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 66


state 61

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON main_final

    R_C_BRACKET     shift and go to state 67


state 62

    (12) body -> body_2 . func_agrega_v estatuto body_3
    (154) func_agrega_v -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    func_agrega_v                  shift and go to state 68
    empty                          shift and go to state 69

state 63

    (13) body_2 -> vars .

    ID              reduce using rule 13 (body_2 -> vars .)
    READ            reduce using rule 13 (body_2 -> vars .)
    WRITE           reduce using rule 13 (body_2 -> vars .)
    IF              reduce using rule 13 (body_2 -> vars .)
    FOR             reduce using rule 13 (body_2 -> vars .)
    WHILE           reduce using rule 13 (body_2 -> vars .)
    RETURN          reduce using rule 13 (body_2 -> vars .)
    R_C_BRACKET     reduce using rule 13 (body_2 -> vars .)


state 64

    (14) body_2 -> empty .

    ID              reduce using rule 14 (body_2 -> empty .)
    READ            reduce using rule 14 (body_2 -> empty .)
    WRITE           reduce using rule 14 (body_2 -> empty .)
    IF              reduce using rule 14 (body_2 -> empty .)
    FOR             reduce using rule 14 (body_2 -> empty .)
    WHILE           reduce using rule 14 (body_2 -> empty .)
    RETURN          reduce using rule 14 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 14 (body_2 -> empty .)


state 65

    (148) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (38) param -> . tipo_simple ID punto_param param_2
    (39) param -> . empty
    (17) tipo_simple -> . INT
    (18) tipo_simple -> . FLOAT
    (19) tipo_simple -> . CHAR
    (156) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 156 (empty -> .)

    param                          shift and go to state 70
    tipo_simple                    shift and go to state 71
    empty                          shift and go to state 72

state 66

    (29) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (32) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (33) vars_7 -> . var_array
    (34) var_array -> . empty
    (156) empty -> .

    L_S_BRACKET     shift and go to state 73
    SEMICOLON       reduce using rule 156 (empty -> .)

    vars_7                         shift and go to state 74
    var_array                      shift and go to state 75
    empty                          shift and go to state 76

state 67

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON main_final

    SEMICOLON       shift and go to state 77


state 68

    (12) body -> body_2 func_agrega_v . estatuto body_3
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point
    (156) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96
    R_C_BRACKET     reduce using rule 156 (empty -> .)

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 78
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 97

state 69

    (154) func_agrega_v -> empty .

    ID              reduce using rule 154 (func_agrega_v -> empty .)
    READ            reduce using rule 154 (func_agrega_v -> empty .)
    WRITE           reduce using rule 154 (func_agrega_v -> empty .)
    IF              reduce using rule 154 (func_agrega_v -> empty .)
    FOR             reduce using rule 154 (func_agrega_v -> empty .)
    WHILE           reduce using rule 154 (func_agrega_v -> empty .)
    RETURN          reduce using rule 154 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 154 (func_agrega_v -> empty .)


state 70

    (148) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (43) punto_param_2 -> . empty
    (156) empty -> .

    RPAR            reduce using rule 156 (empty -> .)

    punto_param_2                  shift and go to state 98
    empty                          shift and go to state 99

state 71

    (38) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 100


state 72

    (39) param -> empty .

    RPAR            reduce using rule 39 (param -> empty .)


state 73

    (32) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 101


state 74

    (29) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 29 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 75

    (33) vars_7 -> var_array .

    SEMICOLON       reduce using rule 33 (vars_7 -> var_array .)


state 76

    (34) var_array -> empty .

    SEMICOLON       reduce using rule 34 (var_array -> empty .)


state 77

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON . main_final
    (11) main_final -> . empty
    (156) empty -> .

    $end            reduce using rule 156 (empty -> .)

    main_final                     shift and go to state 102
    empty                          shift and go to state 103

state 78

    (12) body -> body_2 func_agrega_v estatuto . body_3
    (15) body_3 -> . estatuto body_3
    (16) body_3 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 104
    body_3                         shift and go to state 105
    empty                          shift and go to state 106
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 79

    (50) estatuto -> asigna .

    ID              reduce using rule 50 (estatuto -> asigna .)
    READ            reduce using rule 50 (estatuto -> asigna .)
    WRITE           reduce using rule 50 (estatuto -> asigna .)
    IF              reduce using rule 50 (estatuto -> asigna .)
    FOR             reduce using rule 50 (estatuto -> asigna .)
    WHILE           reduce using rule 50 (estatuto -> asigna .)
    RETURN          reduce using rule 50 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> asigna .)


state 80

    (51) estatuto -> llamada .

    ID              reduce using rule 51 (estatuto -> llamada .)
    READ            reduce using rule 51 (estatuto -> llamada .)
    WRITE           reduce using rule 51 (estatuto -> llamada .)
    IF              reduce using rule 51 (estatuto -> llamada .)
    FOR             reduce using rule 51 (estatuto -> llamada .)
    WHILE           reduce using rule 51 (estatuto -> llamada .)
    RETURN          reduce using rule 51 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> llamada .)


state 81

    (52) estatuto -> llamada_void .

    ID              reduce using rule 52 (estatuto -> llamada_void .)
    READ            reduce using rule 52 (estatuto -> llamada_void .)
    WRITE           reduce using rule 52 (estatuto -> llamada_void .)
    IF              reduce using rule 52 (estatuto -> llamada_void .)
    FOR             reduce using rule 52 (estatuto -> llamada_void .)
    WHILE           reduce using rule 52 (estatuto -> llamada_void .)
    RETURN          reduce using rule 52 (estatuto -> llamada_void .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> llamada_void .)


state 82

    (53) estatuto -> read .

    ID              reduce using rule 53 (estatuto -> read .)
    READ            reduce using rule 53 (estatuto -> read .)
    WRITE           reduce using rule 53 (estatuto -> read .)
    IF              reduce using rule 53 (estatuto -> read .)
    FOR             reduce using rule 53 (estatuto -> read .)
    WHILE           reduce using rule 53 (estatuto -> read .)
    RETURN          reduce using rule 53 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> read .)


state 83

    (54) estatuto -> write .

    ID              reduce using rule 54 (estatuto -> write .)
    READ            reduce using rule 54 (estatuto -> write .)
    WRITE           reduce using rule 54 (estatuto -> write .)
    IF              reduce using rule 54 (estatuto -> write .)
    FOR             reduce using rule 54 (estatuto -> write .)
    WHILE           reduce using rule 54 (estatuto -> write .)
    RETURN          reduce using rule 54 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> write .)


state 84

    (55) estatuto -> if_1 .

    ID              reduce using rule 55 (estatuto -> if_1 .)
    READ            reduce using rule 55 (estatuto -> if_1 .)
    WRITE           reduce using rule 55 (estatuto -> if_1 .)
    IF              reduce using rule 55 (estatuto -> if_1 .)
    FOR             reduce using rule 55 (estatuto -> if_1 .)
    WHILE           reduce using rule 55 (estatuto -> if_1 .)
    RETURN          reduce using rule 55 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> if_1 .)


state 85

    (56) estatuto -> for_l .

    ID              reduce using rule 56 (estatuto -> for_l .)
    READ            reduce using rule 56 (estatuto -> for_l .)
    WRITE           reduce using rule 56 (estatuto -> for_l .)
    IF              reduce using rule 56 (estatuto -> for_l .)
    FOR             reduce using rule 56 (estatuto -> for_l .)
    WHILE           reduce using rule 56 (estatuto -> for_l .)
    RETURN          reduce using rule 56 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 56 (estatuto -> for_l .)


state 86

    (57) estatuto -> while_l .

    ID              reduce using rule 57 (estatuto -> while_l .)
    READ            reduce using rule 57 (estatuto -> while_l .)
    WRITE           reduce using rule 57 (estatuto -> while_l .)
    IF              reduce using rule 57 (estatuto -> while_l .)
    FOR             reduce using rule 57 (estatuto -> while_l .)
    WHILE           reduce using rule 57 (estatuto -> while_l .)
    RETURN          reduce using rule 57 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 57 (estatuto -> while_l .)


state 87

    (58) estatuto -> return .

    ID              reduce using rule 58 (estatuto -> return .)
    READ            reduce using rule 58 (estatuto -> return .)
    WRITE           reduce using rule 58 (estatuto -> return .)
    IF              reduce using rule 58 (estatuto -> return .)
    FOR             reduce using rule 58 (estatuto -> return .)
    WHILE           reduce using rule 58 (estatuto -> return .)
    RETURN          reduce using rule 58 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 58 (estatuto -> return .)


state 88

    (59) estatuto -> func_extra .

    ID              reduce using rule 59 (estatuto -> func_extra .)
    READ            reduce using rule 59 (estatuto -> func_extra .)
    WRITE           reduce using rule 59 (estatuto -> func_extra .)
    IF              reduce using rule 59 (estatuto -> func_extra .)
    FOR             reduce using rule 59 (estatuto -> func_extra .)
    WHILE           reduce using rule 59 (estatuto -> func_extra .)
    RETURN          reduce using rule 59 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 59 (estatuto -> func_extra .)


state 89

    (60) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 107


state 90

    (62) llamada -> ID . verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> ID . verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (44) variable -> ID . variable_2 variable_point
    (73) verify_func -> . empty
    (46) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (47) variable_2 -> . empty
    (156) empty -> .

    L_S_BRACKET     shift and go to state 111
    LPAR            reduce using rule 156 (empty -> .)
    EQUAL           reduce using rule 156 (empty -> .)

    verify_func                    shift and go to state 108
    variable_2                     shift and go to state 109
    empty                          shift and go to state 110

state 91

    (77) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 112


state 92

    (79) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 113


state 93

    (85) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 114


state 94

    (93) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 115


state 95

    (100) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (103) while_point -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)

    while_point                    shift and go to state 116
    empty                          shift and go to state 117

state 96

    (106) return -> RETURN . LPAR exp check_valid_func RPAR SEMICOLON

    LPAR            shift and go to state 118


state 97

    (108) func_extra -> empty .

    ID              reduce using rule 108 (func_extra -> empty .)
    READ            reduce using rule 108 (func_extra -> empty .)
    WRITE           reduce using rule 108 (func_extra -> empty .)
    IF              reduce using rule 108 (func_extra -> empty .)
    FOR             reduce using rule 108 (func_extra -> empty .)
    WHILE           reduce using rule 108 (func_extra -> empty .)
    RETURN          reduce using rule 108 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 108 (func_extra -> empty .)


state 98

    (148) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 119


state 99

    (43) punto_param_2 -> empty .

    RPAR            reduce using rule 43 (punto_param_2 -> empty .)


state 100

    (38) param -> tipo_simple ID . punto_param param_2
    (42) punto_param -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    punto_param                    shift and go to state 120
    empty                          shift and go to state 121

state 101

    (32) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 122


state 102

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .

    $end            reduce using rule 9 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .)


state 103

    (11) main_final -> empty .

    $end            reduce using rule 11 (main_final -> empty .)


state 104

    (15) body_3 -> estatuto . body_3
    (15) body_3 -> . estatuto body_3
    (16) body_3 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 104
    body_3                         shift and go to state 123
    empty                          shift and go to state 106
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 105

    (12) body -> body_2 func_agrega_v estatuto body_3 .

    R_C_BRACKET     reduce using rule 12 (body -> body_2 func_agrega_v estatuto body_3 .)


state 106

    (16) body_3 -> empty .
    (108) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 16 (body_3 -> empty .)
    R_C_BRACKET     reduce using rule 16 (body_3 -> empty .)
    ID              reduce using rule 108 (func_extra -> empty .)
    READ            reduce using rule 108 (func_extra -> empty .)
    WRITE           reduce using rule 108 (func_extra -> empty .)
    IF              reduce using rule 108 (func_extra -> empty .)
    FOR             reduce using rule 108 (func_extra -> empty .)
    WHILE           reduce using rule 108 (func_extra -> empty .)
    RETURN          reduce using rule 108 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 108 (func_extra -> empty .) ]


state 107

    (60) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 124
    empty                          shift and go to state 125

state 108

    (62) llamada -> ID verify_func . not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> ID verify_func . LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (72) not_void -> . empty
    (156) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    LPAR            shift and go to state 127

  ! LPAR            [ reduce using rule 156 (empty -> .) ]

    not_void                       shift and go to state 126
    empty                          shift and go to state 128

state 109

    (44) variable -> ID variable_2 . variable_point
    (45) variable_point -> . empty
    (156) empty -> .

    EQUAL           reduce using rule 156 (empty -> .)
    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    variable_point                 shift and go to state 129
    empty                          shift and go to state 130

state 110

    (73) verify_func -> empty .
    (47) variable_2 -> empty .

    LPAR            reduce using rule 73 (verify_func -> empty .)
    EQUAL           reduce using rule 47 (variable_2 -> empty .)


state 111

    (46) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 131
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 112

    (77) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 145

    variable                       shift and go to state 144

state 113

    (79) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (80) write_2 -> . exp write_point
    (81) write_2 -> . CTE_S add_constant_s write_point
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 148
    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    write_2                        shift and go to state 146
    exp                            shift and go to state 147
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 114

    (85) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 149
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 115

    (93) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 150


state 116

    (100) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 151


state 117

    (103) while_point -> empty .

    LPAR            reduce using rule 103 (while_point -> empty .)


state 118

    (106) return -> RETURN LPAR . exp check_valid_func RPAR SEMICOLON
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 152
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 119

    (148) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 153


state 120

    (38) param -> tipo_simple ID punto_param . param_2
    (40) param_2 -> . COMMA param
    (41) param_2 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 155
    RPAR            reduce using rule 156 (empty -> .)

    param_2                        shift and go to state 154
    empty                          shift and go to state 156

state 121

    (42) punto_param -> empty .

    COMMA           reduce using rule 42 (punto_param -> empty .)
    RPAR            reduce using rule 42 (punto_param -> empty .)


state 122

    (32) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (35) var_mat -> . empty
    (156) empty -> .

    SEMICOLON       reduce using rule 156 (empty -> .)

    var_mat                        shift and go to state 157
    empty                          shift and go to state 158

state 123

    (15) body_3 -> estatuto body_3 .

    R_C_BRACKET     reduce using rule 15 (body_3 -> estatuto body_3 .)


state 124

    (60) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    variable                       shift and go to state 138
    exp                            shift and go to state 159
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 125

    (139) add_operator -> empty .

    LPAR            reduce using rule 139 (add_operator -> empty .)
    ID              reduce using rule 139 (add_operator -> empty .)
    CTE_I           reduce using rule 139 (add_operator -> empty .)
    CTE_F           reduce using rule 139 (add_operator -> empty .)


state 126

    (62) llamada -> ID verify_func not_void . LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp

    LPAR            shift and go to state 160


state 127

    (67) llamada_void -> ID verify_func LPAR . llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (68) llamada_void_2 -> . exp verify_parameter
    (69) llamada_void_2 -> . empty
    (109) exp -> . t_exp add_operator_4 exp_2
    (156) empty -> .
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    llamada_void_2                 shift and go to state 161
    exp                            shift and go to state 162
    empty                          shift and go to state 163
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 128

    (72) not_void -> empty .

    LPAR            reduce using rule 72 (not_void -> empty .)


state 129

    (44) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 44 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 44 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 44 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 44 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 44 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 44 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 44 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 44 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 44 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 44 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 44 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 44 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 44 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 44 (variable -> ID variable_2 variable_point .)


state 130

    (45) variable_point -> empty .

    EQUAL           reduce using rule 45 (variable_point -> empty .)
    TIMES           reduce using rule 45 (variable_point -> empty .)
    DIVIDE          reduce using rule 45 (variable_point -> empty .)
    PLUS            reduce using rule 45 (variable_point -> empty .)
    MINUS           reduce using rule 45 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 45 (variable_point -> empty .)
    LESS            reduce using rule 45 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 45 (variable_point -> empty .)
    GREATER         reduce using rule 45 (variable_point -> empty .)
    COMPARE         reduce using rule 45 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 45 (variable_point -> empty .)
    AND             reduce using rule 45 (variable_point -> empty .)
    OR              reduce using rule 45 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 45 (variable_point -> empty .)
    RPAR            reduce using rule 45 (variable_point -> empty .)
    COMMA           reduce using rule 45 (variable_point -> empty .)
    SEMICOLON       reduce using rule 45 (variable_point -> empty .)
    TO              reduce using rule 45 (variable_point -> empty .)


state 131

    (46) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 164


state 132

    (109) exp -> t_exp . add_operator_4 exp_2
    (143) add_operator_4 -> . empty
    (156) empty -> .

    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_operator_4                 shift and go to state 165
    empty                          shift and go to state 166

state 133

    (112) t_exp -> g_exp . add_operator_4 t_exp_2
    (143) add_operator_4 -> . empty
    (156) empty -> .

    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_operator_4                 shift and go to state 167
    empty                          shift and go to state 166

state 134

    (115) g_exp -> m_exp . g_exp_2 add_operator_3
    (116) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (117) g_exp_2 -> . LESS add_operator m_exp
    (118) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (119) g_exp_2 -> . GREATER add_operator m_exp
    (120) g_exp_2 -> . COMPARE add_operator m_exp
    (121) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (122) g_exp_2 -> . empty
    (156) empty -> .

    LESS_EQUAL      shift and go to state 169
    LESS            shift and go to state 170
    GREATER_EQUAL   shift and go to state 171
    GREATER         shift and go to state 172
    COMPARE         shift and go to state 173
    NOT_EQUAL       shift and go to state 174
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    g_exp_2                        shift and go to state 168
    empty                          shift and go to state 175

state 135

    (123) m_exp -> t . add_operator_2 m_exp_2
    (141) add_operator_2 -> . empty
    (156) empty -> .

    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_operator_2                 shift and go to state 176
    empty                          shift and go to state 177

state 136

    (127) t -> f . add_operator_1 t_2
    (140) add_operator_1 -> . empty
    (156) empty -> .

    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_operator_1                 shift and go to state 178
    empty                          shift and go to state 179

state 137

    (131) f -> LPAR . add_floor exp RPAR remove_floor
    (137) add_floor -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_floor                      shift and go to state 180
    empty                          shift and go to state 181

state 138

    (132) f -> variable .

    TIMES           reduce using rule 132 (f -> variable .)
    DIVIDE          reduce using rule 132 (f -> variable .)
    PLUS            reduce using rule 132 (f -> variable .)
    MINUS           reduce using rule 132 (f -> variable .)
    LESS_EQUAL      reduce using rule 132 (f -> variable .)
    LESS            reduce using rule 132 (f -> variable .)
    GREATER_EQUAL   reduce using rule 132 (f -> variable .)
    GREATER         reduce using rule 132 (f -> variable .)
    COMPARE         reduce using rule 132 (f -> variable .)
    NOT_EQUAL       reduce using rule 132 (f -> variable .)
    AND             reduce using rule 132 (f -> variable .)
    OR              reduce using rule 132 (f -> variable .)
    R_S_BRACKET     reduce using rule 132 (f -> variable .)
    COMMA           reduce using rule 132 (f -> variable .)
    RPAR            reduce using rule 132 (f -> variable .)
    SEMICOLON       reduce using rule 132 (f -> variable .)
    TO              reduce using rule 132 (f -> variable .)


state 139

    (133) f -> llamada .

    TIMES           reduce using rule 133 (f -> llamada .)
    DIVIDE          reduce using rule 133 (f -> llamada .)
    PLUS            reduce using rule 133 (f -> llamada .)
    MINUS           reduce using rule 133 (f -> llamada .)
    LESS_EQUAL      reduce using rule 133 (f -> llamada .)
    LESS            reduce using rule 133 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 133 (f -> llamada .)
    GREATER         reduce using rule 133 (f -> llamada .)
    COMPARE         reduce using rule 133 (f -> llamada .)
    NOT_EQUAL       reduce using rule 133 (f -> llamada .)
    AND             reduce using rule 133 (f -> llamada .)
    OR              reduce using rule 133 (f -> llamada .)
    R_S_BRACKET     reduce using rule 133 (f -> llamada .)
    COMMA           reduce using rule 133 (f -> llamada .)
    RPAR            reduce using rule 133 (f -> llamada .)
    SEMICOLON       reduce using rule 133 (f -> llamada .)
    TO              reduce using rule 133 (f -> llamada .)


state 140

    (134) f -> f_2 .

    TIMES           reduce using rule 134 (f -> f_2 .)
    DIVIDE          reduce using rule 134 (f -> f_2 .)
    PLUS            reduce using rule 134 (f -> f_2 .)
    MINUS           reduce using rule 134 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 134 (f -> f_2 .)
    LESS            reduce using rule 134 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 134 (f -> f_2 .)
    GREATER         reduce using rule 134 (f -> f_2 .)
    COMPARE         reduce using rule 134 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 134 (f -> f_2 .)
    AND             reduce using rule 134 (f -> f_2 .)
    OR              reduce using rule 134 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 134 (f -> f_2 .)
    COMMA           reduce using rule 134 (f -> f_2 .)
    RPAR            reduce using rule 134 (f -> f_2 .)
    SEMICOLON       reduce using rule 134 (f -> f_2 .)
    TO              reduce using rule 134 (f -> f_2 .)


state 141

    (44) variable -> ID . variable_2 variable_point
    (62) llamada -> ID . verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (46) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (47) variable_2 -> . empty
    (73) verify_func -> . empty
    (156) empty -> .

    L_S_BRACKET     shift and go to state 111
    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)
    LPAR            reduce using rule 156 (empty -> .)

    variable_2                     shift and go to state 109
    verify_func                    shift and go to state 182
    empty                          shift and go to state 183

state 142

    (135) f_2 -> CTE_I . add_constant_i
    (144) add_constant_i -> . empty
    (156) empty -> .

    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_constant_i                 shift and go to state 184
    empty                          shift and go to state 185

state 143

    (136) f_2 -> CTE_F . add_constant_f
    (146) add_constant_f -> . empty
    (156) empty -> .

    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_constant_f                 shift and go to state 186
    empty                          shift and go to state 187

state 144

    (77) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (78) read_point -> . empty
    (156) empty -> .

    RPAR            reduce using rule 156 (empty -> .)

    read_point                     shift and go to state 188
    empty                          shift and go to state 189

state 145

    (44) variable -> ID . variable_2 variable_point
    (46) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (47) variable_2 -> . empty
    (156) empty -> .

    L_S_BRACKET     shift and go to state 111
    RPAR            reduce using rule 156 (empty -> .)

    variable_2                     shift and go to state 109
    empty                          shift and go to state 190

state 146

    (79) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (82) write_3 -> . COMMA write_2 write_3
    (83) write_3 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 192
    RPAR            reduce using rule 156 (empty -> .)

    write_3                        shift and go to state 191
    empty                          shift and go to state 193

state 147

    (80) write_2 -> exp . write_point
    (84) write_point -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    write_point                    shift and go to state 194
    empty                          shift and go to state 195

state 148

    (81) write_2 -> CTE_S . add_constant_s write_point
    (145) add_constant_s -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    add_constant_s                 shift and go to state 196
    empty                          shift and go to state 197

state 149

    (85) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (90) if_point -> . empty
    (156) empty -> .

    RPAR            reduce using rule 156 (empty -> .)

    if_point                       shift and go to state 198
    empty                          shift and go to state 199

state 150

    (93) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (96) for_point_1 -> . empty
    (156) empty -> .

    EQUAL           reduce using rule 156 (empty -> .)

    for_point_1                    shift and go to state 200
    empty                          shift and go to state 201

state 151

    (100) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 202
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 152

    (106) return -> RETURN LPAR exp . check_valid_func RPAR SEMICOLON
    (107) check_valid_func -> . empty
    (156) empty -> .

    RPAR            reduce using rule 156 (empty -> .)

    check_valid_func               shift and go to state 203
    empty                          shift and go to state 204

state 153

    (148) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (12) body -> . body_2 func_agrega_v estatuto body_3
    (13) body_2 -> . vars
    (14) body_2 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (156) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    body                           shift and go to state 205
    body_2                         shift and go to state 62
    vars                           shift and go to state 63
    empty                          shift and go to state 64

state 154

    (38) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 38 (param -> tipo_simple ID punto_param param_2 .)


state 155

    (40) param_2 -> COMMA . param
    (38) param -> . tipo_simple ID punto_param param_2
    (39) param -> . empty
    (17) tipo_simple -> . INT
    (18) tipo_simple -> . FLOAT
    (19) tipo_simple -> . CHAR
    (156) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 156 (empty -> .)

    param                          shift and go to state 206
    tipo_simple                    shift and go to state 71
    empty                          shift and go to state 72

state 156

    (41) param_2 -> empty .

    RPAR            reduce using rule 41 (param_2 -> empty .)


state 157

    (32) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 32 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 158

    (35) var_mat -> empty .

    SEMICOLON       reduce using rule 35 (var_mat -> empty .)


state 159

    (60) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (61) asigna_point -> . empty
    (156) empty -> .

    SEMICOLON       reduce using rule 156 (empty -> .)

    asigna_point                   shift and go to state 207
    empty                          shift and go to state 208

state 160

    (62) llamada -> ID verify_func not_void LPAR . llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (63) llamada_2 -> . exp verify_parameter
    (64) llamada_2 -> . empty
    (109) exp -> . t_exp add_operator_4 exp_2
    (156) empty -> .
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    llamada_2                      shift and go to state 209
    exp                            shift and go to state 210
    empty                          shift and go to state 211
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 161

    (67) llamada_void -> ID verify_func LPAR llamada_void_2 . llamada_void_3 RPAR SEMICOLON gosub
    (70) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (71) llamada_void_3 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 213
    RPAR            reduce using rule 156 (empty -> .)

    llamada_void_3                 shift and go to state 212
    empty                          shift and go to state 214

state 162

    (68) llamada_void_2 -> exp . verify_parameter
    (74) verify_parameter -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    verify_parameter               shift and go to state 215
    empty                          shift and go to state 216

state 163

    (69) llamada_void_2 -> empty .

    COMMA           reduce using rule 69 (llamada_void_2 -> empty .)
    RPAR            reduce using rule 69 (llamada_void_2 -> empty .)


state 164

    (46) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (48) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (49) variable_3 -> . empty
    (156) empty -> .

    L_S_BRACKET     shift and go to state 217
    EQUAL           reduce using rule 156 (empty -> .)
    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    variable_3                     shift and go to state 218
    empty                          shift and go to state 219

state 165

    (109) exp -> t_exp add_operator_4 . exp_2
    (110) exp_2 -> . OR add_operator exp
    (111) exp_2 -> . empty
    (156) empty -> .

    OR              shift and go to state 221
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    exp_2                          shift and go to state 220
    empty                          shift and go to state 222

state 166

    (143) add_operator_4 -> empty .

    OR              reduce using rule 143 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 143 (add_operator_4 -> empty .)
    COMMA           reduce using rule 143 (add_operator_4 -> empty .)
    RPAR            reduce using rule 143 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 143 (add_operator_4 -> empty .)
    TO              reduce using rule 143 (add_operator_4 -> empty .)
    AND             reduce using rule 143 (add_operator_4 -> empty .)


state 167

    (112) t_exp -> g_exp add_operator_4 . t_exp_2
    (113) t_exp_2 -> . AND add_operator t_exp
    (114) t_exp_2 -> . empty
    (156) empty -> .

    AND             shift and go to state 224
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    t_exp_2                        shift and go to state 223
    empty                          shift and go to state 225

state 168

    (115) g_exp -> m_exp g_exp_2 . add_operator_3
    (142) add_operator_3 -> . empty
    (156) empty -> .

    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_operator_3                 shift and go to state 226
    empty                          shift and go to state 227

state 169

    (116) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 228
    empty                          shift and go to state 125

state 170

    (117) g_exp_2 -> LESS . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 229
    empty                          shift and go to state 125

state 171

    (118) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 230
    empty                          shift and go to state 125

state 172

    (119) g_exp_2 -> GREATER . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 231
    empty                          shift and go to state 125

state 173

    (120) g_exp_2 -> COMPARE . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 232
    empty                          shift and go to state 125

state 174

    (121) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 233
    empty                          shift and go to state 125

state 175

    (122) g_exp_2 -> empty .

    AND             reduce using rule 122 (g_exp_2 -> empty .)
    OR              reduce using rule 122 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 122 (g_exp_2 -> empty .)
    COMMA           reduce using rule 122 (g_exp_2 -> empty .)
    RPAR            reduce using rule 122 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 122 (g_exp_2 -> empty .)
    TO              reduce using rule 122 (g_exp_2 -> empty .)


state 176

    (123) m_exp -> t add_operator_2 . m_exp_2
    (124) m_exp_2 -> . PLUS add_operator m_exp
    (125) m_exp_2 -> . MINUS add_operator m_exp
    (126) m_exp_2 -> . empty
    (156) empty -> .

    PLUS            shift and go to state 235
    MINUS           shift and go to state 236
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    m_exp_2                        shift and go to state 234
    empty                          shift and go to state 237

state 177

    (141) add_operator_2 -> empty .

    PLUS            reduce using rule 141 (add_operator_2 -> empty .)
    MINUS           reduce using rule 141 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 141 (add_operator_2 -> empty .)
    LESS            reduce using rule 141 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 141 (add_operator_2 -> empty .)
    GREATER         reduce using rule 141 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 141 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 141 (add_operator_2 -> empty .)
    AND             reduce using rule 141 (add_operator_2 -> empty .)
    OR              reduce using rule 141 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 141 (add_operator_2 -> empty .)
    COMMA           reduce using rule 141 (add_operator_2 -> empty .)
    RPAR            reduce using rule 141 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 141 (add_operator_2 -> empty .)
    TO              reduce using rule 141 (add_operator_2 -> empty .)


state 178

    (127) t -> f add_operator_1 . t_2
    (128) t_2 -> . TIMES add_operator t
    (129) t_2 -> . DIVIDE add_operator t
    (130) t_2 -> . empty
    (156) empty -> .

    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 240
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    t_2                            shift and go to state 238
    empty                          shift and go to state 241

state 179

    (140) add_operator_1 -> empty .

    TIMES           reduce using rule 140 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 140 (add_operator_1 -> empty .)
    PLUS            reduce using rule 140 (add_operator_1 -> empty .)
    MINUS           reduce using rule 140 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 140 (add_operator_1 -> empty .)
    LESS            reduce using rule 140 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 140 (add_operator_1 -> empty .)
    GREATER         reduce using rule 140 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 140 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 140 (add_operator_1 -> empty .)
    AND             reduce using rule 140 (add_operator_1 -> empty .)
    OR              reduce using rule 140 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 140 (add_operator_1 -> empty .)
    COMMA           reduce using rule 140 (add_operator_1 -> empty .)
    RPAR            reduce using rule 140 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 140 (add_operator_1 -> empty .)
    TO              reduce using rule 140 (add_operator_1 -> empty .)


state 180

    (131) f -> LPAR add_floor . exp RPAR remove_floor
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 242
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 181

    (137) add_floor -> empty .

    LPAR            reduce using rule 137 (add_floor -> empty .)
    ID              reduce using rule 137 (add_floor -> empty .)
    CTE_I           reduce using rule 137 (add_floor -> empty .)
    CTE_F           reduce using rule 137 (add_floor -> empty .)


state 182

    (62) llamada -> ID verify_func . not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (72) not_void -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)

    not_void                       shift and go to state 126
    empty                          shift and go to state 128

state 183

    (47) variable_2 -> empty .
    (73) verify_func -> empty .

    TIMES           reduce using rule 47 (variable_2 -> empty .)
    DIVIDE          reduce using rule 47 (variable_2 -> empty .)
    PLUS            reduce using rule 47 (variable_2 -> empty .)
    MINUS           reduce using rule 47 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 47 (variable_2 -> empty .)
    LESS            reduce using rule 47 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 47 (variable_2 -> empty .)
    GREATER         reduce using rule 47 (variable_2 -> empty .)
    COMPARE         reduce using rule 47 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 47 (variable_2 -> empty .)
    AND             reduce using rule 47 (variable_2 -> empty .)
    OR              reduce using rule 47 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 47 (variable_2 -> empty .)
    COMMA           reduce using rule 47 (variable_2 -> empty .)
    RPAR            reduce using rule 47 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 47 (variable_2 -> empty .)
    TO              reduce using rule 47 (variable_2 -> empty .)
    LPAR            reduce using rule 73 (verify_func -> empty .)


state 184

    (135) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 135 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 135 (f_2 -> CTE_I add_constant_i .)


state 185

    (144) add_constant_i -> empty .

    TIMES           reduce using rule 144 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 144 (add_constant_i -> empty .)
    PLUS            reduce using rule 144 (add_constant_i -> empty .)
    MINUS           reduce using rule 144 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 144 (add_constant_i -> empty .)
    LESS            reduce using rule 144 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 144 (add_constant_i -> empty .)
    GREATER         reduce using rule 144 (add_constant_i -> empty .)
    COMPARE         reduce using rule 144 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 144 (add_constant_i -> empty .)
    AND             reduce using rule 144 (add_constant_i -> empty .)
    OR              reduce using rule 144 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 144 (add_constant_i -> empty .)
    COMMA           reduce using rule 144 (add_constant_i -> empty .)
    RPAR            reduce using rule 144 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 144 (add_constant_i -> empty .)
    TO              reduce using rule 144 (add_constant_i -> empty .)


state 186

    (136) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 136 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 136 (f_2 -> CTE_F add_constant_f .)


state 187

    (146) add_constant_f -> empty .

    TIMES           reduce using rule 146 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 146 (add_constant_f -> empty .)
    PLUS            reduce using rule 146 (add_constant_f -> empty .)
    MINUS           reduce using rule 146 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 146 (add_constant_f -> empty .)
    LESS            reduce using rule 146 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 146 (add_constant_f -> empty .)
    GREATER         reduce using rule 146 (add_constant_f -> empty .)
    COMPARE         reduce using rule 146 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 146 (add_constant_f -> empty .)
    AND             reduce using rule 146 (add_constant_f -> empty .)
    OR              reduce using rule 146 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 146 (add_constant_f -> empty .)
    COMMA           reduce using rule 146 (add_constant_f -> empty .)
    RPAR            reduce using rule 146 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 146 (add_constant_f -> empty .)
    TO              reduce using rule 146 (add_constant_f -> empty .)


state 188

    (77) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 243


state 189

    (78) read_point -> empty .

    RPAR            reduce using rule 78 (read_point -> empty .)


state 190

    (47) variable_2 -> empty .

    RPAR            reduce using rule 47 (variable_2 -> empty .)


state 191

    (79) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 244


state 192

    (82) write_3 -> COMMA . write_2 write_3
    (80) write_2 -> . exp write_point
    (81) write_2 -> . CTE_S add_constant_s write_point
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 148
    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    write_2                        shift and go to state 245
    exp                            shift and go to state 147
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 193

    (83) write_3 -> empty .

    RPAR            reduce using rule 83 (write_3 -> empty .)


state 194

    (80) write_2 -> exp write_point .

    COMMA           reduce using rule 80 (write_2 -> exp write_point .)
    RPAR            reduce using rule 80 (write_2 -> exp write_point .)


state 195

    (84) write_point -> empty .

    COMMA           reduce using rule 84 (write_point -> empty .)
    RPAR            reduce using rule 84 (write_point -> empty .)


state 196

    (81) write_2 -> CTE_S add_constant_s . write_point
    (84) write_point -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    write_point                    shift and go to state 246
    empty                          shift and go to state 195

state 197

    (145) add_constant_s -> empty .

    COMMA           reduce using rule 145 (add_constant_s -> empty .)
    RPAR            reduce using rule 145 (add_constant_s -> empty .)


state 198

    (85) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 247


state 199

    (90) if_point -> empty .

    RPAR            reduce using rule 90 (if_point -> empty .)


state 200

    (93) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 248


state 201

    (96) for_point_1 -> empty .

    EQUAL           reduce using rule 96 (for_point_1 -> empty .)


state 202

    (100) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 249


state 203

    (106) return -> RETURN LPAR exp check_valid_func . RPAR SEMICOLON

    RPAR            shift and go to state 250


state 204

    (107) check_valid_func -> empty .

    RPAR            reduce using rule 107 (check_valid_func -> empty .)


state 205

    (148) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 251


state 206

    (40) param_2 -> COMMA param .

    RPAR            reduce using rule 40 (param_2 -> COMMA param .)


state 207

    (60) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 252


state 208

    (61) asigna_point -> empty .

    SEMICOLON       reduce using rule 61 (asigna_point -> empty .)


state 209

    (62) llamada -> ID verify_func not_void LPAR llamada_2 . llamada_3 RPAR SEMICOLON gosub add_temp
    (65) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (66) llamada_3 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 254
    RPAR            reduce using rule 156 (empty -> .)

    llamada_3                      shift and go to state 253
    empty                          shift and go to state 255

state 210

    (63) llamada_2 -> exp . verify_parameter
    (74) verify_parameter -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    verify_parameter               shift and go to state 256
    empty                          shift and go to state 216

state 211

    (64) llamada_2 -> empty .

    COMMA           reduce using rule 64 (llamada_2 -> empty .)
    RPAR            reduce using rule 64 (llamada_2 -> empty .)


state 212

    (67) llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 . RPAR SEMICOLON gosub

    RPAR            shift and go to state 257


state 213

    (70) llamada_void_3 -> COMMA . exp verify_parameter llamada_void_3
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 258
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 214

    (71) llamada_void_3 -> empty .

    RPAR            reduce using rule 71 (llamada_void_3 -> empty .)


state 215

    (68) llamada_void_2 -> exp verify_parameter .

    COMMA           reduce using rule 68 (llamada_void_2 -> exp verify_parameter .)
    RPAR            reduce using rule 68 (llamada_void_2 -> exp verify_parameter .)


state 216

    (74) verify_parameter -> empty .

    COMMA           reduce using rule 74 (verify_parameter -> empty .)
    RPAR            reduce using rule 74 (verify_parameter -> empty .)


state 217

    (48) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 259
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 218

    (46) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 46 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 219

    (49) variable_3 -> empty .

    EQUAL           reduce using rule 49 (variable_3 -> empty .)
    TIMES           reduce using rule 49 (variable_3 -> empty .)
    DIVIDE          reduce using rule 49 (variable_3 -> empty .)
    PLUS            reduce using rule 49 (variable_3 -> empty .)
    MINUS           reduce using rule 49 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 49 (variable_3 -> empty .)
    LESS            reduce using rule 49 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 49 (variable_3 -> empty .)
    GREATER         reduce using rule 49 (variable_3 -> empty .)
    COMPARE         reduce using rule 49 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 49 (variable_3 -> empty .)
    AND             reduce using rule 49 (variable_3 -> empty .)
    OR              reduce using rule 49 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 49 (variable_3 -> empty .)
    COMMA           reduce using rule 49 (variable_3 -> empty .)
    RPAR            reduce using rule 49 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 49 (variable_3 -> empty .)
    TO              reduce using rule 49 (variable_3 -> empty .)


state 220

    (109) exp -> t_exp add_operator_4 exp_2 .

    R_S_BRACKET     reduce using rule 109 (exp -> t_exp add_operator_4 exp_2 .)
    COMMA           reduce using rule 109 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 109 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 109 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 109 (exp -> t_exp add_operator_4 exp_2 .)


state 221

    (110) exp_2 -> OR . add_operator exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 260
    empty                          shift and go to state 125

state 222

    (111) exp_2 -> empty .

    R_S_BRACKET     reduce using rule 111 (exp_2 -> empty .)
    COMMA           reduce using rule 111 (exp_2 -> empty .)
    RPAR            reduce using rule 111 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 111 (exp_2 -> empty .)
    TO              reduce using rule 111 (exp_2 -> empty .)


state 223

    (112) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 112 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 112 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 112 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 112 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 112 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 112 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 224

    (113) t_exp_2 -> AND . add_operator t_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 261
    empty                          shift and go to state 125

state 225

    (114) t_exp_2 -> empty .

    OR              reduce using rule 114 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 114 (t_exp_2 -> empty .)
    COMMA           reduce using rule 114 (t_exp_2 -> empty .)
    RPAR            reduce using rule 114 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 114 (t_exp_2 -> empty .)
    TO              reduce using rule 114 (t_exp_2 -> empty .)


state 226

    (115) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 115 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 227

    (142) add_operator_3 -> empty .

    AND             reduce using rule 142 (add_operator_3 -> empty .)
    OR              reduce using rule 142 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 142 (add_operator_3 -> empty .)
    COMMA           reduce using rule 142 (add_operator_3 -> empty .)
    RPAR            reduce using rule 142 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 142 (add_operator_3 -> empty .)
    TO              reduce using rule 142 (add_operator_3 -> empty .)


state 228

    (116) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 262
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 229

    (117) g_exp_2 -> LESS add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 263
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 230

    (118) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 264
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 231

    (119) g_exp_2 -> GREATER add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 265
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 232

    (120) g_exp_2 -> COMPARE add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 266
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 233

    (121) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 267
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 234

    (123) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 123 (m_exp -> t add_operator_2 m_exp_2 .)


state 235

    (124) m_exp_2 -> PLUS . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 268
    empty                          shift and go to state 125

state 236

    (125) m_exp_2 -> MINUS . add_operator m_exp
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 269
    empty                          shift and go to state 125

state 237

    (126) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 126 (m_exp_2 -> empty .)
    LESS            reduce using rule 126 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 126 (m_exp_2 -> empty .)
    GREATER         reduce using rule 126 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 126 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 126 (m_exp_2 -> empty .)
    AND             reduce using rule 126 (m_exp_2 -> empty .)
    OR              reduce using rule 126 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 126 (m_exp_2 -> empty .)
    COMMA           reduce using rule 126 (m_exp_2 -> empty .)
    RPAR            reduce using rule 126 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 126 (m_exp_2 -> empty .)
    TO              reduce using rule 126 (m_exp_2 -> empty .)


state 238

    (127) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 127 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 127 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 127 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 127 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 127 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 127 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 127 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 127 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 127 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 127 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 127 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 127 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 127 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 127 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 127 (t -> f add_operator_1 t_2 .)


state 239

    (128) t_2 -> TIMES . add_operator t
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 270
    empty                          shift and go to state 125

state 240

    (129) t_2 -> DIVIDE . add_operator t
    (139) add_operator -> . empty
    (156) empty -> .

    LPAR            reduce using rule 156 (empty -> .)
    ID              reduce using rule 156 (empty -> .)
    CTE_I           reduce using rule 156 (empty -> .)
    CTE_F           reduce using rule 156 (empty -> .)

    add_operator                   shift and go to state 271
    empty                          shift and go to state 125

state 241

    (130) t_2 -> empty .

    PLUS            reduce using rule 130 (t_2 -> empty .)
    MINUS           reduce using rule 130 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 130 (t_2 -> empty .)
    LESS            reduce using rule 130 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 130 (t_2 -> empty .)
    GREATER         reduce using rule 130 (t_2 -> empty .)
    COMPARE         reduce using rule 130 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 130 (t_2 -> empty .)
    AND             reduce using rule 130 (t_2 -> empty .)
    OR              reduce using rule 130 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 130 (t_2 -> empty .)
    COMMA           reduce using rule 130 (t_2 -> empty .)
    RPAR            reduce using rule 130 (t_2 -> empty .)
    SEMICOLON       reduce using rule 130 (t_2 -> empty .)
    TO              reduce using rule 130 (t_2 -> empty .)


state 242

    (131) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 272


state 243

    (77) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 273


state 244

    (79) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 274


state 245

    (82) write_3 -> COMMA write_2 . write_3
    (82) write_3 -> . COMMA write_2 write_3
    (83) write_3 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 192
    RPAR            reduce using rule 156 (empty -> .)

    write_3                        shift and go to state 275
    empty                          shift and go to state 193

state 246

    (81) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 81 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 81 (write_2 -> CTE_S add_constant_s write_point .)


state 247

    (85) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 276


state 248

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 277
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 249

    (100) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (104) while_point_2 -> . empty
    (156) empty -> .

    L_C_BRACKET     reduce using rule 156 (empty -> .)

    while_point_2                  shift and go to state 278
    empty                          shift and go to state 279

state 250

    (106) return -> RETURN LPAR exp check_valid_func RPAR . SEMICOLON

    SEMICOLON       shift and go to state 280


state 251

    (148) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (155) final_func_point -> . empty
    (156) empty -> .

    SEMICOLON       reduce using rule 156 (empty -> .)

    final_func_point               shift and go to state 281
    empty                          shift and go to state 282

state 252

    (60) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 253

    (62) llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 . RPAR SEMICOLON gosub add_temp

    RPAR            shift and go to state 283


state 254

    (65) llamada_3 -> COMMA . exp verify_parameter llamada_3
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 284
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 255

    (66) llamada_3 -> empty .

    RPAR            reduce using rule 66 (llamada_3 -> empty .)


state 256

    (63) llamada_2 -> exp verify_parameter .

    COMMA           reduce using rule 63 (llamada_2 -> exp verify_parameter .)
    RPAR            reduce using rule 63 (llamada_2 -> exp verify_parameter .)


state 257

    (67) llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR . SEMICOLON gosub

    SEMICOLON       shift and go to state 285


state 258

    (70) llamada_void_3 -> COMMA exp . verify_parameter llamada_void_3
    (74) verify_parameter -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    verify_parameter               shift and go to state 286
    empty                          shift and go to state 216

state 259

    (48) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 287


state 260

    (110) exp_2 -> OR add_operator . exp
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 288
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 261

    (113) t_exp_2 -> AND add_operator . t_exp
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    t_exp                          shift and go to state 289
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 262

    (116) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 116 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 263

    (117) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 117 (g_exp_2 -> LESS add_operator m_exp .)


state 264

    (118) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 118 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 265

    (119) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 119 (g_exp_2 -> GREATER add_operator m_exp .)


state 266

    (120) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 120 (g_exp_2 -> COMPARE add_operator m_exp .)


state 267

    (121) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 121 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 268

    (124) m_exp_2 -> PLUS add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 290
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 269

    (125) m_exp_2 -> MINUS add_operator . m_exp
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    m_exp                          shift and go to state 291
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 270

    (128) t_2 -> TIMES add_operator . t
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    t                              shift and go to state 292
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 271

    (129) t_2 -> DIVIDE add_operator . t
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    t                              shift and go to state 293
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 272

    (131) f -> LPAR add_floor exp RPAR . remove_floor
    (138) remove_floor -> . empty
    (156) empty -> .

    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    remove_floor                   shift and go to state 294
    empty                          shift and go to state 295

state 273

    (77) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 274

    (79) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 275

    (82) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 82 (write_3 -> COMMA write_2 write_3 .)


state 276

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point
    (156) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96
    R_C_BRACKET     reduce using rule 156 (empty -> .)

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 296
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 97

state 277

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (97) for_point_2 -> . empty
    (156) empty -> .

    TO              reduce using rule 156 (empty -> .)

    for_point_2                    shift and go to state 297
    empty                          shift and go to state 298

state 278

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 299


state 279

    (104) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 104 (while_point_2 -> empty .)


state 280

    (106) return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .

    ID              reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    READ            reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WRITE           reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    IF              reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    FOR             reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WHILE           reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    RETURN          reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)


state 281

    (148) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 148 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 282

    (155) final_func_point -> empty .

    SEMICOLON       reduce using rule 155 (final_func_point -> empty .)


state 283

    (62) llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR . SEMICOLON gosub add_temp

    SEMICOLON       shift and go to state 300


state 284

    (65) llamada_3 -> COMMA exp . verify_parameter llamada_3
    (74) verify_parameter -> . empty
    (156) empty -> .

    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)

    verify_parameter               shift and go to state 301
    empty                          shift and go to state 216

state 285

    (67) llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON . gosub
    (75) gosub -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    gosub                          shift and go to state 302
    empty                          shift and go to state 303

state 286

    (70) llamada_void_3 -> COMMA exp verify_parameter . llamada_void_3
    (70) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (71) llamada_void_3 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 213
    RPAR            reduce using rule 156 (empty -> .)

    llamada_void_3                 shift and go to state 304
    empty                          shift and go to state 214

state 287

    (48) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 48 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 288

    (110) exp_2 -> OR add_operator exp .

    R_S_BRACKET     reduce using rule 110 (exp_2 -> OR add_operator exp .)
    COMMA           reduce using rule 110 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 110 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 110 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 110 (exp_2 -> OR add_operator exp .)


state 289

    (113) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 113 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 113 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 113 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 113 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 113 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 113 (t_exp_2 -> AND add_operator t_exp .)


state 290

    (124) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 124 (m_exp_2 -> PLUS add_operator m_exp .)


state 291

    (125) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 125 (m_exp_2 -> MINUS add_operator m_exp .)


state 292

    (128) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 128 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 128 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 128 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 128 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 128 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 128 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 128 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 128 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 128 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 128 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 128 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 128 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 128 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 128 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 128 (t_2 -> TIMES add_operator t .)


state 293

    (129) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 129 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 129 (t_2 -> DIVIDE add_operator t .)


state 294

    (131) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 131 (f -> LPAR add_floor exp RPAR remove_floor .)


state 295

    (138) remove_floor -> empty .

    TIMES           reduce using rule 138 (remove_floor -> empty .)
    DIVIDE          reduce using rule 138 (remove_floor -> empty .)
    PLUS            reduce using rule 138 (remove_floor -> empty .)
    MINUS           reduce using rule 138 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 138 (remove_floor -> empty .)
    LESS            reduce using rule 138 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 138 (remove_floor -> empty .)
    GREATER         reduce using rule 138 (remove_floor -> empty .)
    COMPARE         reduce using rule 138 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 138 (remove_floor -> empty .)
    AND             reduce using rule 138 (remove_floor -> empty .)
    OR              reduce using rule 138 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 138 (remove_floor -> empty .)
    COMMA           reduce using rule 138 (remove_floor -> empty .)
    RPAR            reduce using rule 138 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 138 (remove_floor -> empty .)
    TO              reduce using rule 138 (remove_floor -> empty .)


state 296

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (86) if_2 -> . estatuto if_2
    (87) if_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 305
    if_2                           shift and go to state 306
    empty                          shift and go to state 307
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 297

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 308


state 298

    (97) for_point_2 -> empty .

    TO              reduce using rule 97 (for_point_2 -> empty .)


state 299

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point
    (156) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96
    R_C_BRACKET     reduce using rule 156 (empty -> .)

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 309
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 97

state 300

    (62) llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON . gosub add_temp
    (75) gosub -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    gosub                          shift and go to state 310
    empty                          shift and go to state 303

state 301

    (65) llamada_3 -> COMMA exp verify_parameter . llamada_3
    (65) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (66) llamada_3 -> . empty
    (156) empty -> .

    COMMA           shift and go to state 254
    RPAR            reduce using rule 156 (empty -> .)

    llamada_3                      shift and go to state 311
    empty                          shift and go to state 255

state 302

    (67) llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .

    ID              reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    READ            reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    WRITE           reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    IF              reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    FOR             reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    WHILE           reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    RETURN          reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)
    R_C_BRACKET     reduce using rule 67 (llamada_void -> ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub .)


state 303

    (75) gosub -> empty .

    ID              reduce using rule 75 (gosub -> empty .)
    READ            reduce using rule 75 (gosub -> empty .)
    WRITE           reduce using rule 75 (gosub -> empty .)
    IF              reduce using rule 75 (gosub -> empty .)
    FOR             reduce using rule 75 (gosub -> empty .)
    WHILE           reduce using rule 75 (gosub -> empty .)
    RETURN          reduce using rule 75 (gosub -> empty .)
    R_C_BRACKET     reduce using rule 75 (gosub -> empty .)
    TIMES           reduce using rule 75 (gosub -> empty .)
    DIVIDE          reduce using rule 75 (gosub -> empty .)
    PLUS            reduce using rule 75 (gosub -> empty .)
    MINUS           reduce using rule 75 (gosub -> empty .)
    LESS_EQUAL      reduce using rule 75 (gosub -> empty .)
    LESS            reduce using rule 75 (gosub -> empty .)
    GREATER_EQUAL   reduce using rule 75 (gosub -> empty .)
    GREATER         reduce using rule 75 (gosub -> empty .)
    COMPARE         reduce using rule 75 (gosub -> empty .)
    NOT_EQUAL       reduce using rule 75 (gosub -> empty .)
    AND             reduce using rule 75 (gosub -> empty .)
    OR              reduce using rule 75 (gosub -> empty .)
    R_S_BRACKET     reduce using rule 75 (gosub -> empty .)
    COMMA           reduce using rule 75 (gosub -> empty .)
    RPAR            reduce using rule 75 (gosub -> empty .)
    SEMICOLON       reduce using rule 75 (gosub -> empty .)
    TO              reduce using rule 75 (gosub -> empty .)


state 304

    (70) llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .

    RPAR            reduce using rule 70 (llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .)


state 305

    (86) if_2 -> estatuto . if_2
    (86) if_2 -> . estatuto if_2
    (87) if_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 305
    if_2                           shift and go to state 312
    empty                          shift and go to state 307
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 306

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 313


state 307

    (87) if_2 -> empty .
    (108) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 87 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 87 (if_2 -> empty .)
    ID              reduce using rule 108 (func_extra -> empty .)
    READ            reduce using rule 108 (func_extra -> empty .)
    WRITE           reduce using rule 108 (func_extra -> empty .)
    IF              reduce using rule 108 (func_extra -> empty .)
    FOR             reduce using rule 108 (func_extra -> empty .)
    WHILE           reduce using rule 108 (func_extra -> empty .)
    RETURN          reduce using rule 108 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 108 (func_extra -> empty .) ]


state 308

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (109) exp -> . t_exp add_operator_4 exp_2
    (112) t_exp -> . g_exp add_operator_4 t_exp_2
    (115) g_exp -> . m_exp g_exp_2 add_operator_3
    (123) m_exp -> . t add_operator_2 m_exp_2
    (127) t -> . f add_operator_1 t_2
    (131) f -> . LPAR add_floor exp RPAR remove_floor
    (132) f -> . variable
    (133) f -> . llamada
    (134) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (135) f_2 -> . CTE_I add_constant_i
    (136) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 141
    CTE_I           shift and go to state 142
    CTE_F           shift and go to state 143

    exp                            shift and go to state 314
    t_exp                          shift and go to state 132
    g_exp                          shift and go to state 133
    m_exp                          shift and go to state 134
    t                              shift and go to state 135
    f                              shift and go to state 136
    variable                       shift and go to state 138
    llamada                        shift and go to state 139
    f_2                            shift and go to state 140

state 309

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (101) while_l_2 -> . estatuto while_l_2
    (102) while_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 315
    while_l_2                      shift and go to state 316
    empty                          shift and go to state 317
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 310

    (62) llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub . add_temp
    (76) add_temp -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    TIMES           reduce using rule 156 (empty -> .)
    DIVIDE          reduce using rule 156 (empty -> .)
    PLUS            reduce using rule 156 (empty -> .)
    MINUS           reduce using rule 156 (empty -> .)
    LESS_EQUAL      reduce using rule 156 (empty -> .)
    LESS            reduce using rule 156 (empty -> .)
    GREATER_EQUAL   reduce using rule 156 (empty -> .)
    GREATER         reduce using rule 156 (empty -> .)
    COMPARE         reduce using rule 156 (empty -> .)
    NOT_EQUAL       reduce using rule 156 (empty -> .)
    AND             reduce using rule 156 (empty -> .)
    OR              reduce using rule 156 (empty -> .)
    R_S_BRACKET     reduce using rule 156 (empty -> .)
    COMMA           reduce using rule 156 (empty -> .)
    RPAR            reduce using rule 156 (empty -> .)
    SEMICOLON       reduce using rule 156 (empty -> .)
    TO              reduce using rule 156 (empty -> .)

    add_temp                       shift and go to state 318
    empty                          shift and go to state 319

state 311

    (65) llamada_3 -> COMMA exp verify_parameter llamada_3 .

    RPAR            reduce using rule 65 (llamada_3 -> COMMA exp verify_parameter llamada_3 .)


state 312

    (86) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 86 (if_2 -> estatuto if_2 .)


state 313

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (88) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (89) if_3 -> . empty
    (156) empty -> .

    ELSE            shift and go to state 321
    SEMICOLON       reduce using rule 156 (empty -> .)

    if_3                           shift and go to state 320
    empty                          shift and go to state 322

state 314

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (98) for_point_3 -> . empty
    (156) empty -> .

    RPAR            reduce using rule 156 (empty -> .)

    for_point_3                    shift and go to state 323
    empty                          shift and go to state 324

state 315

    (101) while_l_2 -> estatuto . while_l_2
    (101) while_l_2 -> . estatuto while_l_2
    (102) while_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 315
    while_l_2                      shift and go to state 325
    empty                          shift and go to state 317
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 316

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 326


state 317

    (102) while_l_2 -> empty .
    (108) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 102 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 102 (while_l_2 -> empty .)
    ID              reduce using rule 108 (func_extra -> empty .)
    READ            reduce using rule 108 (func_extra -> empty .)
    WRITE           reduce using rule 108 (func_extra -> empty .)
    IF              reduce using rule 108 (func_extra -> empty .)
    FOR             reduce using rule 108 (func_extra -> empty .)
    WHILE           reduce using rule 108 (func_extra -> empty .)
    RETURN          reduce using rule 108 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 108 (func_extra -> empty .) ]


state 318

    (62) llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .

    ID              reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    READ            reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    WRITE           reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    IF              reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    FOR             reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    WHILE           reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    RETURN          reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    R_C_BRACKET     reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    TIMES           reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    DIVIDE          reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    PLUS            reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    MINUS           reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    LESS_EQUAL      reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    LESS            reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    GREATER_EQUAL   reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    GREATER         reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    COMPARE         reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    NOT_EQUAL       reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    AND             reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    OR              reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    R_S_BRACKET     reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    COMMA           reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    RPAR            reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    SEMICOLON       reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)
    TO              reduce using rule 62 (llamada -> ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp .)


state 319

    (76) add_temp -> empty .

    ID              reduce using rule 76 (add_temp -> empty .)
    READ            reduce using rule 76 (add_temp -> empty .)
    WRITE           reduce using rule 76 (add_temp -> empty .)
    IF              reduce using rule 76 (add_temp -> empty .)
    FOR             reduce using rule 76 (add_temp -> empty .)
    WHILE           reduce using rule 76 (add_temp -> empty .)
    RETURN          reduce using rule 76 (add_temp -> empty .)
    R_C_BRACKET     reduce using rule 76 (add_temp -> empty .)
    TIMES           reduce using rule 76 (add_temp -> empty .)
    DIVIDE          reduce using rule 76 (add_temp -> empty .)
    PLUS            reduce using rule 76 (add_temp -> empty .)
    MINUS           reduce using rule 76 (add_temp -> empty .)
    LESS_EQUAL      reduce using rule 76 (add_temp -> empty .)
    LESS            reduce using rule 76 (add_temp -> empty .)
    GREATER_EQUAL   reduce using rule 76 (add_temp -> empty .)
    GREATER         reduce using rule 76 (add_temp -> empty .)
    COMPARE         reduce using rule 76 (add_temp -> empty .)
    NOT_EQUAL       reduce using rule 76 (add_temp -> empty .)
    AND             reduce using rule 76 (add_temp -> empty .)
    OR              reduce using rule 76 (add_temp -> empty .)
    R_S_BRACKET     reduce using rule 76 (add_temp -> empty .)
    COMMA           reduce using rule 76 (add_temp -> empty .)
    RPAR            reduce using rule 76 (add_temp -> empty .)
    SEMICOLON       reduce using rule 76 (add_temp -> empty .)
    TO              reduce using rule 76 (add_temp -> empty .)


state 320

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 327


state 321

    (88) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (92) if_point_3 -> . empty
    (156) empty -> .

    L_C_BRACKET     reduce using rule 156 (empty -> .)

    if_point_3                     shift and go to state 328
    empty                          shift and go to state 329

state 322

    (89) if_3 -> empty .

    SEMICOLON       reduce using rule 89 (if_3 -> empty .)


state 323

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 330


state 324

    (98) for_point_3 -> empty .

    RPAR            reduce using rule 98 (for_point_3 -> empty .)


state 325

    (101) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 101 (while_l_2 -> estatuto while_l_2 .)


state 326

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 331


state 327

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (91) if_point_2 -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    if_point_2                     shift and go to state 332
    empty                          shift and go to state 333

state 328

    (88) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 334


state 329

    (92) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 92 (if_point_3 -> empty .)


state 330

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 335


state 331

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (105) while_point_3 -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    while_point_3                  shift and go to state 336
    empty                          shift and go to state 337

state 332

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 333

    (91) if_point_2 -> empty .

    ID              reduce using rule 91 (if_point_2 -> empty .)
    READ            reduce using rule 91 (if_point_2 -> empty .)
    WRITE           reduce using rule 91 (if_point_2 -> empty .)
    IF              reduce using rule 91 (if_point_2 -> empty .)
    FOR             reduce using rule 91 (if_point_2 -> empty .)
    WHILE           reduce using rule 91 (if_point_2 -> empty .)
    RETURN          reduce using rule 91 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 91 (if_point_2 -> empty .)


state 334

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point
    (156) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96
    R_C_BRACKET     reduce using rule 156 (empty -> .)

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 338
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 97

state 335

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point
    (156) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96
    R_C_BRACKET     reduce using rule 156 (empty -> .)

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 339
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 97

state 336

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 337

    (105) while_point_3 -> empty .

    ID              reduce using rule 105 (while_point_3 -> empty .)
    READ            reduce using rule 105 (while_point_3 -> empty .)
    WRITE           reduce using rule 105 (while_point_3 -> empty .)
    IF              reduce using rule 105 (while_point_3 -> empty .)
    FOR             reduce using rule 105 (while_point_3 -> empty .)
    WHILE           reduce using rule 105 (while_point_3 -> empty .)
    RETURN          reduce using rule 105 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 105 (while_point_3 -> empty .)


state 338

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (86) if_2 -> . estatuto if_2
    (87) if_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 305
    if_2                           shift and go to state 340
    empty                          shift and go to state 307
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 339

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (94) for_l_2 -> . estatuto for_l_2
    (95) for_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 341
    for_l_2                        shift and go to state 342
    empty                          shift and go to state 343
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 340

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 344


state 341

    (94) for_l_2 -> estatuto . for_l_2
    (94) for_l_2 -> . estatuto for_l_2
    (95) for_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . func_extra
    (156) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR llamada_2 llamada_3 RPAR SEMICOLON gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR llamada_void_2 llamada_void_3 RPAR SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (108) func_extra -> . empty
    (44) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 156 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    RETURN          shift and go to state 96

  ! ID              [ reduce using rule 156 (empty -> .) ]
  ! READ            [ reduce using rule 156 (empty -> .) ]
  ! WRITE           [ reduce using rule 156 (empty -> .) ]
  ! IF              [ reduce using rule 156 (empty -> .) ]
  ! FOR             [ reduce using rule 156 (empty -> .) ]
  ! WHILE           [ reduce using rule 156 (empty -> .) ]
  ! RETURN          [ reduce using rule 156 (empty -> .) ]

    estatuto                       shift and go to state 341
    for_l_2                        shift and go to state 345
    empty                          shift and go to state 343
    asigna                         shift and go to state 79
    llamada                        shift and go to state 80
    llamada_void                   shift and go to state 81
    read                           shift and go to state 82
    write                          shift and go to state 83
    if_1                           shift and go to state 84
    for_l                          shift and go to state 85
    while_l                        shift and go to state 86
    return                         shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 342

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 346


state 343

    (95) for_l_2 -> empty .
    (108) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 95 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 95 (for_l_2 -> empty .)
    ID              reduce using rule 108 (func_extra -> empty .)
    READ            reduce using rule 108 (func_extra -> empty .)
    WRITE           reduce using rule 108 (func_extra -> empty .)
    IF              reduce using rule 108 (func_extra -> empty .)
    FOR             reduce using rule 108 (func_extra -> empty .)
    WHILE           reduce using rule 108 (func_extra -> empty .)
    RETURN          reduce using rule 108 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 108 (func_extra -> empty .) ]


state 344

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 88 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 345

    (94) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 94 (for_l_2 -> estatuto for_l_2 .)


state 346

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 347


state 347

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (99) for_point_4 -> . empty
    (156) empty -> .

    ID              reduce using rule 156 (empty -> .)
    READ            reduce using rule 156 (empty -> .)
    WRITE           reduce using rule 156 (empty -> .)
    IF              reduce using rule 156 (empty -> .)
    FOR             reduce using rule 156 (empty -> .)
    WHILE           reduce using rule 156 (empty -> .)
    RETURN          reduce using rule 156 (empty -> .)
    R_C_BRACKET     reduce using rule 156 (empty -> .)

    for_point_4                    shift and go to state 348
    empty                          shift and go to state 349

state 348

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 349

    (99) for_point_4 -> empty .

    ID              reduce using rule 99 (for_point_4 -> empty .)
    READ            reduce using rule 99 (for_point_4 -> empty .)
    WRITE           reduce using rule 99 (for_point_4 -> empty .)
    IF              reduce using rule 99 (for_point_4 -> empty .)
    FOR             reduce using rule 99 (for_point_4 -> empty .)
    WHILE           reduce using rule 99 (for_point_4 -> empty .)
    RETURN          reduce using rule 99 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 99 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for READ in state 68 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for READ in state 78 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 78 resolved as shift
WARNING: shift/reduce conflict for IF in state 78 resolved as shift
WARNING: shift/reduce conflict for FOR in state 78 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 78 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for READ in state 104 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 104 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 276 resolved as shift
WARNING: shift/reduce conflict for READ in state 276 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 276 resolved as shift
WARNING: shift/reduce conflict for IF in state 276 resolved as shift
WARNING: shift/reduce conflict for FOR in state 276 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 276 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 276 resolved as shift
WARNING: shift/reduce conflict for ID in state 296 resolved as shift
WARNING: shift/reduce conflict for READ in state 296 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 296 resolved as shift
WARNING: shift/reduce conflict for IF in state 296 resolved as shift
WARNING: shift/reduce conflict for FOR in state 296 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 296 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 296 resolved as shift
WARNING: shift/reduce conflict for ID in state 299 resolved as shift
WARNING: shift/reduce conflict for READ in state 299 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 299 resolved as shift
WARNING: shift/reduce conflict for IF in state 299 resolved as shift
WARNING: shift/reduce conflict for FOR in state 299 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 299 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 299 resolved as shift
WARNING: shift/reduce conflict for ID in state 305 resolved as shift
WARNING: shift/reduce conflict for READ in state 305 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 305 resolved as shift
WARNING: shift/reduce conflict for IF in state 305 resolved as shift
WARNING: shift/reduce conflict for FOR in state 305 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 305 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 305 resolved as shift
WARNING: shift/reduce conflict for ID in state 309 resolved as shift
WARNING: shift/reduce conflict for READ in state 309 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 309 resolved as shift
WARNING: shift/reduce conflict for IF in state 309 resolved as shift
WARNING: shift/reduce conflict for FOR in state 309 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 309 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 309 resolved as shift
WARNING: shift/reduce conflict for ID in state 315 resolved as shift
WARNING: shift/reduce conflict for READ in state 315 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 315 resolved as shift
WARNING: shift/reduce conflict for IF in state 315 resolved as shift
WARNING: shift/reduce conflict for FOR in state 315 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 315 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 315 resolved as shift
WARNING: shift/reduce conflict for ID in state 334 resolved as shift
WARNING: shift/reduce conflict for READ in state 334 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 334 resolved as shift
WARNING: shift/reduce conflict for IF in state 334 resolved as shift
WARNING: shift/reduce conflict for FOR in state 334 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 334 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 334 resolved as shift
WARNING: shift/reduce conflict for ID in state 335 resolved as shift
WARNING: shift/reduce conflict for READ in state 335 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 335 resolved as shift
WARNING: shift/reduce conflict for IF in state 335 resolved as shift
WARNING: shift/reduce conflict for FOR in state 335 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 335 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 335 resolved as shift
WARNING: shift/reduce conflict for ID in state 338 resolved as shift
WARNING: shift/reduce conflict for READ in state 338 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 338 resolved as shift
WARNING: shift/reduce conflict for IF in state 338 resolved as shift
WARNING: shift/reduce conflict for FOR in state 338 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 338 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 338 resolved as shift
WARNING: shift/reduce conflict for ID in state 339 resolved as shift
WARNING: shift/reduce conflict for READ in state 339 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 339 resolved as shift
WARNING: shift/reduce conflict for IF in state 339 resolved as shift
WARNING: shift/reduce conflict for FOR in state 339 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 339 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 339 resolved as shift
WARNING: shift/reduce conflict for ID in state 341 resolved as shift
WARNING: shift/reduce conflict for READ in state 341 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 341 resolved as shift
WARNING: shift/reduce conflict for IF in state 341 resolved as shift
WARNING: shift/reduce conflict for FOR in state 341 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 341 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 341 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 48
WARNING: reduce/reduce conflict in state 106 resolved using rule (body_3 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 106
WARNING: reduce/reduce conflict in state 307 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 307
WARNING: reduce/reduce conflict in state 317 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 317
WARNING: reduce/reduce conflict in state 343 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 343
WARNING: Rule (vars_6 -> empty) is never reduced
