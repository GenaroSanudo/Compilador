Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3 count_global_vars
Rule 4     modules_point -> empty
Rule 5     count_global_vars -> empty
Rule 6     modules_2 -> vars
Rule 7     modules_2 -> empty
Rule 8     modules_3 -> function
Rule 9     modules_3 -> empty
Rule 10    main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
Rule 11    main_point -> empty
Rule 12    main_final -> empty
Rule 13    body -> body_2 func_agrega_v estatuto body_3
Rule 14    body_2 -> vars
Rule 15    body_2 -> empty
Rule 16    body_3 -> estatuto body_3
Rule 17    body_3 -> empty
Rule 18    tipo_simple -> INT
Rule 19    tipo_simple -> FLOAT
Rule 20    tipo_simple -> CHAR
Rule 21    tipo_comp -> DATAFRAME
Rule 22    vars -> VAR vars_2 SEMICOLON vars_8
Rule 23    vars_2 -> tipo_comp vars_3
Rule 24    vars_2 -> tipo_simple vars_4
Rule 25    vars_3 -> ID vars_5
Rule 26    vars_4 -> vars_3
Rule 27    vars_4 -> ID vars_6
Rule 28    vars_5 -> COMMA vars_3
Rule 29    vars_5 -> empty
Rule 30    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 31    vars_6 -> empty
Rule 32    punto_id_especial -> empty
Rule 33    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 34    vars_7 -> var_array
Rule 35    var_array -> empty
Rule 36    var_mat -> empty
Rule 37    vars_8 -> vars
Rule 38    vars_8 -> empty
Rule 39    param -> tipo_simple ID punto_param param_2
Rule 40    param -> empty
Rule 41    param_2 -> COMMA param
Rule 42    param_2 -> empty
Rule 43    punto_param -> empty
Rule 44    punto_param_2 -> empty
Rule 45    variable -> ID variable_2 variable_point
Rule 46    variable_point -> empty
Rule 47    variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
Rule 48    variable_2 -> empty
Rule 49    variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor
Rule 50    variable_3 -> empty
Rule 51    estatuto -> asigna
Rule 52    estatuto -> llamada
Rule 53    estatuto -> llamada_void
Rule 54    estatuto -> read
Rule 55    estatuto -> write
Rule 56    estatuto -> if_1
Rule 57    estatuto -> for_l
Rule 58    estatuto -> while_l
Rule 59    estatuto -> return
Rule 60    estatuto -> func_extra
Rule 61    estatuto -> funciones_especiales
Rule 62    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 63    asigna_point -> empty
Rule 64    llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
Rule 65    llamada_2 -> exp verify_parameter
Rule 66    llamada_2 -> empty
Rule 67    llamada_3 -> COMMA exp verify_parameter llamada_3
Rule 68    llamada_3 -> empty
Rule 69    llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
Rule 70    llamada_void_2 -> exp verify_parameter
Rule 71    llamada_void_2 -> empty
Rule 72    llamada_void_3 -> COMMA exp verify_parameter llamada_void_3
Rule 73    llamada_void_3 -> empty
Rule 74    not_void -> empty
Rule 75    verify_func -> empty
Rule 76    verify_parameter -> empty
Rule 77    gosub -> empty
Rule 78    add_temp -> empty
Rule 79    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 80    read_point -> empty
Rule 81    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 82    write_2 -> exp write_point
Rule 83    write_2 -> CTE_S add_constant_s write_point
Rule 84    write_3 -> COMMA write_2 write_3
Rule 85    write_3 -> empty
Rule 86    write_point -> empty
Rule 87    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 88    if_2 -> estatuto if_2
Rule 89    if_2 -> empty
Rule 90    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 91    if_3 -> empty
Rule 92    if_point -> empty
Rule 93    if_point_2 -> empty
Rule 94    if_point_3 -> empty
Rule 95    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 96    for_l_2 -> estatuto for_l_2
Rule 97    for_l_2 -> empty
Rule 98    for_point_1 -> empty
Rule 99    for_point_2 -> empty
Rule 100   for_point_3 -> empty
Rule 101   for_point_4 -> empty
Rule 102   while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 103   while_l_2 -> estatuto while_l_2
Rule 104   while_l_2 -> empty
Rule 105   while_point -> empty
Rule 106   while_point_2 -> empty
Rule 107   while_point_3 -> empty
Rule 108   return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON
Rule 109   check_valid_func -> empty
Rule 110   func_extra -> empty
Rule 111   exp -> t_exp add_operator_4 exp_2
Rule 112   exp_2 -> OR add_operator exp
Rule 113   exp_2 -> empty
Rule 114   t_exp -> g_exp add_operator_4 t_exp_2
Rule 115   t_exp_2 -> AND add_operator t_exp
Rule 116   t_exp_2 -> empty
Rule 117   g_exp -> m_exp g_exp_2 add_operator_3
Rule 118   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 119   g_exp_2 -> LESS add_operator m_exp
Rule 120   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 121   g_exp_2 -> GREATER add_operator m_exp
Rule 122   g_exp_2 -> COMPARE add_operator m_exp
Rule 123   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 124   g_exp_2 -> empty
Rule 125   m_exp -> t add_operator_2 m_exp_2
Rule 126   m_exp_2 -> PLUS add_operator m_exp
Rule 127   m_exp_2 -> MINUS add_operator m_exp
Rule 128   m_exp_2 -> empty
Rule 129   t -> f add_operator_1 t_2
Rule 130   t_2 -> TIMES add_operator t
Rule 131   t_2 -> DIVIDE add_operator t
Rule 132   t_2 -> empty
Rule 133   f -> LPAR add_floor exp RPAR remove_floor
Rule 134   f -> variable
Rule 135   f -> llamada
Rule 136   f -> f_2
Rule 137   f_2 -> CTE_I add_constant_i
Rule 138   f_2 -> CTE_F add_constant_f
Rule 139   add_floor -> empty
Rule 140   remove_floor -> empty
Rule 141   add_operator -> empty
Rule 142   add_operator_1 -> empty
Rule 143   add_operator_2 -> empty
Rule 144   add_operator_3 -> empty
Rule 145   add_operator_4 -> empty
Rule 146   add_constant_i -> empty
Rule 147   add_constant_s -> empty
Rule 148   add_constant_f -> empty
Rule 149   function -> FUNC function_2 SEMICOLON function_4
Rule 150   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 151   function_3 -> tipo_simple
Rule 152   function_3 -> VOID
Rule 153   function_4 -> function
Rule 154   function_4 -> empty
Rule 155   function_punto1 -> empty
Rule 156   func_agrega_v -> empty
Rule 157   final_func_point -> empty
Rule 158   funciones_especiales -> read_csv
Rule 159   funciones_especiales -> mean_func
Rule 160   funciones_especiales -> mode_func
Rule 161   funciones_especiales -> median_func
Rule 162   funciones_especiales -> linear_reg_func
Rule 163   funciones_especiales -> box_plt
Rule 164   funciones_especiales -> histogram_plt
Rule 165   check_df -> empty
Rule 166   read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
Rule 167   add_quad_readCSV -> empty
Rule 168   mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
Rule 169   add_quad_mean -> empty
Rule 170   mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
Rule 171   add_quad_mode -> empty
Rule 172   median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
Rule 173   add_quad_median -> empty
Rule 174   linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
Rule 175   add_quad_linearR -> empty
Rule 176   box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
Rule 177   add_quad_box -> empty
Rule 178   histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON
Rule 179   add_quad_hist -> empty
Rule 180   check_name -> empty
Rule 181   empty -> <empty>

Terminals, with rules where they appear

AND                  : 115
BOX_PLOT             : 176
CHAR                 : 20
COLON                : 1
COMMA                : 28 41 67 72 84
COMMENT              : 
COMPARE              : 122
CSV_READ             : 166
CTE_F                : 138
CTE_I                : 30 33 137
CTE_S                : 83 166
DATAFRAME            : 21
DIVIDE               : 131
ELSE                 : 90
EQUAL                : 62 95 166 168 170 172
FLOAT                : 19
FOR                  : 95
FUNC                 : 149
GREATER              : 121
GREATER_EQUAL        : 120
HISTOGRAM            : 178
ID                   : 1 25 27 39 45 64 69 95 150
IF                   : 87
INT                  : 18
LESS                 : 119
LESS_EQUAL           : 118
LINEAR_REG           : 174
LPAR                 : 10 64 69 79 81 87 95 102 108 133 150 166 168 170 172 174 176 178
L_C_BRACKET          : 10 87 90 95 102 150
L_S_BRACKET          : 30 33 47 49
MAIN                 : 10
MEAN                 : 168
MEDIAN               : 172
MINUS                : 127
MODE                 : 170
NOT_EQUAL            : 123
OR                   : 112
PLUS                 : 126
PROGRAM              : 1
READ                 : 79
RETURN               : 108
RPAR                 : 10 64 69 79 81 87 95 102 108 133 150 166 168 170 172 174 176 178
R_C_BRACKET          : 10 87 90 95 102 150
R_S_BRACKET          : 30 33 47 49
SEMICOLON            : 10 22 62 64 69 79 81 87 95 102 108 149 166 168 170 172 174 176 178
STRING               : 
TIMES                : 130
TO                   : 95
VAR                  : 22
VOID                 : 152
WHILE                : 102
WRITE                : 81
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 138
add_constant_i       : 137
add_constant_s       : 83 166
add_floor            : 47 49 64 69 133
add_operator         : 62 112 115 118 119 120 121 122 123 126 127 130 131
add_operator_1       : 129
add_operator_2       : 125
add_operator_3       : 117
add_operator_4       : 111 114
add_quad_box         : 176
add_quad_hist        : 178
add_quad_linearR     : 174
add_quad_mean        : 168
add_quad_median      : 172
add_quad_mode        : 170
add_quad_readCSV     : 166
add_temp             : 64
asigna               : 51
asigna_point         : 62
body                 : 10 150
body_2               : 13
body_3               : 13 16
box_plt              : 163
check_df             : 166 168 168 170 170 172 172 174 176 178
check_name           : 166
check_valid_func     : 108
count_global_vars    : 3
empty                : 2 4 5 7 9 11 12 15 17 29 31 32 35 36 38 40 42 43 44 46 48 50 63 66 68 71 73 74 75 76 77 78 80 85 86 89 91 92 93 94 97 98 99 100 101 104 105 106 107 109 110 113 116 124 128 132 139 140 141 142 143 144 145 146 147 148 154 155 156 157 165 167 169 171 173 175 177 179 180
estatuto             : 13 16 87 88 90 95 96 102 103
exp                  : 47 49 62 65 67 70 72 82 87 95 95 102 108 112 133
exp_2                : 111
f                    : 129
f_2                  : 136
final_func_point     : 150
for_l                : 57
for_l_2              : 95 96
for_point_1          : 95
for_point_2          : 95
for_point_3          : 95
for_point_4          : 95
func_agrega_v        : 13
func_extra           : 60
funciones_especiales : 61
function             : 8 153
function_2           : 149
function_3           : 150
function_4           : 149
function_punto1      : 150
g_exp                : 114
g_exp_2              : 117
gosub                : 64 69
histogram_plt        : 164
if_1                 : 56
if_2                 : 87 88 90
if_3                 : 87
if_point             : 87
if_point_2           : 87
if_point_3           : 90
linear_reg_func      : 162
llamada              : 52 135
llamada_2            : 64
llamada_3            : 64 67
llamada_void         : 53
llamada_void_2       : 69
llamada_void_3       : 69 72
m_exp                : 117 118 119 120 121 122 123 126 127
m_exp_2              : 125
main                 : 1
main_final           : 10
main_point           : 10
mean_func            : 159
median_func          : 161
mode_func            : 160
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
not_void             : 64
param                : 41 150
param_2              : 39
program              : 0
program_point        : 1
punto_id_especial    : 30
punto_param          : 39
punto_param_2        : 150
read                 : 54
read_csv             : 158
read_point           : 79
remove_floor         : 47 49 64 69 133
return               : 59
t                    : 125 130 131
t_2                  : 129
t_exp                : 111 115
t_exp_2              : 114
tipo_comp            : 23
tipo_simple          : 24 39 151
var_array            : 34
var_mat              : 33
variable             : 62 79 134 166 168 168 170 170 172 172 174 176 178
variable_2           : 45
variable_3           : 47
variable_point       : 45
vars                 : 6 14 37
vars_2               : 22
vars_3               : 23 26 28
vars_4               : 24
vars_5               : 25
vars_6               : 27
vars_7               : 30
vars_8               : 22
verify_func          : 64 69
verify_parameter     : 65 67 70 72
while_l              : 58
while_l_2            : 102 103
while_point          : 102
while_point_2        : 102
while_point_3        : 102
write                : 55
write_2              : 81 84
write_3              : 81 84
write_point          : 82 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3 count_global_vars
    (6) modules_2 -> . vars
    (7) modules_2 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (181) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 181 (empty -> .)
    MAIN            reduce using rule 181 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (10) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3 count_global_vars
    (4) modules_point -> . empty
    (181) empty -> .

    FUNC            reduce using rule 181 (empty -> .)
    MAIN            reduce using rule 181 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (6) modules_2 -> vars .

    FUNC            reduce using rule 6 (modules_2 -> vars .)
    MAIN            reduce using rule 6 (modules_2 -> vars .)


state 10

    (7) modules_2 -> empty .

    FUNC            reduce using rule 7 (modules_2 -> empty .)
    MAIN            reduce using rule 7 (modules_2 -> empty .)


state 11

    (22) vars -> VAR . vars_2 SEMICOLON vars_8
    (23) vars_2 -> . tipo_comp vars_3
    (24) vars_2 -> . tipo_simple vars_4
    (21) tipo_comp -> . DATAFRAME
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (10) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
    (11) main_point -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3 count_global_vars
    (8) modules_3 -> . function
    (9) modules_3 -> . empty
    (149) function -> . FUNC function_2 SEMICOLON function_4
    (181) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 181 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (22) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (23) vars_2 -> tipo_comp . vars_3
    (25) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (24) vars_2 -> tipo_simple . vars_4
    (26) vars_4 -> . vars_3
    (27) vars_4 -> . ID vars_6
    (25) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (21) tipo_comp -> DATAFRAME .

    ID              reduce using rule 21 (tipo_comp -> DATAFRAME .)


state 20

    (18) tipo_simple -> INT .

    ID              reduce using rule 18 (tipo_simple -> INT .)


state 21

    (19) tipo_simple -> FLOAT .

    ID              reduce using rule 19 (tipo_simple -> FLOAT .)


state 22

    (20) tipo_simple -> CHAR .

    ID              reduce using rule 20 (tipo_simple -> CHAR .)


state 23

    (10) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    LPAR            shift and go to state 35


state 24

    (11) main_point -> empty .

    LPAR            reduce using rule 11 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 . count_global_vars
    (5) count_global_vars -> . empty
    (181) empty -> .

    MAIN            reduce using rule 181 (empty -> .)

    count_global_vars              shift and go to state 36
    empty                          shift and go to state 37

state 26

    (8) modules_3 -> function .

    MAIN            reduce using rule 8 (modules_3 -> function .)


state 27

    (9) modules_3 -> empty .

    MAIN            reduce using rule 9 (modules_3 -> empty .)


state 28

    (149) function -> FUNC . function_2 SEMICOLON function_4
    (150) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (151) function_3 -> . tipo_simple
    (152) function_3 -> . VOID
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR

    VOID            shift and go to state 41
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 38
    function_3                     shift and go to state 39
    tipo_simple                    shift and go to state 40

state 29

    (22) vars -> VAR vars_2 SEMICOLON . vars_8
    (37) vars_8 -> . vars
    (38) vars_8 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (181) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 181 (empty -> .)
    MAIN            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    vars_8                         shift and go to state 42
    vars                           shift and go to state 43
    empty                          shift and go to state 44

state 30

    (23) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 23 (vars_2 -> tipo_comp vars_3 .)


state 31

    (25) vars_3 -> ID . vars_5
    (28) vars_5 -> . COMMA vars_3
    (29) vars_5 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 181 (empty -> .)

    vars_5                         shift and go to state 45
    empty                          shift and go to state 47

state 32

    (24) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 24 (vars_2 -> tipo_simple vars_4 .)


state 33

    (26) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 26 (vars_4 -> vars_3 .)


state 34

    (27) vars_4 -> ID . vars_6
    (25) vars_3 -> ID . vars_5
    (30) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (31) vars_6 -> . empty
    (28) vars_5 -> . COMMA vars_3
    (29) vars_5 -> . empty
    (32) punto_id_especial -> . empty
    (181) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 181 (empty -> .)
    L_S_BRACKET     reduce using rule 181 (empty -> .)

    vars_6                         shift and go to state 48
    vars_5                         shift and go to state 45
    punto_id_especial              shift and go to state 49
    empty                          shift and go to state 50

state 35

    (10) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    RPAR            shift and go to state 51


state 36

    (3) modules -> modules_2 modules_point modules_3 count_global_vars .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 count_global_vars .)


state 37

    (5) count_global_vars -> empty .

    MAIN            reduce using rule 5 (count_global_vars -> empty .)


state 38

    (149) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 52


state 39

    (150) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 53


state 40

    (151) function_3 -> tipo_simple .

    ID              reduce using rule 151 (function_3 -> tipo_simple .)


state 41

    (152) function_3 -> VOID .

    ID              reduce using rule 152 (function_3 -> VOID .)


state 42

    (22) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    LINEAR_REG      reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    BOX_PLOT        reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    HISTOGRAM       reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 43

    (37) vars_8 -> vars .

    FUNC            reduce using rule 37 (vars_8 -> vars .)
    MAIN            reduce using rule 37 (vars_8 -> vars .)
    ID              reduce using rule 37 (vars_8 -> vars .)
    READ            reduce using rule 37 (vars_8 -> vars .)
    WRITE           reduce using rule 37 (vars_8 -> vars .)
    IF              reduce using rule 37 (vars_8 -> vars .)
    FOR             reduce using rule 37 (vars_8 -> vars .)
    WHILE           reduce using rule 37 (vars_8 -> vars .)
    RETURN          reduce using rule 37 (vars_8 -> vars .)
    LINEAR_REG      reduce using rule 37 (vars_8 -> vars .)
    BOX_PLOT        reduce using rule 37 (vars_8 -> vars .)
    HISTOGRAM       reduce using rule 37 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 37 (vars_8 -> vars .)


state 44

    (38) vars_8 -> empty .

    FUNC            reduce using rule 38 (vars_8 -> empty .)
    MAIN            reduce using rule 38 (vars_8 -> empty .)
    ID              reduce using rule 38 (vars_8 -> empty .)
    READ            reduce using rule 38 (vars_8 -> empty .)
    WRITE           reduce using rule 38 (vars_8 -> empty .)
    IF              reduce using rule 38 (vars_8 -> empty .)
    FOR             reduce using rule 38 (vars_8 -> empty .)
    WHILE           reduce using rule 38 (vars_8 -> empty .)
    RETURN          reduce using rule 38 (vars_8 -> empty .)
    LINEAR_REG      reduce using rule 38 (vars_8 -> empty .)
    BOX_PLOT        reduce using rule 38 (vars_8 -> empty .)
    HISTOGRAM       reduce using rule 38 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 38 (vars_8 -> empty .)


state 45

    (25) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 25 (vars_3 -> ID vars_5 .)


state 46

    (28) vars_5 -> COMMA . vars_3
    (25) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 54

state 47

    (29) vars_5 -> empty .

    SEMICOLON       reduce using rule 29 (vars_5 -> empty .)


state 48

    (27) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 27 (vars_4 -> ID vars_6 .)


state 49

    (30) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 55


state 50

    (31) vars_6 -> empty .
    (29) vars_5 -> empty .
    (32) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 29 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 32 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 31 (vars_6 -> empty .) ]


state 51

    (10) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    L_C_BRACKET     shift and go to state 56


state 52

    (149) function -> FUNC function_2 SEMICOLON . function_4
    (153) function_4 -> . function
    (154) function_4 -> . empty
    (149) function -> . FUNC function_2 SEMICOLON function_4
    (181) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 181 (empty -> .)

    function_4                     shift and go to state 57
    function                       shift and go to state 58
    empty                          shift and go to state 59

state 53

    (150) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (155) function_punto1 -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)

    function_punto1                shift and go to state 60
    empty                          shift and go to state 61

state 54

    (28) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 28 (vars_5 -> COMMA vars_3 .)


state 55

    (30) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 62


state 56

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON main_final
    (13) body -> . body_2 func_agrega_v estatuto body_3
    (14) body_2 -> . vars
    (15) body_2 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (181) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    body                           shift and go to state 63
    body_2                         shift and go to state 64
    vars                           shift and go to state 65
    empty                          shift and go to state 66

state 57

    (149) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 149 (function -> FUNC function_2 SEMICOLON function_4 .)


state 58

    (153) function_4 -> function .

    MAIN            reduce using rule 153 (function_4 -> function .)


state 59

    (154) function_4 -> empty .

    MAIN            reduce using rule 154 (function_4 -> empty .)


state 60

    (150) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 67


state 61

    (155) function_punto1 -> empty .

    LPAR            reduce using rule 155 (function_punto1 -> empty .)


state 62

    (30) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 68


state 63

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON main_final

    R_C_BRACKET     shift and go to state 69


state 64

    (13) body -> body_2 . func_agrega_v estatuto body_3
    (156) func_agrega_v -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    func_agrega_v                  shift and go to state 70
    empty                          shift and go to state 71

state 65

    (14) body_2 -> vars .

    ID              reduce using rule 14 (body_2 -> vars .)
    READ            reduce using rule 14 (body_2 -> vars .)
    WRITE           reduce using rule 14 (body_2 -> vars .)
    IF              reduce using rule 14 (body_2 -> vars .)
    FOR             reduce using rule 14 (body_2 -> vars .)
    WHILE           reduce using rule 14 (body_2 -> vars .)
    RETURN          reduce using rule 14 (body_2 -> vars .)
    LINEAR_REG      reduce using rule 14 (body_2 -> vars .)
    BOX_PLOT        reduce using rule 14 (body_2 -> vars .)
    HISTOGRAM       reduce using rule 14 (body_2 -> vars .)
    R_C_BRACKET     reduce using rule 14 (body_2 -> vars .)


state 66

    (15) body_2 -> empty .

    ID              reduce using rule 15 (body_2 -> empty .)
    READ            reduce using rule 15 (body_2 -> empty .)
    WRITE           reduce using rule 15 (body_2 -> empty .)
    IF              reduce using rule 15 (body_2 -> empty .)
    FOR             reduce using rule 15 (body_2 -> empty .)
    WHILE           reduce using rule 15 (body_2 -> empty .)
    RETURN          reduce using rule 15 (body_2 -> empty .)
    LINEAR_REG      reduce using rule 15 (body_2 -> empty .)
    BOX_PLOT        reduce using rule 15 (body_2 -> empty .)
    HISTOGRAM       reduce using rule 15 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 15 (body_2 -> empty .)


state 67

    (150) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (39) param -> . tipo_simple ID punto_param param_2
    (40) param -> . empty
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR
    (181) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 181 (empty -> .)

    param                          shift and go to state 72
    tipo_simple                    shift and go to state 73
    empty                          shift and go to state 74

state 68

    (30) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (33) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (34) vars_7 -> . var_array
    (35) var_array -> . empty
    (181) empty -> .

    L_S_BRACKET     shift and go to state 75
    SEMICOLON       reduce using rule 181 (empty -> .)

    vars_7                         shift and go to state 76
    var_array                      shift and go to state 77
    empty                          shift and go to state 78

state 69

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON main_final

    SEMICOLON       shift and go to state 79


state 70

    (13) body -> body_2 func_agrega_v . estatuto body_3
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (181) empty -> .
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 80
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    empty                          shift and go to state 100
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 71

    (156) func_agrega_v -> empty .

    ID              reduce using rule 156 (func_agrega_v -> empty .)
    READ            reduce using rule 156 (func_agrega_v -> empty .)
    WRITE           reduce using rule 156 (func_agrega_v -> empty .)
    IF              reduce using rule 156 (func_agrega_v -> empty .)
    FOR             reduce using rule 156 (func_agrega_v -> empty .)
    WHILE           reduce using rule 156 (func_agrega_v -> empty .)
    RETURN          reduce using rule 156 (func_agrega_v -> empty .)
    LINEAR_REG      reduce using rule 156 (func_agrega_v -> empty .)
    BOX_PLOT        reduce using rule 156 (func_agrega_v -> empty .)
    HISTOGRAM       reduce using rule 156 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 156 (func_agrega_v -> empty .)


state 72

    (150) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (44) punto_param_2 -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    punto_param_2                  shift and go to state 111
    empty                          shift and go to state 112

state 73

    (39) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 113


state 74

    (40) param -> empty .

    RPAR            reduce using rule 40 (param -> empty .)


state 75

    (33) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 114


state 76

    (30) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 30 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 77

    (34) vars_7 -> var_array .

    SEMICOLON       reduce using rule 34 (vars_7 -> var_array .)


state 78

    (35) var_array -> empty .

    SEMICOLON       reduce using rule 35 (var_array -> empty .)


state 79

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON . main_final
    (12) main_final -> . empty
    (181) empty -> .

    $end            reduce using rule 181 (empty -> .)

    main_final                     shift and go to state 115
    empty                          shift and go to state 116

state 80

    (13) body -> body_2 func_agrega_v estatuto . body_3
    (16) body_3 -> . estatuto body_3
    (17) body_3 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 117
    body_3                         shift and go to state 118
    empty                          shift and go to state 119
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 81

    (51) estatuto -> asigna .

    ID              reduce using rule 51 (estatuto -> asigna .)
    READ            reduce using rule 51 (estatuto -> asigna .)
    WRITE           reduce using rule 51 (estatuto -> asigna .)
    IF              reduce using rule 51 (estatuto -> asigna .)
    FOR             reduce using rule 51 (estatuto -> asigna .)
    WHILE           reduce using rule 51 (estatuto -> asigna .)
    RETURN          reduce using rule 51 (estatuto -> asigna .)
    LINEAR_REG      reduce using rule 51 (estatuto -> asigna .)
    BOX_PLOT        reduce using rule 51 (estatuto -> asigna .)
    HISTOGRAM       reduce using rule 51 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> asigna .)


state 82

    (52) estatuto -> llamada .

    ID              reduce using rule 52 (estatuto -> llamada .)
    READ            reduce using rule 52 (estatuto -> llamada .)
    WRITE           reduce using rule 52 (estatuto -> llamada .)
    IF              reduce using rule 52 (estatuto -> llamada .)
    FOR             reduce using rule 52 (estatuto -> llamada .)
    WHILE           reduce using rule 52 (estatuto -> llamada .)
    RETURN          reduce using rule 52 (estatuto -> llamada .)
    LINEAR_REG      reduce using rule 52 (estatuto -> llamada .)
    BOX_PLOT        reduce using rule 52 (estatuto -> llamada .)
    HISTOGRAM       reduce using rule 52 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> llamada .)


state 83

    (53) estatuto -> llamada_void .

    ID              reduce using rule 53 (estatuto -> llamada_void .)
    READ            reduce using rule 53 (estatuto -> llamada_void .)
    WRITE           reduce using rule 53 (estatuto -> llamada_void .)
    IF              reduce using rule 53 (estatuto -> llamada_void .)
    FOR             reduce using rule 53 (estatuto -> llamada_void .)
    WHILE           reduce using rule 53 (estatuto -> llamada_void .)
    RETURN          reduce using rule 53 (estatuto -> llamada_void .)
    LINEAR_REG      reduce using rule 53 (estatuto -> llamada_void .)
    BOX_PLOT        reduce using rule 53 (estatuto -> llamada_void .)
    HISTOGRAM       reduce using rule 53 (estatuto -> llamada_void .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> llamada_void .)


state 84

    (54) estatuto -> read .

    ID              reduce using rule 54 (estatuto -> read .)
    READ            reduce using rule 54 (estatuto -> read .)
    WRITE           reduce using rule 54 (estatuto -> read .)
    IF              reduce using rule 54 (estatuto -> read .)
    FOR             reduce using rule 54 (estatuto -> read .)
    WHILE           reduce using rule 54 (estatuto -> read .)
    RETURN          reduce using rule 54 (estatuto -> read .)
    LINEAR_REG      reduce using rule 54 (estatuto -> read .)
    BOX_PLOT        reduce using rule 54 (estatuto -> read .)
    HISTOGRAM       reduce using rule 54 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> read .)


state 85

    (55) estatuto -> write .

    ID              reduce using rule 55 (estatuto -> write .)
    READ            reduce using rule 55 (estatuto -> write .)
    WRITE           reduce using rule 55 (estatuto -> write .)
    IF              reduce using rule 55 (estatuto -> write .)
    FOR             reduce using rule 55 (estatuto -> write .)
    WHILE           reduce using rule 55 (estatuto -> write .)
    RETURN          reduce using rule 55 (estatuto -> write .)
    LINEAR_REG      reduce using rule 55 (estatuto -> write .)
    BOX_PLOT        reduce using rule 55 (estatuto -> write .)
    HISTOGRAM       reduce using rule 55 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> write .)


state 86

    (56) estatuto -> if_1 .

    ID              reduce using rule 56 (estatuto -> if_1 .)
    READ            reduce using rule 56 (estatuto -> if_1 .)
    WRITE           reduce using rule 56 (estatuto -> if_1 .)
    IF              reduce using rule 56 (estatuto -> if_1 .)
    FOR             reduce using rule 56 (estatuto -> if_1 .)
    WHILE           reduce using rule 56 (estatuto -> if_1 .)
    RETURN          reduce using rule 56 (estatuto -> if_1 .)
    LINEAR_REG      reduce using rule 56 (estatuto -> if_1 .)
    BOX_PLOT        reduce using rule 56 (estatuto -> if_1 .)
    HISTOGRAM       reduce using rule 56 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 56 (estatuto -> if_1 .)


state 87

    (57) estatuto -> for_l .

    ID              reduce using rule 57 (estatuto -> for_l .)
    READ            reduce using rule 57 (estatuto -> for_l .)
    WRITE           reduce using rule 57 (estatuto -> for_l .)
    IF              reduce using rule 57 (estatuto -> for_l .)
    FOR             reduce using rule 57 (estatuto -> for_l .)
    WHILE           reduce using rule 57 (estatuto -> for_l .)
    RETURN          reduce using rule 57 (estatuto -> for_l .)
    LINEAR_REG      reduce using rule 57 (estatuto -> for_l .)
    BOX_PLOT        reduce using rule 57 (estatuto -> for_l .)
    HISTOGRAM       reduce using rule 57 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 57 (estatuto -> for_l .)


state 88

    (58) estatuto -> while_l .

    ID              reduce using rule 58 (estatuto -> while_l .)
    READ            reduce using rule 58 (estatuto -> while_l .)
    WRITE           reduce using rule 58 (estatuto -> while_l .)
    IF              reduce using rule 58 (estatuto -> while_l .)
    FOR             reduce using rule 58 (estatuto -> while_l .)
    WHILE           reduce using rule 58 (estatuto -> while_l .)
    RETURN          reduce using rule 58 (estatuto -> while_l .)
    LINEAR_REG      reduce using rule 58 (estatuto -> while_l .)
    BOX_PLOT        reduce using rule 58 (estatuto -> while_l .)
    HISTOGRAM       reduce using rule 58 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 58 (estatuto -> while_l .)


state 89

    (59) estatuto -> return .

    ID              reduce using rule 59 (estatuto -> return .)
    READ            reduce using rule 59 (estatuto -> return .)
    WRITE           reduce using rule 59 (estatuto -> return .)
    IF              reduce using rule 59 (estatuto -> return .)
    FOR             reduce using rule 59 (estatuto -> return .)
    WHILE           reduce using rule 59 (estatuto -> return .)
    RETURN          reduce using rule 59 (estatuto -> return .)
    LINEAR_REG      reduce using rule 59 (estatuto -> return .)
    BOX_PLOT        reduce using rule 59 (estatuto -> return .)
    HISTOGRAM       reduce using rule 59 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 59 (estatuto -> return .)


state 90

    (60) estatuto -> func_extra .

    ID              reduce using rule 60 (estatuto -> func_extra .)
    READ            reduce using rule 60 (estatuto -> func_extra .)
    WRITE           reduce using rule 60 (estatuto -> func_extra .)
    IF              reduce using rule 60 (estatuto -> func_extra .)
    FOR             reduce using rule 60 (estatuto -> func_extra .)
    WHILE           reduce using rule 60 (estatuto -> func_extra .)
    RETURN          reduce using rule 60 (estatuto -> func_extra .)
    LINEAR_REG      reduce using rule 60 (estatuto -> func_extra .)
    BOX_PLOT        reduce using rule 60 (estatuto -> func_extra .)
    HISTOGRAM       reduce using rule 60 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 60 (estatuto -> func_extra .)


state 91

    (61) estatuto -> funciones_especiales .

    ID              reduce using rule 61 (estatuto -> funciones_especiales .)
    READ            reduce using rule 61 (estatuto -> funciones_especiales .)
    WRITE           reduce using rule 61 (estatuto -> funciones_especiales .)
    IF              reduce using rule 61 (estatuto -> funciones_especiales .)
    FOR             reduce using rule 61 (estatuto -> funciones_especiales .)
    WHILE           reduce using rule 61 (estatuto -> funciones_especiales .)
    RETURN          reduce using rule 61 (estatuto -> funciones_especiales .)
    LINEAR_REG      reduce using rule 61 (estatuto -> funciones_especiales .)
    BOX_PLOT        reduce using rule 61 (estatuto -> funciones_especiales .)
    HISTOGRAM       reduce using rule 61 (estatuto -> funciones_especiales .)
    R_C_BRACKET     reduce using rule 61 (estatuto -> funciones_especiales .)


state 92

    (62) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON
    (166) read_csv -> variable . EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> variable . EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> variable . EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> variable . EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON

    EQUAL           shift and go to state 120


state 93

    (64) llamada -> ID . verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> ID . verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (45) variable -> ID . variable_2 variable_point
    (75) verify_func -> . empty
    (47) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (48) variable_2 -> . empty
    (181) empty -> .

    L_S_BRACKET     shift and go to state 124
    LPAR            reduce using rule 181 (empty -> .)
    EQUAL           reduce using rule 181 (empty -> .)

    verify_func                    shift and go to state 121
    variable_2                     shift and go to state 122
    empty                          shift and go to state 123

state 94

    (79) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 125


state 95

    (81) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 126


state 96

    (87) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 127


state 97

    (95) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 128


state 98

    (102) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (105) while_point -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)

    while_point                    shift and go to state 129
    empty                          shift and go to state 130

state 99

    (108) return -> RETURN . LPAR exp check_valid_func RPAR SEMICOLON

    LPAR            shift and go to state 131


state 100

    (110) func_extra -> empty .

    ID              reduce using rule 110 (func_extra -> empty .)
    READ            reduce using rule 110 (func_extra -> empty .)
    WRITE           reduce using rule 110 (func_extra -> empty .)
    IF              reduce using rule 110 (func_extra -> empty .)
    FOR             reduce using rule 110 (func_extra -> empty .)
    WHILE           reduce using rule 110 (func_extra -> empty .)
    RETURN          reduce using rule 110 (func_extra -> empty .)
    LINEAR_REG      reduce using rule 110 (func_extra -> empty .)
    BOX_PLOT        reduce using rule 110 (func_extra -> empty .)
    HISTOGRAM       reduce using rule 110 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 110 (func_extra -> empty .)


state 101

    (158) funciones_especiales -> read_csv .

    ID              reduce using rule 158 (funciones_especiales -> read_csv .)
    READ            reduce using rule 158 (funciones_especiales -> read_csv .)
    WRITE           reduce using rule 158 (funciones_especiales -> read_csv .)
    IF              reduce using rule 158 (funciones_especiales -> read_csv .)
    FOR             reduce using rule 158 (funciones_especiales -> read_csv .)
    WHILE           reduce using rule 158 (funciones_especiales -> read_csv .)
    RETURN          reduce using rule 158 (funciones_especiales -> read_csv .)
    LINEAR_REG      reduce using rule 158 (funciones_especiales -> read_csv .)
    BOX_PLOT        reduce using rule 158 (funciones_especiales -> read_csv .)
    HISTOGRAM       reduce using rule 158 (funciones_especiales -> read_csv .)
    R_C_BRACKET     reduce using rule 158 (funciones_especiales -> read_csv .)


state 102

    (159) funciones_especiales -> mean_func .

    ID              reduce using rule 159 (funciones_especiales -> mean_func .)
    READ            reduce using rule 159 (funciones_especiales -> mean_func .)
    WRITE           reduce using rule 159 (funciones_especiales -> mean_func .)
    IF              reduce using rule 159 (funciones_especiales -> mean_func .)
    FOR             reduce using rule 159 (funciones_especiales -> mean_func .)
    WHILE           reduce using rule 159 (funciones_especiales -> mean_func .)
    RETURN          reduce using rule 159 (funciones_especiales -> mean_func .)
    LINEAR_REG      reduce using rule 159 (funciones_especiales -> mean_func .)
    BOX_PLOT        reduce using rule 159 (funciones_especiales -> mean_func .)
    HISTOGRAM       reduce using rule 159 (funciones_especiales -> mean_func .)
    R_C_BRACKET     reduce using rule 159 (funciones_especiales -> mean_func .)


state 103

    (160) funciones_especiales -> mode_func .

    ID              reduce using rule 160 (funciones_especiales -> mode_func .)
    READ            reduce using rule 160 (funciones_especiales -> mode_func .)
    WRITE           reduce using rule 160 (funciones_especiales -> mode_func .)
    IF              reduce using rule 160 (funciones_especiales -> mode_func .)
    FOR             reduce using rule 160 (funciones_especiales -> mode_func .)
    WHILE           reduce using rule 160 (funciones_especiales -> mode_func .)
    RETURN          reduce using rule 160 (funciones_especiales -> mode_func .)
    LINEAR_REG      reduce using rule 160 (funciones_especiales -> mode_func .)
    BOX_PLOT        reduce using rule 160 (funciones_especiales -> mode_func .)
    HISTOGRAM       reduce using rule 160 (funciones_especiales -> mode_func .)
    R_C_BRACKET     reduce using rule 160 (funciones_especiales -> mode_func .)


state 104

    (161) funciones_especiales -> median_func .

    ID              reduce using rule 161 (funciones_especiales -> median_func .)
    READ            reduce using rule 161 (funciones_especiales -> median_func .)
    WRITE           reduce using rule 161 (funciones_especiales -> median_func .)
    IF              reduce using rule 161 (funciones_especiales -> median_func .)
    FOR             reduce using rule 161 (funciones_especiales -> median_func .)
    WHILE           reduce using rule 161 (funciones_especiales -> median_func .)
    RETURN          reduce using rule 161 (funciones_especiales -> median_func .)
    LINEAR_REG      reduce using rule 161 (funciones_especiales -> median_func .)
    BOX_PLOT        reduce using rule 161 (funciones_especiales -> median_func .)
    HISTOGRAM       reduce using rule 161 (funciones_especiales -> median_func .)
    R_C_BRACKET     reduce using rule 161 (funciones_especiales -> median_func .)


state 105

    (162) funciones_especiales -> linear_reg_func .

    ID              reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    READ            reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    WRITE           reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    IF              reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    FOR             reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    WHILE           reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    RETURN          reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    LINEAR_REG      reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    BOX_PLOT        reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    HISTOGRAM       reduce using rule 162 (funciones_especiales -> linear_reg_func .)
    R_C_BRACKET     reduce using rule 162 (funciones_especiales -> linear_reg_func .)


state 106

    (163) funciones_especiales -> box_plt .

    ID              reduce using rule 163 (funciones_especiales -> box_plt .)
    READ            reduce using rule 163 (funciones_especiales -> box_plt .)
    WRITE           reduce using rule 163 (funciones_especiales -> box_plt .)
    IF              reduce using rule 163 (funciones_especiales -> box_plt .)
    FOR             reduce using rule 163 (funciones_especiales -> box_plt .)
    WHILE           reduce using rule 163 (funciones_especiales -> box_plt .)
    RETURN          reduce using rule 163 (funciones_especiales -> box_plt .)
    LINEAR_REG      reduce using rule 163 (funciones_especiales -> box_plt .)
    BOX_PLOT        reduce using rule 163 (funciones_especiales -> box_plt .)
    HISTOGRAM       reduce using rule 163 (funciones_especiales -> box_plt .)
    R_C_BRACKET     reduce using rule 163 (funciones_especiales -> box_plt .)


state 107

    (164) funciones_especiales -> histogram_plt .

    ID              reduce using rule 164 (funciones_especiales -> histogram_plt .)
    READ            reduce using rule 164 (funciones_especiales -> histogram_plt .)
    WRITE           reduce using rule 164 (funciones_especiales -> histogram_plt .)
    IF              reduce using rule 164 (funciones_especiales -> histogram_plt .)
    FOR             reduce using rule 164 (funciones_especiales -> histogram_plt .)
    WHILE           reduce using rule 164 (funciones_especiales -> histogram_plt .)
    RETURN          reduce using rule 164 (funciones_especiales -> histogram_plt .)
    LINEAR_REG      reduce using rule 164 (funciones_especiales -> histogram_plt .)
    BOX_PLOT        reduce using rule 164 (funciones_especiales -> histogram_plt .)
    HISTOGRAM       reduce using rule 164 (funciones_especiales -> histogram_plt .)
    R_C_BRACKET     reduce using rule 164 (funciones_especiales -> histogram_plt .)


state 108

    (174) linear_reg_func -> LINEAR_REG . LPAR variable check_df add_quad_linearR RPAR SEMICOLON

    LPAR            shift and go to state 132


state 109

    (176) box_plt -> BOX_PLOT . LPAR variable check_df add_quad_box RPAR SEMICOLON

    LPAR            shift and go to state 133


state 110

    (178) histogram_plt -> HISTOGRAM . LPAR variable check_df add_quad_hist RPAR SEMICOLON

    LPAR            shift and go to state 134


state 111

    (150) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 135


state 112

    (44) punto_param_2 -> empty .

    RPAR            reduce using rule 44 (punto_param_2 -> empty .)


state 113

    (39) param -> tipo_simple ID . punto_param param_2
    (43) punto_param -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    punto_param                    shift and go to state 136
    empty                          shift and go to state 137

state 114

    (33) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 138


state 115

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .

    $end            reduce using rule 10 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .)


state 116

    (12) main_final -> empty .

    $end            reduce using rule 12 (main_final -> empty .)


state 117

    (16) body_3 -> estatuto . body_3
    (16) body_3 -> . estatuto body_3
    (17) body_3 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 117
    body_3                         shift and go to state 139
    empty                          shift and go to state 119
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 118

    (13) body -> body_2 func_agrega_v estatuto body_3 .

    R_C_BRACKET     reduce using rule 13 (body -> body_2 func_agrega_v estatuto body_3 .)


state 119

    (17) body_3 -> empty .
    (110) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 17 (body_3 -> empty .)
    R_C_BRACKET     reduce using rule 17 (body_3 -> empty .)
    ID              reduce using rule 110 (func_extra -> empty .)
    READ            reduce using rule 110 (func_extra -> empty .)
    WRITE           reduce using rule 110 (func_extra -> empty .)
    IF              reduce using rule 110 (func_extra -> empty .)
    FOR             reduce using rule 110 (func_extra -> empty .)
    WHILE           reduce using rule 110 (func_extra -> empty .)
    RETURN          reduce using rule 110 (func_extra -> empty .)
    LINEAR_REG      reduce using rule 110 (func_extra -> empty .)
    BOX_PLOT        reduce using rule 110 (func_extra -> empty .)
    HISTOGRAM       reduce using rule 110 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 110 (func_extra -> empty .) ]


state 120

    (62) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (166) read_csv -> variable EQUAL . check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> variable EQUAL . check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> variable EQUAL . check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> variable EQUAL . check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (141) add_operator -> . empty
    (165) check_df -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)
    CSV_READ        reduce using rule 181 (empty -> .)
    MEAN            reduce using rule 181 (empty -> .)
    MODE            reduce using rule 181 (empty -> .)
    MEDIAN          reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 140
    check_df                       shift and go to state 141
    empty                          shift and go to state 142

state 121

    (64) llamada -> ID verify_func . not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> ID verify_func . LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (74) not_void -> . empty
    (181) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    LPAR            shift and go to state 144

  ! LPAR            [ reduce using rule 181 (empty -> .) ]

    not_void                       shift and go to state 143
    empty                          shift and go to state 145

state 122

    (45) variable -> ID variable_2 . variable_point
    (46) variable_point -> . empty
    (181) empty -> .

    EQUAL           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    variable_point                 shift and go to state 146
    empty                          shift and go to state 147

state 123

    (75) verify_func -> empty .
    (48) variable_2 -> empty .

    LPAR            reduce using rule 75 (verify_func -> empty .)
    EQUAL           reduce using rule 48 (variable_2 -> empty .)


state 124

    (47) variable_2 -> L_S_BRACKET . add_floor exp R_S_BRACKET remove_floor variable_3
    (139) add_floor -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_floor                      shift and go to state 148
    empty                          shift and go to state 149

state 125

    (79) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 150

state 126

    (81) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (82) write_2 -> . exp write_point
    (83) write_2 -> . CTE_S add_constant_s write_point
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 155
    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    write_2                        shift and go to state 153
    exp                            shift and go to state 154
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 127

    (87) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 167
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 128

    (95) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 168


state 129

    (102) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 169


state 130

    (105) while_point -> empty .

    LPAR            reduce using rule 105 (while_point -> empty .)


state 131

    (108) return -> RETURN LPAR . exp check_valid_func RPAR SEMICOLON
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 170
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 132

    (174) linear_reg_func -> LINEAR_REG LPAR . variable check_df add_quad_linearR RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 171

state 133

    (176) box_plt -> BOX_PLOT LPAR . variable check_df add_quad_box RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 172

state 134

    (178) histogram_plt -> HISTOGRAM LPAR . variable check_df add_quad_hist RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 173

state 135

    (150) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 174


state 136

    (39) param -> tipo_simple ID punto_param . param_2
    (41) param_2 -> . COMMA param
    (42) param_2 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 176
    RPAR            reduce using rule 181 (empty -> .)

    param_2                        shift and go to state 175
    empty                          shift and go to state 177

state 137

    (43) punto_param -> empty .

    COMMA           reduce using rule 43 (punto_param -> empty .)
    RPAR            reduce using rule 43 (punto_param -> empty .)


state 138

    (33) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (36) var_mat -> . empty
    (181) empty -> .

    SEMICOLON       reduce using rule 181 (empty -> .)

    var_mat                        shift and go to state 178
    empty                          shift and go to state 179

state 139

    (16) body_3 -> estatuto body_3 .

    R_C_BRACKET     reduce using rule 16 (body_3 -> estatuto body_3 .)


state 140

    (62) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    variable                       shift and go to state 161
    exp                            shift and go to state 180
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 141

    (166) read_csv -> variable EQUAL check_df . CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> variable EQUAL check_df . MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> variable EQUAL check_df . MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> variable EQUAL check_df . MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON

    CSV_READ        shift and go to state 181
    MEAN            shift and go to state 182
    MODE            shift and go to state 183
    MEDIAN          shift and go to state 184


state 142

    (141) add_operator -> empty .
    (165) check_df -> empty .

    LPAR            reduce using rule 141 (add_operator -> empty .)
    ID              reduce using rule 141 (add_operator -> empty .)
    CTE_I           reduce using rule 141 (add_operator -> empty .)
    CTE_F           reduce using rule 141 (add_operator -> empty .)
    CSV_READ        reduce using rule 165 (check_df -> empty .)
    MEAN            reduce using rule 165 (check_df -> empty .)
    MODE            reduce using rule 165 (check_df -> empty .)
    MEDIAN          reduce using rule 165 (check_df -> empty .)


state 143

    (64) llamada -> ID verify_func not_void . LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp

    LPAR            shift and go to state 185


state 144

    (69) llamada_void -> ID verify_func LPAR . add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (139) add_floor -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    add_floor                      shift and go to state 186
    empty                          shift and go to state 149

state 145

    (74) not_void -> empty .

    LPAR            reduce using rule 74 (not_void -> empty .)


state 146

    (45) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 45 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 45 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 45 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 45 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 45 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 45 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 45 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 45 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 45 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 45 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 45 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 45 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 45 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 45 (variable -> ID variable_2 variable_point .)


state 147

    (46) variable_point -> empty .

    EQUAL           reduce using rule 46 (variable_point -> empty .)
    RPAR            reduce using rule 46 (variable_point -> empty .)
    TIMES           reduce using rule 46 (variable_point -> empty .)
    DIVIDE          reduce using rule 46 (variable_point -> empty .)
    PLUS            reduce using rule 46 (variable_point -> empty .)
    MINUS           reduce using rule 46 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 46 (variable_point -> empty .)
    LESS            reduce using rule 46 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 46 (variable_point -> empty .)
    GREATER         reduce using rule 46 (variable_point -> empty .)
    COMPARE         reduce using rule 46 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 46 (variable_point -> empty .)
    AND             reduce using rule 46 (variable_point -> empty .)
    OR              reduce using rule 46 (variable_point -> empty .)
    COMMA           reduce using rule 46 (variable_point -> empty .)
    SEMICOLON       reduce using rule 46 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 46 (variable_point -> empty .)
    TO              reduce using rule 46 (variable_point -> empty .)


state 148

    (47) variable_2 -> L_S_BRACKET add_floor . exp R_S_BRACKET remove_floor variable_3
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 187
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 149

    (139) add_floor -> empty .

    LPAR            reduce using rule 139 (add_floor -> empty .)
    ID              reduce using rule 139 (add_floor -> empty .)
    CTE_I           reduce using rule 139 (add_floor -> empty .)
    CTE_F           reduce using rule 139 (add_floor -> empty .)
    COMMA           reduce using rule 139 (add_floor -> empty .)
    RPAR            reduce using rule 139 (add_floor -> empty .)


state 150

    (79) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (80) read_point -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    read_point                     shift and go to state 188
    empty                          shift and go to state 189

state 151

    (45) variable -> ID . variable_2 variable_point
    (47) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (48) variable_2 -> . empty
    (181) empty -> .

    L_S_BRACKET     shift and go to state 124
    RPAR            reduce using rule 181 (empty -> .)

    variable_2                     shift and go to state 122
    empty                          shift and go to state 190

state 152

    (133) f -> LPAR . add_floor exp RPAR remove_floor
    (139) add_floor -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_floor                      shift and go to state 191
    empty                          shift and go to state 149

state 153

    (81) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (84) write_3 -> . COMMA write_2 write_3
    (85) write_3 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 193
    RPAR            reduce using rule 181 (empty -> .)

    write_3                        shift and go to state 192
    empty                          shift and go to state 194

state 154

    (82) write_2 -> exp . write_point
    (86) write_point -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    write_point                    shift and go to state 195
    empty                          shift and go to state 196

state 155

    (83) write_2 -> CTE_S . add_constant_s write_point
    (147) add_constant_s -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    add_constant_s                 shift and go to state 197
    empty                          shift and go to state 198

state 156

    (111) exp -> t_exp . add_operator_4 exp_2
    (145) add_operator_4 -> . empty
    (181) empty -> .

    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_operator_4                 shift and go to state 199
    empty                          shift and go to state 200

state 157

    (114) t_exp -> g_exp . add_operator_4 t_exp_2
    (145) add_operator_4 -> . empty
    (181) empty -> .

    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_operator_4                 shift and go to state 201
    empty                          shift and go to state 200

state 158

    (117) g_exp -> m_exp . g_exp_2 add_operator_3
    (118) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (119) g_exp_2 -> . LESS add_operator m_exp
    (120) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (121) g_exp_2 -> . GREATER add_operator m_exp
    (122) g_exp_2 -> . COMPARE add_operator m_exp
    (123) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (124) g_exp_2 -> . empty
    (181) empty -> .

    LESS_EQUAL      shift and go to state 203
    LESS            shift and go to state 204
    GREATER_EQUAL   shift and go to state 205
    GREATER         shift and go to state 206
    COMPARE         shift and go to state 207
    NOT_EQUAL       shift and go to state 208
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    g_exp_2                        shift and go to state 202
    empty                          shift and go to state 209

state 159

    (125) m_exp -> t . add_operator_2 m_exp_2
    (143) add_operator_2 -> . empty
    (181) empty -> .

    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_operator_2                 shift and go to state 210
    empty                          shift and go to state 211

state 160

    (129) t -> f . add_operator_1 t_2
    (142) add_operator_1 -> . empty
    (181) empty -> .

    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_operator_1                 shift and go to state 212
    empty                          shift and go to state 213

state 161

    (134) f -> variable .

    TIMES           reduce using rule 134 (f -> variable .)
    DIVIDE          reduce using rule 134 (f -> variable .)
    PLUS            reduce using rule 134 (f -> variable .)
    MINUS           reduce using rule 134 (f -> variable .)
    LESS_EQUAL      reduce using rule 134 (f -> variable .)
    LESS            reduce using rule 134 (f -> variable .)
    GREATER_EQUAL   reduce using rule 134 (f -> variable .)
    GREATER         reduce using rule 134 (f -> variable .)
    COMPARE         reduce using rule 134 (f -> variable .)
    NOT_EQUAL       reduce using rule 134 (f -> variable .)
    AND             reduce using rule 134 (f -> variable .)
    OR              reduce using rule 134 (f -> variable .)
    COMMA           reduce using rule 134 (f -> variable .)
    RPAR            reduce using rule 134 (f -> variable .)
    SEMICOLON       reduce using rule 134 (f -> variable .)
    R_S_BRACKET     reduce using rule 134 (f -> variable .)
    TO              reduce using rule 134 (f -> variable .)


state 162

    (135) f -> llamada .

    TIMES           reduce using rule 135 (f -> llamada .)
    DIVIDE          reduce using rule 135 (f -> llamada .)
    PLUS            reduce using rule 135 (f -> llamada .)
    MINUS           reduce using rule 135 (f -> llamada .)
    LESS_EQUAL      reduce using rule 135 (f -> llamada .)
    LESS            reduce using rule 135 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 135 (f -> llamada .)
    GREATER         reduce using rule 135 (f -> llamada .)
    COMPARE         reduce using rule 135 (f -> llamada .)
    NOT_EQUAL       reduce using rule 135 (f -> llamada .)
    AND             reduce using rule 135 (f -> llamada .)
    OR              reduce using rule 135 (f -> llamada .)
    COMMA           reduce using rule 135 (f -> llamada .)
    RPAR            reduce using rule 135 (f -> llamada .)
    SEMICOLON       reduce using rule 135 (f -> llamada .)
    R_S_BRACKET     reduce using rule 135 (f -> llamada .)
    TO              reduce using rule 135 (f -> llamada .)


state 163

    (136) f -> f_2 .

    TIMES           reduce using rule 136 (f -> f_2 .)
    DIVIDE          reduce using rule 136 (f -> f_2 .)
    PLUS            reduce using rule 136 (f -> f_2 .)
    MINUS           reduce using rule 136 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 136 (f -> f_2 .)
    LESS            reduce using rule 136 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 136 (f -> f_2 .)
    GREATER         reduce using rule 136 (f -> f_2 .)
    COMPARE         reduce using rule 136 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 136 (f -> f_2 .)
    AND             reduce using rule 136 (f -> f_2 .)
    OR              reduce using rule 136 (f -> f_2 .)
    COMMA           reduce using rule 136 (f -> f_2 .)
    RPAR            reduce using rule 136 (f -> f_2 .)
    SEMICOLON       reduce using rule 136 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 136 (f -> f_2 .)
    TO              reduce using rule 136 (f -> f_2 .)


state 164

    (45) variable -> ID . variable_2 variable_point
    (64) llamada -> ID . verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (47) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (48) variable_2 -> . empty
    (75) verify_func -> . empty
    (181) empty -> .

    L_S_BRACKET     shift and go to state 124
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)
    LPAR            reduce using rule 181 (empty -> .)

    variable_2                     shift and go to state 122
    verify_func                    shift and go to state 214
    empty                          shift and go to state 215

state 165

    (137) f_2 -> CTE_I . add_constant_i
    (146) add_constant_i -> . empty
    (181) empty -> .

    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_constant_i                 shift and go to state 216
    empty                          shift and go to state 217

state 166

    (138) f_2 -> CTE_F . add_constant_f
    (148) add_constant_f -> . empty
    (181) empty -> .

    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_constant_f                 shift and go to state 218
    empty                          shift and go to state 219

state 167

    (87) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (92) if_point -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    if_point                       shift and go to state 220
    empty                          shift and go to state 221

state 168

    (95) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (98) for_point_1 -> . empty
    (181) empty -> .

    EQUAL           reduce using rule 181 (empty -> .)

    for_point_1                    shift and go to state 222
    empty                          shift and go to state 223

state 169

    (102) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 224
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 170

    (108) return -> RETURN LPAR exp . check_valid_func RPAR SEMICOLON
    (109) check_valid_func -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_valid_func               shift and go to state 225
    empty                          shift and go to state 226

state 171

    (174) linear_reg_func -> LINEAR_REG LPAR variable . check_df add_quad_linearR RPAR SEMICOLON
    (165) check_df -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_df                       shift and go to state 227
    empty                          shift and go to state 228

state 172

    (176) box_plt -> BOX_PLOT LPAR variable . check_df add_quad_box RPAR SEMICOLON
    (165) check_df -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_df                       shift and go to state 229
    empty                          shift and go to state 228

state 173

    (178) histogram_plt -> HISTOGRAM LPAR variable . check_df add_quad_hist RPAR SEMICOLON
    (165) check_df -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_df                       shift and go to state 230
    empty                          shift and go to state 228

state 174

    (150) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (13) body -> . body_2 func_agrega_v estatuto body_3
    (14) body_2 -> . vars
    (15) body_2 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (181) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    body                           shift and go to state 231
    body_2                         shift and go to state 64
    vars                           shift and go to state 65
    empty                          shift and go to state 66

state 175

    (39) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 39 (param -> tipo_simple ID punto_param param_2 .)


state 176

    (41) param_2 -> COMMA . param
    (39) param -> . tipo_simple ID punto_param param_2
    (40) param -> . empty
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR
    (181) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 181 (empty -> .)

    param                          shift and go to state 232
    tipo_simple                    shift and go to state 73
    empty                          shift and go to state 74

state 177

    (42) param_2 -> empty .

    RPAR            reduce using rule 42 (param_2 -> empty .)


state 178

    (33) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 33 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 179

    (36) var_mat -> empty .

    SEMICOLON       reduce using rule 36 (var_mat -> empty .)


state 180

    (62) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (63) asigna_point -> . empty
    (181) empty -> .

    SEMICOLON       reduce using rule 181 (empty -> .)

    asigna_point                   shift and go to state 233
    empty                          shift and go to state 234

state 181

    (166) read_csv -> variable EQUAL check_df CSV_READ . LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON

    LPAR            shift and go to state 235


state 182

    (168) mean_func -> variable EQUAL check_df MEAN . LPAR variable check_df add_quad_mean RPAR SEMICOLON

    LPAR            shift and go to state 236


state 183

    (170) mode_func -> variable EQUAL check_df MODE . LPAR variable check_df add_quad_mode RPAR SEMICOLON

    LPAR            shift and go to state 237


state 184

    (172) median_func -> variable EQUAL check_df MEDIAN . LPAR variable check_df add_quad_median RPAR SEMICOLON

    LPAR            shift and go to state 238


state 185

    (64) llamada -> ID verify_func not_void LPAR . add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (139) add_floor -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    add_floor                      shift and go to state 239
    empty                          shift and go to state 149

state 186

    (69) llamada_void -> ID verify_func LPAR add_floor . llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (70) llamada_void_2 -> . exp verify_parameter
    (71) llamada_void_2 -> . empty
    (111) exp -> . t_exp add_operator_4 exp_2
    (181) empty -> .
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    llamada_void_2                 shift and go to state 240
    exp                            shift and go to state 241
    empty                          shift and go to state 242
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 187

    (47) variable_2 -> L_S_BRACKET add_floor exp . R_S_BRACKET remove_floor variable_3

    R_S_BRACKET     shift and go to state 243


state 188

    (79) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 244


state 189

    (80) read_point -> empty .

    RPAR            reduce using rule 80 (read_point -> empty .)


state 190

    (48) variable_2 -> empty .

    RPAR            reduce using rule 48 (variable_2 -> empty .)


state 191

    (133) f -> LPAR add_floor . exp RPAR remove_floor
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 245
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 192

    (81) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 246


state 193

    (84) write_3 -> COMMA . write_2 write_3
    (82) write_2 -> . exp write_point
    (83) write_2 -> . CTE_S add_constant_s write_point
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 155
    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    write_2                        shift and go to state 247
    exp                            shift and go to state 154
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 194

    (85) write_3 -> empty .

    RPAR            reduce using rule 85 (write_3 -> empty .)


state 195

    (82) write_2 -> exp write_point .

    COMMA           reduce using rule 82 (write_2 -> exp write_point .)
    RPAR            reduce using rule 82 (write_2 -> exp write_point .)


state 196

    (86) write_point -> empty .

    COMMA           reduce using rule 86 (write_point -> empty .)
    RPAR            reduce using rule 86 (write_point -> empty .)


state 197

    (83) write_2 -> CTE_S add_constant_s . write_point
    (86) write_point -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    write_point                    shift and go to state 248
    empty                          shift and go to state 196

state 198

    (147) add_constant_s -> empty .

    COMMA           reduce using rule 147 (add_constant_s -> empty .)
    RPAR            reduce using rule 147 (add_constant_s -> empty .)


state 199

    (111) exp -> t_exp add_operator_4 . exp_2
    (112) exp_2 -> . OR add_operator exp
    (113) exp_2 -> . empty
    (181) empty -> .

    OR              shift and go to state 250
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    exp_2                          shift and go to state 249
    empty                          shift and go to state 251

state 200

    (145) add_operator_4 -> empty .

    OR              reduce using rule 145 (add_operator_4 -> empty .)
    COMMA           reduce using rule 145 (add_operator_4 -> empty .)
    RPAR            reduce using rule 145 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 145 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 145 (add_operator_4 -> empty .)
    TO              reduce using rule 145 (add_operator_4 -> empty .)
    AND             reduce using rule 145 (add_operator_4 -> empty .)


state 201

    (114) t_exp -> g_exp add_operator_4 . t_exp_2
    (115) t_exp_2 -> . AND add_operator t_exp
    (116) t_exp_2 -> . empty
    (181) empty -> .

    AND             shift and go to state 253
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    t_exp_2                        shift and go to state 252
    empty                          shift and go to state 254

state 202

    (117) g_exp -> m_exp g_exp_2 . add_operator_3
    (144) add_operator_3 -> . empty
    (181) empty -> .

    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_operator_3                 shift and go to state 255
    empty                          shift and go to state 256

state 203

    (118) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 257
    empty                          shift and go to state 258

state 204

    (119) g_exp_2 -> LESS . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 259
    empty                          shift and go to state 258

state 205

    (120) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 260
    empty                          shift and go to state 258

state 206

    (121) g_exp_2 -> GREATER . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 261
    empty                          shift and go to state 258

state 207

    (122) g_exp_2 -> COMPARE . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 262
    empty                          shift and go to state 258

state 208

    (123) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 263
    empty                          shift and go to state 258

state 209

    (124) g_exp_2 -> empty .

    AND             reduce using rule 124 (g_exp_2 -> empty .)
    OR              reduce using rule 124 (g_exp_2 -> empty .)
    COMMA           reduce using rule 124 (g_exp_2 -> empty .)
    RPAR            reduce using rule 124 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 124 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 124 (g_exp_2 -> empty .)
    TO              reduce using rule 124 (g_exp_2 -> empty .)


state 210

    (125) m_exp -> t add_operator_2 . m_exp_2
    (126) m_exp_2 -> . PLUS add_operator m_exp
    (127) m_exp_2 -> . MINUS add_operator m_exp
    (128) m_exp_2 -> . empty
    (181) empty -> .

    PLUS            shift and go to state 265
    MINUS           shift and go to state 266
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    m_exp_2                        shift and go to state 264
    empty                          shift and go to state 267

state 211

    (143) add_operator_2 -> empty .

    PLUS            reduce using rule 143 (add_operator_2 -> empty .)
    MINUS           reduce using rule 143 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 143 (add_operator_2 -> empty .)
    LESS            reduce using rule 143 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 143 (add_operator_2 -> empty .)
    GREATER         reduce using rule 143 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 143 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 143 (add_operator_2 -> empty .)
    AND             reduce using rule 143 (add_operator_2 -> empty .)
    OR              reduce using rule 143 (add_operator_2 -> empty .)
    COMMA           reduce using rule 143 (add_operator_2 -> empty .)
    RPAR            reduce using rule 143 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 143 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 143 (add_operator_2 -> empty .)
    TO              reduce using rule 143 (add_operator_2 -> empty .)


state 212

    (129) t -> f add_operator_1 . t_2
    (130) t_2 -> . TIMES add_operator t
    (131) t_2 -> . DIVIDE add_operator t
    (132) t_2 -> . empty
    (181) empty -> .

    TIMES           shift and go to state 269
    DIVIDE          shift and go to state 270
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    t_2                            shift and go to state 268
    empty                          shift and go to state 271

state 213

    (142) add_operator_1 -> empty .

    TIMES           reduce using rule 142 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 142 (add_operator_1 -> empty .)
    PLUS            reduce using rule 142 (add_operator_1 -> empty .)
    MINUS           reduce using rule 142 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 142 (add_operator_1 -> empty .)
    LESS            reduce using rule 142 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 142 (add_operator_1 -> empty .)
    GREATER         reduce using rule 142 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 142 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 142 (add_operator_1 -> empty .)
    AND             reduce using rule 142 (add_operator_1 -> empty .)
    OR              reduce using rule 142 (add_operator_1 -> empty .)
    COMMA           reduce using rule 142 (add_operator_1 -> empty .)
    RPAR            reduce using rule 142 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 142 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 142 (add_operator_1 -> empty .)
    TO              reduce using rule 142 (add_operator_1 -> empty .)


state 214

    (64) llamada -> ID verify_func . not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (74) not_void -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)

    not_void                       shift and go to state 143
    empty                          shift and go to state 145

state 215

    (48) variable_2 -> empty .
    (75) verify_func -> empty .

    TIMES           reduce using rule 48 (variable_2 -> empty .)
    DIVIDE          reduce using rule 48 (variable_2 -> empty .)
    PLUS            reduce using rule 48 (variable_2 -> empty .)
    MINUS           reduce using rule 48 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 48 (variable_2 -> empty .)
    LESS            reduce using rule 48 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 48 (variable_2 -> empty .)
    GREATER         reduce using rule 48 (variable_2 -> empty .)
    COMPARE         reduce using rule 48 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 48 (variable_2 -> empty .)
    AND             reduce using rule 48 (variable_2 -> empty .)
    OR              reduce using rule 48 (variable_2 -> empty .)
    COMMA           reduce using rule 48 (variable_2 -> empty .)
    RPAR            reduce using rule 48 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 48 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 48 (variable_2 -> empty .)
    TO              reduce using rule 48 (variable_2 -> empty .)
    LPAR            reduce using rule 75 (verify_func -> empty .)


state 216

    (137) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 137 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 137 (f_2 -> CTE_I add_constant_i .)


state 217

    (146) add_constant_i -> empty .

    TIMES           reduce using rule 146 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 146 (add_constant_i -> empty .)
    PLUS            reduce using rule 146 (add_constant_i -> empty .)
    MINUS           reduce using rule 146 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 146 (add_constant_i -> empty .)
    LESS            reduce using rule 146 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 146 (add_constant_i -> empty .)
    GREATER         reduce using rule 146 (add_constant_i -> empty .)
    COMPARE         reduce using rule 146 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 146 (add_constant_i -> empty .)
    AND             reduce using rule 146 (add_constant_i -> empty .)
    OR              reduce using rule 146 (add_constant_i -> empty .)
    COMMA           reduce using rule 146 (add_constant_i -> empty .)
    RPAR            reduce using rule 146 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 146 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 146 (add_constant_i -> empty .)
    TO              reduce using rule 146 (add_constant_i -> empty .)


state 218

    (138) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 138 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 138 (f_2 -> CTE_F add_constant_f .)


state 219

    (148) add_constant_f -> empty .

    TIMES           reduce using rule 148 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 148 (add_constant_f -> empty .)
    PLUS            reduce using rule 148 (add_constant_f -> empty .)
    MINUS           reduce using rule 148 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 148 (add_constant_f -> empty .)
    LESS            reduce using rule 148 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 148 (add_constant_f -> empty .)
    GREATER         reduce using rule 148 (add_constant_f -> empty .)
    COMPARE         reduce using rule 148 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 148 (add_constant_f -> empty .)
    AND             reduce using rule 148 (add_constant_f -> empty .)
    OR              reduce using rule 148 (add_constant_f -> empty .)
    COMMA           reduce using rule 148 (add_constant_f -> empty .)
    RPAR            reduce using rule 148 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 148 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 148 (add_constant_f -> empty .)
    TO              reduce using rule 148 (add_constant_f -> empty .)


state 220

    (87) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 272


state 221

    (92) if_point -> empty .

    RPAR            reduce using rule 92 (if_point -> empty .)


state 222

    (95) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 273


state 223

    (98) for_point_1 -> empty .

    EQUAL           reduce using rule 98 (for_point_1 -> empty .)


state 224

    (102) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 274


state 225

    (108) return -> RETURN LPAR exp check_valid_func . RPAR SEMICOLON

    RPAR            shift and go to state 275


state 226

    (109) check_valid_func -> empty .

    RPAR            reduce using rule 109 (check_valid_func -> empty .)


state 227

    (174) linear_reg_func -> LINEAR_REG LPAR variable check_df . add_quad_linearR RPAR SEMICOLON
    (175) add_quad_linearR -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_linearR               shift and go to state 276
    empty                          shift and go to state 277

state 228

    (165) check_df -> empty .

    RPAR            reduce using rule 165 (check_df -> empty .)


state 229

    (176) box_plt -> BOX_PLOT LPAR variable check_df . add_quad_box RPAR SEMICOLON
    (177) add_quad_box -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_box                   shift and go to state 278
    empty                          shift and go to state 279

state 230

    (178) histogram_plt -> HISTOGRAM LPAR variable check_df . add_quad_hist RPAR SEMICOLON
    (179) add_quad_hist -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_hist                  shift and go to state 280
    empty                          shift and go to state 281

state 231

    (150) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 282


state 232

    (41) param_2 -> COMMA param .

    RPAR            reduce using rule 41 (param_2 -> COMMA param .)


state 233

    (62) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 283


state 234

    (63) asigna_point -> empty .

    SEMICOLON       reduce using rule 63 (asigna_point -> empty .)


state 235

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR . CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON

    CTE_S           shift and go to state 284


state 236

    (168) mean_func -> variable EQUAL check_df MEAN LPAR . variable check_df add_quad_mean RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 285

state 237

    (170) mode_func -> variable EQUAL check_df MODE LPAR . variable check_df add_quad_mode RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 286

state 238

    (172) median_func -> variable EQUAL check_df MEDIAN LPAR . variable check_df add_quad_median RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 151

    variable                       shift and go to state 287

state 239

    (64) llamada -> ID verify_func not_void LPAR add_floor . llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (65) llamada_2 -> . exp verify_parameter
    (66) llamada_2 -> . empty
    (111) exp -> . t_exp add_operator_4 exp_2
    (181) empty -> .
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    llamada_2                      shift and go to state 288
    exp                            shift and go to state 289
    empty                          shift and go to state 290
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 240

    (69) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 . llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (72) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (73) llamada_void_3 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 292
    RPAR            reduce using rule 181 (empty -> .)

    llamada_void_3                 shift and go to state 291
    empty                          shift and go to state 293

state 241

    (70) llamada_void_2 -> exp . verify_parameter
    (76) verify_parameter -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    verify_parameter               shift and go to state 294
    empty                          shift and go to state 295

state 242

    (71) llamada_void_2 -> empty .

    COMMA           reduce using rule 71 (llamada_void_2 -> empty .)
    RPAR            reduce using rule 71 (llamada_void_2 -> empty .)


state 243

    (47) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET . remove_floor variable_3
    (140) remove_floor -> . empty
    (181) empty -> .

    L_S_BRACKET     reduce using rule 181 (empty -> .)
    EQUAL           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    remove_floor                   shift and go to state 296
    empty                          shift and go to state 297

state 244

    (79) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 298


state 245

    (133) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 299


state 246

    (81) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 300


state 247

    (84) write_3 -> COMMA write_2 . write_3
    (84) write_3 -> . COMMA write_2 write_3
    (85) write_3 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 193
    RPAR            reduce using rule 181 (empty -> .)

    write_3                        shift and go to state 301
    empty                          shift and go to state 194

state 248

    (83) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 83 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 83 (write_2 -> CTE_S add_constant_s write_point .)


state 249

    (111) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 111 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 111 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 111 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 111 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 111 (exp -> t_exp add_operator_4 exp_2 .)


state 250

    (112) exp_2 -> OR . add_operator exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 302
    empty                          shift and go to state 258

state 251

    (113) exp_2 -> empty .

    COMMA           reduce using rule 113 (exp_2 -> empty .)
    RPAR            reduce using rule 113 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 113 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 113 (exp_2 -> empty .)
    TO              reduce using rule 113 (exp_2 -> empty .)


state 252

    (114) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 114 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 114 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 114 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 114 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 114 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 114 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 253

    (115) t_exp_2 -> AND . add_operator t_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 303
    empty                          shift and go to state 258

state 254

    (116) t_exp_2 -> empty .

    OR              reduce using rule 116 (t_exp_2 -> empty .)
    COMMA           reduce using rule 116 (t_exp_2 -> empty .)
    RPAR            reduce using rule 116 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 116 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 116 (t_exp_2 -> empty .)
    TO              reduce using rule 116 (t_exp_2 -> empty .)


state 255

    (117) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 117 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 256

    (144) add_operator_3 -> empty .

    AND             reduce using rule 144 (add_operator_3 -> empty .)
    OR              reduce using rule 144 (add_operator_3 -> empty .)
    COMMA           reduce using rule 144 (add_operator_3 -> empty .)
    RPAR            reduce using rule 144 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 144 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 144 (add_operator_3 -> empty .)
    TO              reduce using rule 144 (add_operator_3 -> empty .)


state 257

    (118) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 304
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 258

    (141) add_operator -> empty .

    LPAR            reduce using rule 141 (add_operator -> empty .)
    ID              reduce using rule 141 (add_operator -> empty .)
    CTE_I           reduce using rule 141 (add_operator -> empty .)
    CTE_F           reduce using rule 141 (add_operator -> empty .)


state 259

    (119) g_exp_2 -> LESS add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 305
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 260

    (120) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 306
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 261

    (121) g_exp_2 -> GREATER add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 307
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 262

    (122) g_exp_2 -> COMPARE add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 308
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 263

    (123) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 309
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 264

    (125) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 125 (m_exp -> t add_operator_2 m_exp_2 .)


state 265

    (126) m_exp_2 -> PLUS . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 310
    empty                          shift and go to state 258

state 266

    (127) m_exp_2 -> MINUS . add_operator m_exp
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 311
    empty                          shift and go to state 258

state 267

    (128) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 128 (m_exp_2 -> empty .)
    LESS            reduce using rule 128 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 128 (m_exp_2 -> empty .)
    GREATER         reduce using rule 128 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 128 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 128 (m_exp_2 -> empty .)
    AND             reduce using rule 128 (m_exp_2 -> empty .)
    OR              reduce using rule 128 (m_exp_2 -> empty .)
    COMMA           reduce using rule 128 (m_exp_2 -> empty .)
    RPAR            reduce using rule 128 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 128 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 128 (m_exp_2 -> empty .)
    TO              reduce using rule 128 (m_exp_2 -> empty .)


state 268

    (129) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 129 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 129 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 129 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 129 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 129 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 129 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 129 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 129 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 129 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 129 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 129 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 129 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 129 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 129 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 129 (t -> f add_operator_1 t_2 .)


state 269

    (130) t_2 -> TIMES . add_operator t
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 312
    empty                          shift and go to state 258

state 270

    (131) t_2 -> DIVIDE . add_operator t
    (141) add_operator -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_operator                   shift and go to state 313
    empty                          shift and go to state 258

state 271

    (132) t_2 -> empty .

    PLUS            reduce using rule 132 (t_2 -> empty .)
    MINUS           reduce using rule 132 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 132 (t_2 -> empty .)
    LESS            reduce using rule 132 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 132 (t_2 -> empty .)
    GREATER         reduce using rule 132 (t_2 -> empty .)
    COMPARE         reduce using rule 132 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 132 (t_2 -> empty .)
    AND             reduce using rule 132 (t_2 -> empty .)
    OR              reduce using rule 132 (t_2 -> empty .)
    COMMA           reduce using rule 132 (t_2 -> empty .)
    RPAR            reduce using rule 132 (t_2 -> empty .)
    SEMICOLON       reduce using rule 132 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 132 (t_2 -> empty .)
    TO              reduce using rule 132 (t_2 -> empty .)


state 272

    (87) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 314


state 273

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 315
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 274

    (102) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) while_point_2 -> . empty
    (181) empty -> .

    L_C_BRACKET     reduce using rule 181 (empty -> .)

    while_point_2                  shift and go to state 316
    empty                          shift and go to state 317

state 275

    (108) return -> RETURN LPAR exp check_valid_func RPAR . SEMICOLON

    SEMICOLON       shift and go to state 318


state 276

    (174) linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR . RPAR SEMICOLON

    RPAR            shift and go to state 319


state 277

    (175) add_quad_linearR -> empty .

    RPAR            reduce using rule 175 (add_quad_linearR -> empty .)


state 278

    (176) box_plt -> BOX_PLOT LPAR variable check_df add_quad_box . RPAR SEMICOLON

    RPAR            shift and go to state 320


state 279

    (177) add_quad_box -> empty .

    RPAR            reduce using rule 177 (add_quad_box -> empty .)


state 280

    (178) histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist . RPAR SEMICOLON

    RPAR            shift and go to state 321


state 281

    (179) add_quad_hist -> empty .

    RPAR            reduce using rule 179 (add_quad_hist -> empty .)


state 282

    (150) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (157) final_func_point -> . empty
    (181) empty -> .

    SEMICOLON       reduce using rule 181 (empty -> .)

    final_func_point               shift and go to state 322
    empty                          shift and go to state 323

state 283

    (62) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    LINEAR_REG      reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    BOX_PLOT        reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    HISTOGRAM       reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 62 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 284

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S . check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (180) check_name -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_name                     shift and go to state 324
    empty                          shift and go to state 325

state 285

    (168) mean_func -> variable EQUAL check_df MEAN LPAR variable . check_df add_quad_mean RPAR SEMICOLON
    (165) check_df -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_df                       shift and go to state 326
    empty                          shift and go to state 228

state 286

    (170) mode_func -> variable EQUAL check_df MODE LPAR variable . check_df add_quad_mode RPAR SEMICOLON
    (165) check_df -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_df                       shift and go to state 327
    empty                          shift and go to state 228

state 287

    (172) median_func -> variable EQUAL check_df MEDIAN LPAR variable . check_df add_quad_median RPAR SEMICOLON
    (165) check_df -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    check_df                       shift and go to state 328
    empty                          shift and go to state 228

state 288

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 . llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (67) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (68) llamada_3 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 330
    RPAR            reduce using rule 181 (empty -> .)

    llamada_3                      shift and go to state 329
    empty                          shift and go to state 331

state 289

    (65) llamada_2 -> exp . verify_parameter
    (76) verify_parameter -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    verify_parameter               shift and go to state 332
    empty                          shift and go to state 295

state 290

    (66) llamada_2 -> empty .

    COMMA           reduce using rule 66 (llamada_2 -> empty .)
    RPAR            reduce using rule 66 (llamada_2 -> empty .)


state 291

    (69) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 . RPAR remove_floor SEMICOLON gosub

    RPAR            shift and go to state 333


state 292

    (72) llamada_void_3 -> COMMA . exp verify_parameter llamada_void_3
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 334
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 293

    (73) llamada_void_3 -> empty .

    RPAR            reduce using rule 73 (llamada_void_3 -> empty .)


state 294

    (70) llamada_void_2 -> exp verify_parameter .

    COMMA           reduce using rule 70 (llamada_void_2 -> exp verify_parameter .)
    RPAR            reduce using rule 70 (llamada_void_2 -> exp verify_parameter .)


state 295

    (76) verify_parameter -> empty .

    COMMA           reduce using rule 76 (verify_parameter -> empty .)
    RPAR            reduce using rule 76 (verify_parameter -> empty .)


state 296

    (47) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor . variable_3
    (49) variable_3 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor
    (50) variable_3 -> . empty
    (181) empty -> .

    L_S_BRACKET     shift and go to state 335
    EQUAL           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    variable_3                     shift and go to state 336
    empty                          shift and go to state 337

state 297

    (140) remove_floor -> empty .

    L_S_BRACKET     reduce using rule 140 (remove_floor -> empty .)
    EQUAL           reduce using rule 140 (remove_floor -> empty .)
    RPAR            reduce using rule 140 (remove_floor -> empty .)
    TIMES           reduce using rule 140 (remove_floor -> empty .)
    DIVIDE          reduce using rule 140 (remove_floor -> empty .)
    PLUS            reduce using rule 140 (remove_floor -> empty .)
    MINUS           reduce using rule 140 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 140 (remove_floor -> empty .)
    LESS            reduce using rule 140 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 140 (remove_floor -> empty .)
    GREATER         reduce using rule 140 (remove_floor -> empty .)
    COMPARE         reduce using rule 140 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 140 (remove_floor -> empty .)
    AND             reduce using rule 140 (remove_floor -> empty .)
    OR              reduce using rule 140 (remove_floor -> empty .)
    COMMA           reduce using rule 140 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 140 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 140 (remove_floor -> empty .)
    TO              reduce using rule 140 (remove_floor -> empty .)


state 298

    (79) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 79 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 299

    (133) f -> LPAR add_floor exp RPAR . remove_floor
    (140) remove_floor -> . empty
    (181) empty -> .

    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    remove_floor                   shift and go to state 338
    empty                          shift and go to state 297

state 300

    (81) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 81 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 301

    (84) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 84 (write_3 -> COMMA write_2 write_3 .)


state 302

    (112) exp_2 -> OR add_operator . exp
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 339
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 303

    (115) t_exp_2 -> AND add_operator . t_exp
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    t_exp                          shift and go to state 340
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 304

    (118) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 118 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 305

    (119) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 119 (g_exp_2 -> LESS add_operator m_exp .)


state 306

    (120) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 120 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 307

    (121) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 121 (g_exp_2 -> GREATER add_operator m_exp .)


state 308

    (122) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 122 (g_exp_2 -> COMPARE add_operator m_exp .)


state 309

    (123) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 123 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 310

    (126) m_exp_2 -> PLUS add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 341
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 311

    (127) m_exp_2 -> MINUS add_operator . m_exp
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    m_exp                          shift and go to state 342
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 312

    (130) t_2 -> TIMES add_operator . t
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    t                              shift and go to state 343
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 313

    (131) t_2 -> DIVIDE add_operator . t
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    t                              shift and go to state 344
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 314

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (181) empty -> .
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 345
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    empty                          shift and go to state 100
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 315

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (99) for_point_2 -> . empty
    (181) empty -> .

    TO              reduce using rule 181 (empty -> .)

    for_point_2                    shift and go to state 346
    empty                          shift and go to state 347

state 316

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 348


state 317

    (106) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 106 (while_point_2 -> empty .)


state 318

    (108) return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .

    ID              reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    READ            reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WRITE           reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    IF              reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    FOR             reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WHILE           reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    RETURN          reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 108 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)


state 319

    (174) linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR . SEMICOLON

    SEMICOLON       shift and go to state 349


state 320

    (176) box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR . SEMICOLON

    SEMICOLON       shift and go to state 350


state 321

    (178) histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR . SEMICOLON

    SEMICOLON       shift and go to state 351


state 322

    (150) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 150 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 323

    (157) final_func_point -> empty .

    SEMICOLON       reduce using rule 157 (final_func_point -> empty .)


state 324

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name . add_constant_s add_quad_readCSV RPAR SEMICOLON
    (147) add_constant_s -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_constant_s                 shift and go to state 352
    empty                          shift and go to state 198

state 325

    (180) check_name -> empty .

    RPAR            reduce using rule 180 (check_name -> empty .)


state 326

    (168) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df . add_quad_mean RPAR SEMICOLON
    (169) add_quad_mean -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_mean                  shift and go to state 353
    empty                          shift and go to state 354

state 327

    (170) mode_func -> variable EQUAL check_df MODE LPAR variable check_df . add_quad_mode RPAR SEMICOLON
    (171) add_quad_mode -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_mode                  shift and go to state 355
    empty                          shift and go to state 356

state 328

    (172) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df . add_quad_median RPAR SEMICOLON
    (173) add_quad_median -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_median                shift and go to state 357
    empty                          shift and go to state 358

state 329

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 . RPAR remove_floor SEMICOLON gosub add_temp

    RPAR            shift and go to state 359


state 330

    (67) llamada_3 -> COMMA . exp verify_parameter llamada_3
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 360
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 331

    (68) llamada_3 -> empty .

    RPAR            reduce using rule 68 (llamada_3 -> empty .)


state 332

    (65) llamada_2 -> exp verify_parameter .

    COMMA           reduce using rule 65 (llamada_2 -> exp verify_parameter .)
    RPAR            reduce using rule 65 (llamada_2 -> exp verify_parameter .)


state 333

    (69) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR . remove_floor SEMICOLON gosub
    (140) remove_floor -> . empty
    (181) empty -> .

    SEMICOLON       reduce using rule 181 (empty -> .)

    remove_floor                   shift and go to state 361
    empty                          shift and go to state 297

state 334

    (72) llamada_void_3 -> COMMA exp . verify_parameter llamada_void_3
    (76) verify_parameter -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    verify_parameter               shift and go to state 362
    empty                          shift and go to state 295

state 335

    (49) variable_3 -> L_S_BRACKET . add_floor exp R_S_BRACKET remove_floor
    (139) add_floor -> . empty
    (181) empty -> .

    LPAR            reduce using rule 181 (empty -> .)
    ID              reduce using rule 181 (empty -> .)
    CTE_I           reduce using rule 181 (empty -> .)
    CTE_F           reduce using rule 181 (empty -> .)

    add_floor                      shift and go to state 363
    empty                          shift and go to state 149

state 336

    (47) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .

    EQUAL           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    RPAR            reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    TIMES           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    DIVIDE          reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    PLUS            reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    MINUS           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    LESS_EQUAL      reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    LESS            reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    GREATER_EQUAL   reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    GREATER         reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    COMPARE         reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    NOT_EQUAL       reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    AND             reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    OR              reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    COMMA           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    SEMICOLON       reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    R_S_BRACKET     reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    TO              reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)


state 337

    (50) variable_3 -> empty .

    EQUAL           reduce using rule 50 (variable_3 -> empty .)
    RPAR            reduce using rule 50 (variable_3 -> empty .)
    TIMES           reduce using rule 50 (variable_3 -> empty .)
    DIVIDE          reduce using rule 50 (variable_3 -> empty .)
    PLUS            reduce using rule 50 (variable_3 -> empty .)
    MINUS           reduce using rule 50 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 50 (variable_3 -> empty .)
    LESS            reduce using rule 50 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 50 (variable_3 -> empty .)
    GREATER         reduce using rule 50 (variable_3 -> empty .)
    COMPARE         reduce using rule 50 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 50 (variable_3 -> empty .)
    AND             reduce using rule 50 (variable_3 -> empty .)
    OR              reduce using rule 50 (variable_3 -> empty .)
    COMMA           reduce using rule 50 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 50 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 50 (variable_3 -> empty .)
    TO              reduce using rule 50 (variable_3 -> empty .)


state 338

    (133) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 133 (f -> LPAR add_floor exp RPAR remove_floor .)


state 339

    (112) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 112 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 112 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 112 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 112 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 112 (exp_2 -> OR add_operator exp .)


state 340

    (115) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 115 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 115 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 115 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 115 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 115 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 115 (t_exp_2 -> AND add_operator t_exp .)


state 341

    (126) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 126 (m_exp_2 -> PLUS add_operator m_exp .)


state 342

    (127) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 127 (m_exp_2 -> MINUS add_operator m_exp .)


state 343

    (130) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 130 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 130 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 130 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 130 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 130 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 130 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 130 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 130 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 130 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 130 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 130 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 130 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 130 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 130 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 130 (t_2 -> TIMES add_operator t .)


state 344

    (131) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 131 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 131 (t_2 -> DIVIDE add_operator t .)


state 345

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (88) if_2 -> . estatuto if_2
    (89) if_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 364
    if_2                           shift and go to state 365
    empty                          shift and go to state 366
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 346

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 367


state 347

    (99) for_point_2 -> empty .

    TO              reduce using rule 99 (for_point_2 -> empty .)


state 348

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (181) empty -> .
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 368
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    empty                          shift and go to state 100
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 349

    (174) linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .

    ID              reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    READ            reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    WRITE           reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    IF              reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    FOR             reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    WHILE           reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    RETURN          reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 174 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)


state 350

    (176) box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .

    ID              reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    READ            reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    WRITE           reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    IF              reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    FOR             reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    WHILE           reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    RETURN          reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 176 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)


state 351

    (178) histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .

    ID              reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    READ            reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    WRITE           reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    IF              reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    FOR             reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    WHILE           reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    RETURN          reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 178 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)


state 352

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s . add_quad_readCSV RPAR SEMICOLON
    (167) add_quad_readCSV -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    add_quad_readCSV               shift and go to state 369
    empty                          shift and go to state 370

state 353

    (168) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean . RPAR SEMICOLON

    RPAR            shift and go to state 371


state 354

    (169) add_quad_mean -> empty .

    RPAR            reduce using rule 169 (add_quad_mean -> empty .)


state 355

    (170) mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode . RPAR SEMICOLON

    RPAR            shift and go to state 372


state 356

    (171) add_quad_mode -> empty .

    RPAR            reduce using rule 171 (add_quad_mode -> empty .)


state 357

    (172) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median . RPAR SEMICOLON

    RPAR            shift and go to state 373


state 358

    (173) add_quad_median -> empty .

    RPAR            reduce using rule 173 (add_quad_median -> empty .)


state 359

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR . remove_floor SEMICOLON gosub add_temp
    (140) remove_floor -> . empty
    (181) empty -> .

    SEMICOLON       reduce using rule 181 (empty -> .)

    remove_floor                   shift and go to state 374
    empty                          shift and go to state 297

state 360

    (67) llamada_3 -> COMMA exp . verify_parameter llamada_3
    (76) verify_parameter -> . empty
    (181) empty -> .

    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)

    verify_parameter               shift and go to state 375
    empty                          shift and go to state 295

state 361

    (69) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor . SEMICOLON gosub

    SEMICOLON       shift and go to state 376


state 362

    (72) llamada_void_3 -> COMMA exp verify_parameter . llamada_void_3
    (72) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (73) llamada_void_3 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 292
    RPAR            reduce using rule 181 (empty -> .)

    llamada_void_3                 shift and go to state 377
    empty                          shift and go to state 293

state 363

    (49) variable_3 -> L_S_BRACKET add_floor . exp R_S_BRACKET remove_floor
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 378
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 364

    (88) if_2 -> estatuto . if_2
    (88) if_2 -> . estatuto if_2
    (89) if_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 364
    if_2                           shift and go to state 379
    empty                          shift and go to state 366
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 365

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 380


state 366

    (89) if_2 -> empty .
    (110) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 89 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 89 (if_2 -> empty .)
    ID              reduce using rule 110 (func_extra -> empty .)
    READ            reduce using rule 110 (func_extra -> empty .)
    WRITE           reduce using rule 110 (func_extra -> empty .)
    IF              reduce using rule 110 (func_extra -> empty .)
    FOR             reduce using rule 110 (func_extra -> empty .)
    WHILE           reduce using rule 110 (func_extra -> empty .)
    RETURN          reduce using rule 110 (func_extra -> empty .)
    LINEAR_REG      reduce using rule 110 (func_extra -> empty .)
    BOX_PLOT        reduce using rule 110 (func_extra -> empty .)
    HISTOGRAM       reduce using rule 110 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 110 (func_extra -> empty .) ]


state 367

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (111) exp -> . t_exp add_operator_4 exp_2
    (114) t_exp -> . g_exp add_operator_4 t_exp_2
    (117) g_exp -> . m_exp g_exp_2 add_operator_3
    (125) m_exp -> . t add_operator_2 m_exp_2
    (129) t -> . f add_operator_1 t_2
    (133) f -> . LPAR add_floor exp RPAR remove_floor
    (134) f -> . variable
    (135) f -> . llamada
    (136) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (137) f_2 -> . CTE_I add_constant_i
    (138) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 152
    ID              shift and go to state 164
    CTE_I           shift and go to state 165
    CTE_F           shift and go to state 166

    exp                            shift and go to state 381
    t_exp                          shift and go to state 156
    g_exp                          shift and go to state 157
    m_exp                          shift and go to state 158
    t                              shift and go to state 159
    f                              shift and go to state 160
    variable                       shift and go to state 161
    llamada                        shift and go to state 162
    f_2                            shift and go to state 163

state 368

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (103) while_l_2 -> . estatuto while_l_2
    (104) while_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 382
    while_l_2                      shift and go to state 383
    empty                          shift and go to state 384
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 369

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV . RPAR SEMICOLON

    RPAR            shift and go to state 385


state 370

    (167) add_quad_readCSV -> empty .

    RPAR            reduce using rule 167 (add_quad_readCSV -> empty .)


state 371

    (168) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR . SEMICOLON

    SEMICOLON       shift and go to state 386


state 372

    (170) mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR . SEMICOLON

    SEMICOLON       shift and go to state 387


state 373

    (172) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR . SEMICOLON

    SEMICOLON       shift and go to state 388


state 374

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor . SEMICOLON gosub add_temp

    SEMICOLON       shift and go to state 389


state 375

    (67) llamada_3 -> COMMA exp verify_parameter . llamada_3
    (67) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (68) llamada_3 -> . empty
    (181) empty -> .

    COMMA           shift and go to state 330
    RPAR            reduce using rule 181 (empty -> .)

    llamada_3                      shift and go to state 390
    empty                          shift and go to state 331

state 376

    (69) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON . gosub
    (77) gosub -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    gosub                          shift and go to state 391
    empty                          shift and go to state 392

state 377

    (72) llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .

    RPAR            reduce using rule 72 (llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .)


state 378

    (49) variable_3 -> L_S_BRACKET add_floor exp . R_S_BRACKET remove_floor

    R_S_BRACKET     shift and go to state 393


state 379

    (88) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 88 (if_2 -> estatuto if_2 .)


state 380

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (90) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (91) if_3 -> . empty
    (181) empty -> .

    ELSE            shift and go to state 395
    SEMICOLON       reduce using rule 181 (empty -> .)

    if_3                           shift and go to state 394
    empty                          shift and go to state 396

state 381

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) for_point_3 -> . empty
    (181) empty -> .

    RPAR            reduce using rule 181 (empty -> .)

    for_point_3                    shift and go to state 397
    empty                          shift and go to state 398

state 382

    (103) while_l_2 -> estatuto . while_l_2
    (103) while_l_2 -> . estatuto while_l_2
    (104) while_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 382
    while_l_2                      shift and go to state 399
    empty                          shift and go to state 384
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 383

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 400


state 384

    (104) while_l_2 -> empty .
    (110) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 104 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 104 (while_l_2 -> empty .)
    ID              reduce using rule 110 (func_extra -> empty .)
    READ            reduce using rule 110 (func_extra -> empty .)
    WRITE           reduce using rule 110 (func_extra -> empty .)
    IF              reduce using rule 110 (func_extra -> empty .)
    FOR             reduce using rule 110 (func_extra -> empty .)
    WHILE           reduce using rule 110 (func_extra -> empty .)
    RETURN          reduce using rule 110 (func_extra -> empty .)
    LINEAR_REG      reduce using rule 110 (func_extra -> empty .)
    BOX_PLOT        reduce using rule 110 (func_extra -> empty .)
    HISTOGRAM       reduce using rule 110 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 110 (func_extra -> empty .) ]


state 385

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR . SEMICOLON

    SEMICOLON       shift and go to state 401


state 386

    (168) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .

    ID              reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    READ            reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    WRITE           reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    IF              reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    FOR             reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    WHILE           reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    RETURN          reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 168 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)


state 387

    (170) mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .

    ID              reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    READ            reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    WRITE           reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    IF              reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    FOR             reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    WHILE           reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    RETURN          reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 170 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)


state 388

    (172) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .

    ID              reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    READ            reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    WRITE           reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    IF              reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    FOR             reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    WHILE           reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    RETURN          reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 172 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)


state 389

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON . gosub add_temp
    (77) gosub -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    gosub                          shift and go to state 402
    empty                          shift and go to state 392

state 390

    (67) llamada_3 -> COMMA exp verify_parameter llamada_3 .

    RPAR            reduce using rule 67 (llamada_3 -> COMMA exp verify_parameter llamada_3 .)


state 391

    (69) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .

    ID              reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    READ            reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    WRITE           reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    IF              reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    FOR             reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    WHILE           reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    RETURN          reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    LINEAR_REG      reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    BOX_PLOT        reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    HISTOGRAM       reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    R_C_BRACKET     reduce using rule 69 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)


state 392

    (77) gosub -> empty .

    ID              reduce using rule 77 (gosub -> empty .)
    READ            reduce using rule 77 (gosub -> empty .)
    WRITE           reduce using rule 77 (gosub -> empty .)
    IF              reduce using rule 77 (gosub -> empty .)
    FOR             reduce using rule 77 (gosub -> empty .)
    WHILE           reduce using rule 77 (gosub -> empty .)
    RETURN          reduce using rule 77 (gosub -> empty .)
    LINEAR_REG      reduce using rule 77 (gosub -> empty .)
    BOX_PLOT        reduce using rule 77 (gosub -> empty .)
    HISTOGRAM       reduce using rule 77 (gosub -> empty .)
    R_C_BRACKET     reduce using rule 77 (gosub -> empty .)
    TIMES           reduce using rule 77 (gosub -> empty .)
    DIVIDE          reduce using rule 77 (gosub -> empty .)
    PLUS            reduce using rule 77 (gosub -> empty .)
    MINUS           reduce using rule 77 (gosub -> empty .)
    LESS_EQUAL      reduce using rule 77 (gosub -> empty .)
    LESS            reduce using rule 77 (gosub -> empty .)
    GREATER_EQUAL   reduce using rule 77 (gosub -> empty .)
    GREATER         reduce using rule 77 (gosub -> empty .)
    COMPARE         reduce using rule 77 (gosub -> empty .)
    NOT_EQUAL       reduce using rule 77 (gosub -> empty .)
    AND             reduce using rule 77 (gosub -> empty .)
    OR              reduce using rule 77 (gosub -> empty .)
    COMMA           reduce using rule 77 (gosub -> empty .)
    RPAR            reduce using rule 77 (gosub -> empty .)
    SEMICOLON       reduce using rule 77 (gosub -> empty .)
    R_S_BRACKET     reduce using rule 77 (gosub -> empty .)
    TO              reduce using rule 77 (gosub -> empty .)


state 393

    (49) variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET . remove_floor
    (140) remove_floor -> . empty
    (181) empty -> .

    EQUAL           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    remove_floor                   shift and go to state 403
    empty                          shift and go to state 297

state 394

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 404


state 395

    (90) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (94) if_point_3 -> . empty
    (181) empty -> .

    L_C_BRACKET     reduce using rule 181 (empty -> .)

    if_point_3                     shift and go to state 405
    empty                          shift and go to state 406

state 396

    (91) if_3 -> empty .

    SEMICOLON       reduce using rule 91 (if_3 -> empty .)


state 397

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 407


state 398

    (100) for_point_3 -> empty .

    RPAR            reduce using rule 100 (for_point_3 -> empty .)


state 399

    (103) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 103 (while_l_2 -> estatuto while_l_2 .)


state 400

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 408


state 401

    (166) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .

    ID              reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    READ            reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    WRITE           reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    IF              reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    FOR             reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    WHILE           reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    RETURN          reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 166 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)


state 402

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub . add_temp
    (78) add_temp -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    TIMES           reduce using rule 181 (empty -> .)
    DIVIDE          reduce using rule 181 (empty -> .)
    PLUS            reduce using rule 181 (empty -> .)
    MINUS           reduce using rule 181 (empty -> .)
    LESS_EQUAL      reduce using rule 181 (empty -> .)
    LESS            reduce using rule 181 (empty -> .)
    GREATER_EQUAL   reduce using rule 181 (empty -> .)
    GREATER         reduce using rule 181 (empty -> .)
    COMPARE         reduce using rule 181 (empty -> .)
    NOT_EQUAL       reduce using rule 181 (empty -> .)
    AND             reduce using rule 181 (empty -> .)
    OR              reduce using rule 181 (empty -> .)
    COMMA           reduce using rule 181 (empty -> .)
    RPAR            reduce using rule 181 (empty -> .)
    SEMICOLON       reduce using rule 181 (empty -> .)
    R_S_BRACKET     reduce using rule 181 (empty -> .)
    TO              reduce using rule 181 (empty -> .)

    add_temp                       shift and go to state 409
    empty                          shift and go to state 410

state 403

    (49) variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .

    EQUAL           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    RPAR            reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    TIMES           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    DIVIDE          reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    PLUS            reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    MINUS           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    LESS_EQUAL      reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    LESS            reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    GREATER_EQUAL   reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    GREATER         reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    COMPARE         reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    NOT_EQUAL       reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    AND             reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    OR              reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    COMMA           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    SEMICOLON       reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    R_S_BRACKET     reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    TO              reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)


state 404

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (93) if_point_2 -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    if_point_2                     shift and go to state 411
    empty                          shift and go to state 412

state 405

    (90) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 413


state 406

    (94) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 94 (if_point_3 -> empty .)


state 407

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 414


state 408

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (107) while_point_3 -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    while_point_3                  shift and go to state 415
    empty                          shift and go to state 416

state 409

    (64) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .

    ID              reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    READ            reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    WRITE           reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    IF              reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    FOR             reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    WHILE           reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    RETURN          reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    LINEAR_REG      reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    BOX_PLOT        reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    HISTOGRAM       reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    R_C_BRACKET     reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    TIMES           reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    DIVIDE          reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    PLUS            reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    MINUS           reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    LESS_EQUAL      reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    LESS            reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    GREATER_EQUAL   reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    GREATER         reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    COMPARE         reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    NOT_EQUAL       reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    AND             reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    OR              reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    COMMA           reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    RPAR            reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    SEMICOLON       reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    R_S_BRACKET     reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    TO              reduce using rule 64 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)


state 410

    (78) add_temp -> empty .

    ID              reduce using rule 78 (add_temp -> empty .)
    READ            reduce using rule 78 (add_temp -> empty .)
    WRITE           reduce using rule 78 (add_temp -> empty .)
    IF              reduce using rule 78 (add_temp -> empty .)
    FOR             reduce using rule 78 (add_temp -> empty .)
    WHILE           reduce using rule 78 (add_temp -> empty .)
    RETURN          reduce using rule 78 (add_temp -> empty .)
    LINEAR_REG      reduce using rule 78 (add_temp -> empty .)
    BOX_PLOT        reduce using rule 78 (add_temp -> empty .)
    HISTOGRAM       reduce using rule 78 (add_temp -> empty .)
    R_C_BRACKET     reduce using rule 78 (add_temp -> empty .)
    TIMES           reduce using rule 78 (add_temp -> empty .)
    DIVIDE          reduce using rule 78 (add_temp -> empty .)
    PLUS            reduce using rule 78 (add_temp -> empty .)
    MINUS           reduce using rule 78 (add_temp -> empty .)
    LESS_EQUAL      reduce using rule 78 (add_temp -> empty .)
    LESS            reduce using rule 78 (add_temp -> empty .)
    GREATER_EQUAL   reduce using rule 78 (add_temp -> empty .)
    GREATER         reduce using rule 78 (add_temp -> empty .)
    COMPARE         reduce using rule 78 (add_temp -> empty .)
    NOT_EQUAL       reduce using rule 78 (add_temp -> empty .)
    AND             reduce using rule 78 (add_temp -> empty .)
    OR              reduce using rule 78 (add_temp -> empty .)
    COMMA           reduce using rule 78 (add_temp -> empty .)
    RPAR            reduce using rule 78 (add_temp -> empty .)
    SEMICOLON       reduce using rule 78 (add_temp -> empty .)
    R_S_BRACKET     reduce using rule 78 (add_temp -> empty .)
    TO              reduce using rule 78 (add_temp -> empty .)


state 411

    (87) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    LINEAR_REG      reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    BOX_PLOT        reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    HISTOGRAM       reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 87 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 412

    (93) if_point_2 -> empty .

    ID              reduce using rule 93 (if_point_2 -> empty .)
    READ            reduce using rule 93 (if_point_2 -> empty .)
    WRITE           reduce using rule 93 (if_point_2 -> empty .)
    IF              reduce using rule 93 (if_point_2 -> empty .)
    FOR             reduce using rule 93 (if_point_2 -> empty .)
    WHILE           reduce using rule 93 (if_point_2 -> empty .)
    RETURN          reduce using rule 93 (if_point_2 -> empty .)
    LINEAR_REG      reduce using rule 93 (if_point_2 -> empty .)
    BOX_PLOT        reduce using rule 93 (if_point_2 -> empty .)
    HISTOGRAM       reduce using rule 93 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 93 (if_point_2 -> empty .)


state 413

    (90) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (181) empty -> .
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 417
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    empty                          shift and go to state 100
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 414

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (181) empty -> .
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 418
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    empty                          shift and go to state 100
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 415

    (102) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    LINEAR_REG      reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    BOX_PLOT        reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    HISTOGRAM       reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 102 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 416

    (107) while_point_3 -> empty .

    ID              reduce using rule 107 (while_point_3 -> empty .)
    READ            reduce using rule 107 (while_point_3 -> empty .)
    WRITE           reduce using rule 107 (while_point_3 -> empty .)
    IF              reduce using rule 107 (while_point_3 -> empty .)
    FOR             reduce using rule 107 (while_point_3 -> empty .)
    WHILE           reduce using rule 107 (while_point_3 -> empty .)
    RETURN          reduce using rule 107 (while_point_3 -> empty .)
    LINEAR_REG      reduce using rule 107 (while_point_3 -> empty .)
    BOX_PLOT        reduce using rule 107 (while_point_3 -> empty .)
    HISTOGRAM       reduce using rule 107 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 107 (while_point_3 -> empty .)


state 417

    (90) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (88) if_2 -> . estatuto if_2
    (89) if_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 364
    if_2                           shift and go to state 419
    empty                          shift and go to state 366
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 418

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (96) for_l_2 -> . estatuto for_l_2
    (97) for_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 420
    for_l_2                        shift and go to state 421
    empty                          shift and go to state 422
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 419

    (90) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 423


state 420

    (96) for_l_2 -> estatuto . for_l_2
    (96) for_l_2 -> . estatuto for_l_2
    (97) for_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) estatuto -> . funciones_especiales
    (181) empty -> .
    (62) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (64) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (69) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (79) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (81) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (87) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (95) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (102) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (110) func_extra -> . empty
    (158) funciones_especiales -> . read_csv
    (159) funciones_especiales -> . mean_func
    (160) funciones_especiales -> . mode_func
    (161) funciones_especiales -> . median_func
    (162) funciones_especiales -> . linear_reg_func
    (163) funciones_especiales -> . box_plt
    (164) funciones_especiales -> . histogram_plt
    (45) variable -> . ID variable_2 variable_point
    (166) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (168) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (170) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (172) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (174) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (176) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (178) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LINEAR_REG resolved as shift
  ! shift/reduce conflict for BOX_PLOT resolved as shift
  ! shift/reduce conflict for HISTOGRAM resolved as shift
    R_C_BRACKET     reduce using rule 181 (empty -> .)
    ID              shift and go to state 93
    READ            shift and go to state 94
    WRITE           shift and go to state 95
    IF              shift and go to state 96
    FOR             shift and go to state 97
    WHILE           shift and go to state 98
    RETURN          shift and go to state 99
    LINEAR_REG      shift and go to state 108
    BOX_PLOT        shift and go to state 109
    HISTOGRAM       shift and go to state 110

  ! ID              [ reduce using rule 181 (empty -> .) ]
  ! READ            [ reduce using rule 181 (empty -> .) ]
  ! WRITE           [ reduce using rule 181 (empty -> .) ]
  ! IF              [ reduce using rule 181 (empty -> .) ]
  ! FOR             [ reduce using rule 181 (empty -> .) ]
  ! WHILE           [ reduce using rule 181 (empty -> .) ]
  ! RETURN          [ reduce using rule 181 (empty -> .) ]
  ! LINEAR_REG      [ reduce using rule 181 (empty -> .) ]
  ! BOX_PLOT        [ reduce using rule 181 (empty -> .) ]
  ! HISTOGRAM       [ reduce using rule 181 (empty -> .) ]

    estatuto                       shift and go to state 420
    for_l_2                        shift and go to state 424
    empty                          shift and go to state 422
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    funciones_especiales           shift and go to state 91
    variable                       shift and go to state 92
    read_csv                       shift and go to state 101
    mean_func                      shift and go to state 102
    mode_func                      shift and go to state 103
    median_func                    shift and go to state 104
    linear_reg_func                shift and go to state 105
    box_plt                        shift and go to state 106
    histogram_plt                  shift and go to state 107

state 421

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 425


state 422

    (97) for_l_2 -> empty .
    (110) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 97 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 97 (for_l_2 -> empty .)
    ID              reduce using rule 110 (func_extra -> empty .)
    READ            reduce using rule 110 (func_extra -> empty .)
    WRITE           reduce using rule 110 (func_extra -> empty .)
    IF              reduce using rule 110 (func_extra -> empty .)
    FOR             reduce using rule 110 (func_extra -> empty .)
    WHILE           reduce using rule 110 (func_extra -> empty .)
    RETURN          reduce using rule 110 (func_extra -> empty .)
    LINEAR_REG      reduce using rule 110 (func_extra -> empty .)
    BOX_PLOT        reduce using rule 110 (func_extra -> empty .)
    HISTOGRAM       reduce using rule 110 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 110 (func_extra -> empty .) ]


state 423

    (90) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 90 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 424

    (96) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 96 (for_l_2 -> estatuto for_l_2 .)


state 425

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 426


state 426

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (101) for_point_4 -> . empty
    (181) empty -> .

    ID              reduce using rule 181 (empty -> .)
    READ            reduce using rule 181 (empty -> .)
    WRITE           reduce using rule 181 (empty -> .)
    IF              reduce using rule 181 (empty -> .)
    FOR             reduce using rule 181 (empty -> .)
    WHILE           reduce using rule 181 (empty -> .)
    RETURN          reduce using rule 181 (empty -> .)
    LINEAR_REG      reduce using rule 181 (empty -> .)
    BOX_PLOT        reduce using rule 181 (empty -> .)
    HISTOGRAM       reduce using rule 181 (empty -> .)
    R_C_BRACKET     reduce using rule 181 (empty -> .)

    for_point_4                    shift and go to state 427
    empty                          shift and go to state 428

state 427

    (95) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    LINEAR_REG      reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    BOX_PLOT        reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    HISTOGRAM       reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 95 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 428

    (101) for_point_4 -> empty .

    ID              reduce using rule 101 (for_point_4 -> empty .)
    READ            reduce using rule 101 (for_point_4 -> empty .)
    WRITE           reduce using rule 101 (for_point_4 -> empty .)
    IF              reduce using rule 101 (for_point_4 -> empty .)
    FOR             reduce using rule 101 (for_point_4 -> empty .)
    WHILE           reduce using rule 101 (for_point_4 -> empty .)
    RETURN          reduce using rule 101 (for_point_4 -> empty .)
    LINEAR_REG      reduce using rule 101 (for_point_4 -> empty .)
    BOX_PLOT        reduce using rule 101 (for_point_4 -> empty .)
    HISTOGRAM       reduce using rule 101 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 101 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for READ in state 70 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 70 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 70 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 70 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 80 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 80 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 80 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for READ in state 117 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 117 resolved as shift
WARNING: shift/reduce conflict for FOR in state 117 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 117 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 117 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 117 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 117 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 117 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 314 resolved as shift
WARNING: shift/reduce conflict for READ in state 314 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 314 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 314 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 314 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 314 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 314 resolved as shift
WARNING: shift/reduce conflict for ID in state 345 resolved as shift
WARNING: shift/reduce conflict for READ in state 345 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 345 resolved as shift
WARNING: shift/reduce conflict for IF in state 345 resolved as shift
WARNING: shift/reduce conflict for FOR in state 345 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 345 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 345 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 345 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 345 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 345 resolved as shift
WARNING: shift/reduce conflict for ID in state 348 resolved as shift
WARNING: shift/reduce conflict for READ in state 348 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 348 resolved as shift
WARNING: shift/reduce conflict for IF in state 348 resolved as shift
WARNING: shift/reduce conflict for FOR in state 348 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 348 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 348 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 348 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 348 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 348 resolved as shift
WARNING: shift/reduce conflict for ID in state 364 resolved as shift
WARNING: shift/reduce conflict for READ in state 364 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 364 resolved as shift
WARNING: shift/reduce conflict for IF in state 364 resolved as shift
WARNING: shift/reduce conflict for FOR in state 364 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 364 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 364 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 364 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 364 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 364 resolved as shift
WARNING: shift/reduce conflict for ID in state 368 resolved as shift
WARNING: shift/reduce conflict for READ in state 368 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 368 resolved as shift
WARNING: shift/reduce conflict for IF in state 368 resolved as shift
WARNING: shift/reduce conflict for FOR in state 368 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 368 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 368 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 368 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 368 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 368 resolved as shift
WARNING: shift/reduce conflict for ID in state 382 resolved as shift
WARNING: shift/reduce conflict for READ in state 382 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 382 resolved as shift
WARNING: shift/reduce conflict for IF in state 382 resolved as shift
WARNING: shift/reduce conflict for FOR in state 382 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 382 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 382 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 382 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 382 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 382 resolved as shift
WARNING: shift/reduce conflict for ID in state 413 resolved as shift
WARNING: shift/reduce conflict for READ in state 413 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 413 resolved as shift
WARNING: shift/reduce conflict for IF in state 413 resolved as shift
WARNING: shift/reduce conflict for FOR in state 413 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 413 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 413 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 413 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 413 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 413 resolved as shift
WARNING: shift/reduce conflict for ID in state 414 resolved as shift
WARNING: shift/reduce conflict for READ in state 414 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 414 resolved as shift
WARNING: shift/reduce conflict for IF in state 414 resolved as shift
WARNING: shift/reduce conflict for FOR in state 414 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 414 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 414 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 414 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 414 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 414 resolved as shift
WARNING: shift/reduce conflict for ID in state 417 resolved as shift
WARNING: shift/reduce conflict for READ in state 417 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 417 resolved as shift
WARNING: shift/reduce conflict for IF in state 417 resolved as shift
WARNING: shift/reduce conflict for FOR in state 417 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 417 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 417 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 417 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 417 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 417 resolved as shift
WARNING: shift/reduce conflict for ID in state 418 resolved as shift
WARNING: shift/reduce conflict for READ in state 418 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 418 resolved as shift
WARNING: shift/reduce conflict for IF in state 418 resolved as shift
WARNING: shift/reduce conflict for FOR in state 418 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 418 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 418 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 418 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 418 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 418 resolved as shift
WARNING: shift/reduce conflict for ID in state 420 resolved as shift
WARNING: shift/reduce conflict for READ in state 420 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 420 resolved as shift
WARNING: shift/reduce conflict for IF in state 420 resolved as shift
WARNING: shift/reduce conflict for FOR in state 420 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 420 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 420 resolved as shift
WARNING: shift/reduce conflict for LINEAR_REG in state 420 resolved as shift
WARNING: shift/reduce conflict for BOX_PLOT in state 420 resolved as shift
WARNING: shift/reduce conflict for HISTOGRAM in state 420 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 50
WARNING: reduce/reduce conflict in state 119 resolved using rule (body_3 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 119
WARNING: reduce/reduce conflict in state 366 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 366
WARNING: reduce/reduce conflict in state 384 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 384
WARNING: reduce/reduce conflict in state 422 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 422
WARNING: Rule (vars_6 -> empty) is never reduced
