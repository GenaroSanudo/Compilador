Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    body -> vars func_agrega_v estatuto body_2
Rule 11    body_2 -> estatuto body_2
Rule 12    body_2 -> empty
Rule 13    tipo_simple -> INT
Rule 14    tipo_simple -> FLOAT
Rule 15    tipo_simple -> CHAR
Rule 16    tipo_comp -> DATAFRAME
Rule 17    vars -> VAR vars_2 SEMICOLON vars_8
Rule 18    vars_2 -> tipo_comp vars_3
Rule 19    vars_2 -> tipo_simple vars_4
Rule 20    vars_3 -> ID vars_5
Rule 21    vars_4 -> vars_3
Rule 22    vars_4 -> ID vars_6
Rule 23    vars_5 -> COMMA vars_3
Rule 24    vars_5 -> empty
Rule 25    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 26    vars_6 -> empty
Rule 27    punto_id_especial -> empty
Rule 28    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 29    vars_7 -> var_array
Rule 30    var_array -> empty
Rule 31    var_mat -> empty
Rule 32    vars_8 -> vars
Rule 33    vars_8 -> empty
Rule 34    param -> tipo_simple ID punto_param param_2
Rule 35    param -> empty
Rule 36    param_2 -> COMMA param
Rule 37    param_2 -> empty
Rule 38    punto_param -> empty
Rule 39    variable -> ID variable_2 variable_point
Rule 40    variable_point -> empty
Rule 41    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 42    variable_2 -> empty
Rule 43    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 44    variable_3 -> empty
Rule 45    estatuto -> asigna
Rule 46    estatuto -> llamada
Rule 47    estatuto -> read
Rule 48    estatuto -> write
Rule 49    estatuto -> if_1
Rule 50    estatuto -> for_l
Rule 51    estatuto -> while_l
Rule 52    estatuto -> func_extra
Rule 53    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 54    asigna_point -> empty
Rule 55    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 56    llamada_2 -> COMMA exp llamada_2
Rule 57    llamada_2 -> empty
Rule 58    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 59    read_point -> empty
Rule 60    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 61    write_2 -> exp
Rule 62    write_2 -> CTE_S
Rule 63    write_3 -> COMMA write_2 write_3
Rule 64    write_3 -> empty
Rule 65    if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
Rule 66    if_2 -> estatuto if_2
Rule 67    if_2 -> empty
Rule 68    if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 69    for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
Rule 70    for_l_2 -> estatuto for_l_2
Rule 71    for_l_2 -> empty
Rule 72    while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
Rule 73    while_l_2 -> estatuto while_l_2
Rule 74    while_l_2 -> empty
Rule 75    func_extra -> empty
Rule 76    exp -> t_exp add_operator_4 exp_2
Rule 77    exp_2 -> OR add_operator exp
Rule 78    exp_2 -> empty
Rule 79    t_exp -> g_exp add_operator_4 t_exp_2
Rule 80    t_exp_2 -> AND add_operator t_exp
Rule 81    t_exp_2 -> empty
Rule 82    g_exp -> m_exp g_exp_2 add_operator_3
Rule 83    g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 84    g_exp_2 -> LESS add_operator m_exp
Rule 85    g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 86    g_exp_2 -> GREATER add_operator m_exp
Rule 87    g_exp_2 -> COMPARE add_operator m_exp
Rule 88    g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 89    g_exp_2 -> empty
Rule 90    m_exp -> t add_operator_2 m_exp_2
Rule 91    m_exp_2 -> PLUS add_operator m_exp
Rule 92    m_exp_2 -> MINUS add_operator m_exp
Rule 93    m_exp_2 -> empty
Rule 94    t -> f add_operator_1 t_2
Rule 95    t_2 -> TIMES add_operator t
Rule 96    t_2 -> DIVIDE add_operator t
Rule 97    t_2 -> empty
Rule 98    f -> LPAR add_floor exp RPAR remove_floor
Rule 99    f -> variable
Rule 100   f -> llamada
Rule 101   f -> f_2
Rule 102   f_2 -> CTE_I add_constant_i
Rule 103   f_2 -> CTE_F add_constant_f
Rule 104   add_floor -> empty
Rule 105   remove_floor -> empty
Rule 106   add_operator -> empty
Rule 107   add_operator_1 -> empty
Rule 108   add_operator_2 -> empty
Rule 109   add_operator_3 -> empty
Rule 110   add_operator_4 -> empty
Rule 111   add_constant_i -> empty
Rule 112   add_constant_f -> empty
Rule 113   function -> FUNC function_2 SEMICOLON function_3
Rule 114   function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
Rule 115   function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET
Rule 116   function_3 -> function
Rule 117   function_3 -> empty
Rule 118   function_punto1 -> empty
Rule 119   function_punto2 -> empty
Rule 120   func_agrega_v -> empty
Rule 121   empty -> <empty>

Terminals, with rules where they appear

AND                  : 80
CHAR                 : 15
COLON                : 1
COMMA                : 23 36 56 63
COMPARE              : 87
CTE_F                : 103
CTE_I                : 25 28 102
CTE_S                : 62
DATAFRAME            : 16
DIVIDE               : 96
ELSE                 : 68
EQUAL                : 53 69
FLOAT                : 14
FOR                  : 69
FUNC                 : 113
GREATER              : 86
GREATER_EQUAL        : 85
ID                   : 1 20 22 34 39 55 69 114 115
IF                   : 65
INT                  : 13
LESS                 : 84
LESS_EQUAL           : 83
LPAR                 : 9 55 58 60 65 69 72 98 114 114 115
L_C_BRACKET          : 9 65 68 69 72 114 115
L_S_BRACKET          : 25 28 41 43
MAIN                 : 9
MINUS                : 92
NOT_EQUAL            : 88
OR                   : 77
PLUS                 : 91
PROGRAM              : 1
READ                 : 58
RETURN               : 114
RPAR                 : 9 55 58 60 65 69 69 72 98 114 114 115
R_C_BRACKET          : 9 65 68 69 72 114 115
R_S_BRACKET          : 25 28 41 43
SEMICOLON            : 9 17 53 55 58 60 65 69 72 113 114
STRING               : 
TIMES                : 95
TO                   : 69
VAR                  : 17
VOID                 : 115
WHILE                : 72
WRITE                : 60
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 103
add_constant_i       : 102
add_floor            : 98
add_operator         : 53 77 80 83 84 85 86 87 88 91 92 95 96
add_operator_1       : 94
add_operator_2       : 90
add_operator_3       : 82
add_operator_4       : 76 79
asigna               : 45
asigna_point         : 53
body                 : 9 114 115
body_2               : 10 11
empty                : 2 4 6 8 12 24 26 27 30 31 33 35 37 38 40 42 44 54 57 59 64 67 71 74 75 78 81 89 93 97 104 105 106 107 108 109 110 111 112 117 118 119 120
estatuto             : 10 11 65 66 68 69 70 72 73
exp                  : 41 43 53 55 56 61 65 69 69 72 77 98 114
exp_2                : 76
f                    : 94
f_2                  : 101
for_l                : 50
for_l_2              : 69 70
func_agrega_v        : 10
func_extra           : 52
function             : 7 116
function_2           : 113
function_3           : 113
function_punto1      : 114
function_punto2      : 115
g_exp                : 79
g_exp_2              : 82
if_1                 : 49
if_2                 : 65 66 68
if_3                 : 65
llamada              : 46 100
llamada_2            : 55 56
m_exp                : 82 83 84 85 86 87 88 91 92
m_exp_2              : 90
main                 : 1
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 36 114 115
param_2              : 34
program              : 0
program_point        : 1
punto_id_especial    : 25
punto_param          : 34
read                 : 47
read_point           : 58
remove_floor         : 98
t                    : 90 95 96
t_2                  : 94
t_exp                : 76 80
t_exp_2              : 79
tipo_comp            : 18
tipo_simple          : 19 34 114
var_array            : 29
var_mat              : 28
variable             : 53 58 99
variable_2           : 39
variable_3           : 41
variable_point       : 39
vars                 : 5 10 32
vars_2               : 17
vars_3               : 18 21 23
vars_4               : 19
vars_5               : 20
vars_6               : 22
vars_7               : 25
vars_8               : 17
while_l              : 51
while_l_2            : 72 73
write                : 48
write_2              : 60 63
write_3              : 60 63

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (17) vars -> . VAR vars_2 SEMICOLON vars_8
    (121) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (121) empty -> .

    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (17) vars -> VAR . vars_2 SEMICOLON vars_8
    (18) vars_2 -> . tipo_comp vars_3
    (19) vars_2 -> . tipo_simple vars_4
    (16) tipo_comp -> . DATAFRAME
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 23


state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (113) function -> . FUNC function_2 SEMICOLON function_3
    (121) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 121 (empty -> .)

    modules_3                      shift and go to state 24
    function                       shift and go to state 25
    empty                          shift and go to state 26

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (17) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 28


state 17

    (18) vars_2 -> tipo_comp . vars_3
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 29

state 18

    (19) vars_2 -> tipo_simple . vars_4
    (21) vars_4 -> . vars_3
    (22) vars_4 -> . ID vars_6
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 33

    vars_4                         shift and go to state 31
    vars_3                         shift and go to state 32

state 19

    (16) tipo_comp -> DATAFRAME .

    ID              reduce using rule 16 (tipo_comp -> DATAFRAME .)


state 20

    (13) tipo_simple -> INT .

    ID              reduce using rule 13 (tipo_simple -> INT .)


state 21

    (14) tipo_simple -> FLOAT .

    ID              reduce using rule 14 (tipo_simple -> FLOAT .)


state 22

    (15) tipo_simple -> CHAR .

    ID              reduce using rule 15 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 34


state 24

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 25

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 26

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 27

    (113) function -> FUNC . function_2 SEMICOLON function_3
    (114) function_2 -> . tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (115) function_2 -> . VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    VOID            shift and go to state 37
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 35
    tipo_simple                    shift and go to state 36

state 28

    (17) vars -> VAR vars_2 SEMICOLON . vars_8
    (32) vars_8 -> . vars
    (33) vars_8 -> . empty
    (17) vars -> . VAR vars_2 SEMICOLON vars_8
    (121) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 121 (empty -> .)
    MAIN            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    FOR             reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    vars_8                         shift and go to state 38
    vars                           shift and go to state 39
    empty                          shift and go to state 40

state 29

    (18) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 18 (vars_2 -> tipo_comp vars_3 .)


state 30

    (20) vars_3 -> ID . vars_5
    (23) vars_5 -> . COMMA vars_3
    (24) vars_5 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 121 (empty -> .)

    vars_5                         shift and go to state 41
    empty                          shift and go to state 43

state 31

    (19) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_simple vars_4 .)


state 32

    (21) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 21 (vars_4 -> vars_3 .)


state 33

    (22) vars_4 -> ID . vars_6
    (20) vars_3 -> ID . vars_5
    (25) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (26) vars_6 -> . empty
    (23) vars_5 -> . COMMA vars_3
    (24) vars_5 -> . empty
    (27) punto_id_especial -> . empty
    (121) empty -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 121 (empty -> .)
    L_S_BRACKET     reduce using rule 121 (empty -> .)

    vars_6                         shift and go to state 44
    vars_5                         shift and go to state 41
    punto_id_especial              shift and go to state 45
    empty                          shift and go to state 46

state 34

    (9) main -> MAIN LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 47


state 35

    (113) function -> FUNC function_2 . SEMICOLON function_3

    SEMICOLON       shift and go to state 48


state 36

    (114) function_2 -> tipo_simple . ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    ID              shift and go to state 49


state 37

    (115) function_2 -> VOID . ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET

    ID              shift and go to state 50


state 38

    (17) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 39

    (32) vars_8 -> vars .

    FUNC            reduce using rule 32 (vars_8 -> vars .)
    MAIN            reduce using rule 32 (vars_8 -> vars .)
    ID              reduce using rule 32 (vars_8 -> vars .)
    READ            reduce using rule 32 (vars_8 -> vars .)
    WRITE           reduce using rule 32 (vars_8 -> vars .)
    IF              reduce using rule 32 (vars_8 -> vars .)
    FOR             reduce using rule 32 (vars_8 -> vars .)
    WHILE           reduce using rule 32 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 32 (vars_8 -> vars .)
    RETURN          reduce using rule 32 (vars_8 -> vars .)


state 40

    (33) vars_8 -> empty .

    FUNC            reduce using rule 33 (vars_8 -> empty .)
    MAIN            reduce using rule 33 (vars_8 -> empty .)
    ID              reduce using rule 33 (vars_8 -> empty .)
    READ            reduce using rule 33 (vars_8 -> empty .)
    WRITE           reduce using rule 33 (vars_8 -> empty .)
    IF              reduce using rule 33 (vars_8 -> empty .)
    FOR             reduce using rule 33 (vars_8 -> empty .)
    WHILE           reduce using rule 33 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> empty .)
    RETURN          reduce using rule 33 (vars_8 -> empty .)


state 41

    (20) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 20 (vars_3 -> ID vars_5 .)


state 42

    (23) vars_5 -> COMMA . vars_3
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 51

state 43

    (24) vars_5 -> empty .

    SEMICOLON       reduce using rule 24 (vars_5 -> empty .)


state 44

    (22) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 22 (vars_4 -> ID vars_6 .)


state 45

    (25) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 52


state 46

    (26) vars_6 -> empty .
    (24) vars_5 -> empty .
    (27) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 24 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 27 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 26 (vars_6 -> empty .) ]


state 47

    (9) main -> MAIN LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (10) body -> . vars func_agrega_v estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 53
    vars                           shift and go to state 54

state 48

    (113) function -> FUNC function_2 SEMICOLON . function_3
    (116) function_3 -> . function
    (117) function_3 -> . empty
    (113) function -> . FUNC function_2 SEMICOLON function_3
    (121) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 121 (empty -> .)

    function_3                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 49

    (114) function_2 -> tipo_simple ID . function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (118) function_punto1 -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 50

    (115) function_2 -> VOID ID . function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET
    (119) function_punto2 -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)

    function_punto2                shift and go to state 60
    empty                          shift and go to state 61

state 51

    (23) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 23 (vars_5 -> COMMA vars_3 .)


state 52

    (25) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 62


state 53

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 63


state 54

    (10) body -> vars . func_agrega_v estatuto body_2
    (120) func_agrega_v -> . empty
    (121) empty -> .

    ID              reduce using rule 121 (empty -> .)
    READ            reduce using rule 121 (empty -> .)
    WRITE           reduce using rule 121 (empty -> .)
    IF              reduce using rule 121 (empty -> .)
    FOR             reduce using rule 121 (empty -> .)
    WHILE           reduce using rule 121 (empty -> .)
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

    func_agrega_v                  shift and go to state 64
    empty                          shift and go to state 65

state 55

    (113) function -> FUNC function_2 SEMICOLON function_3 .

    MAIN            reduce using rule 113 (function -> FUNC function_2 SEMICOLON function_3 .)


state 56

    (116) function_3 -> function .

    MAIN            reduce using rule 116 (function_3 -> function .)


state 57

    (117) function_3 -> empty .

    MAIN            reduce using rule 117 (function_3 -> empty .)


state 58

    (114) function_2 -> tipo_simple ID function_punto1 . LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    LPAR            shift and go to state 66


state 59

    (118) function_punto1 -> empty .

    LPAR            reduce using rule 118 (function_punto1 -> empty .)


state 60

    (115) function_2 -> VOID ID function_punto2 . LPAR param RPAR L_C_BRACKET body R_C_BRACKET

    LPAR            shift and go to state 67


state 61

    (119) function_punto2 -> empty .

    LPAR            reduce using rule 119 (function_punto2 -> empty .)


state 62

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 68


state 63

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 69


state 64

    (10) body -> vars func_agrega_v . estatuto body_2
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point
    (121) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 70
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79
    empty                          shift and go to state 86

state 65

    (120) func_agrega_v -> empty .

    ID              reduce using rule 120 (func_agrega_v -> empty .)
    READ            reduce using rule 120 (func_agrega_v -> empty .)
    WRITE           reduce using rule 120 (func_agrega_v -> empty .)
    IF              reduce using rule 120 (func_agrega_v -> empty .)
    FOR             reduce using rule 120 (func_agrega_v -> empty .)
    WHILE           reduce using rule 120 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 120 (func_agrega_v -> empty .)
    RETURN          reduce using rule 120 (func_agrega_v -> empty .)


state 66

    (114) function_2 -> tipo_simple ID function_punto1 LPAR . param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (34) param -> . tipo_simple ID punto_param param_2
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (121) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 121 (empty -> .)

    tipo_simple                    shift and go to state 87
    param                          shift and go to state 88
    empty                          shift and go to state 89

state 67

    (115) function_2 -> VOID ID function_punto2 LPAR . param RPAR L_C_BRACKET body R_C_BRACKET
    (34) param -> . tipo_simple ID punto_param param_2
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (121) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 121 (empty -> .)

    param                          shift and go to state 90
    tipo_simple                    shift and go to state 87
    empty                          shift and go to state 89

state 68

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (28) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (29) vars_7 -> . var_array
    (30) var_array -> . empty
    (121) empty -> .

    L_S_BRACKET     shift and go to state 91
    SEMICOLON       reduce using rule 121 (empty -> .)

    vars_7                         shift and go to state 92
    var_array                      shift and go to state 93
    empty                          shift and go to state 94

state 69

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 70

    (10) body -> vars func_agrega_v estatuto . body_2
    (11) body_2 -> . estatuto body_2
    (12) body_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 95
    body_2                         shift and go to state 96
    empty                          shift and go to state 97
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 71

    (45) estatuto -> asigna .

    ID              reduce using rule 45 (estatuto -> asigna .)
    READ            reduce using rule 45 (estatuto -> asigna .)
    WRITE           reduce using rule 45 (estatuto -> asigna .)
    IF              reduce using rule 45 (estatuto -> asigna .)
    FOR             reduce using rule 45 (estatuto -> asigna .)
    WHILE           reduce using rule 45 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 45 (estatuto -> asigna .)
    RETURN          reduce using rule 45 (estatuto -> asigna .)


state 72

    (46) estatuto -> llamada .

    ID              reduce using rule 46 (estatuto -> llamada .)
    READ            reduce using rule 46 (estatuto -> llamada .)
    WRITE           reduce using rule 46 (estatuto -> llamada .)
    IF              reduce using rule 46 (estatuto -> llamada .)
    FOR             reduce using rule 46 (estatuto -> llamada .)
    WHILE           reduce using rule 46 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 46 (estatuto -> llamada .)
    RETURN          reduce using rule 46 (estatuto -> llamada .)


state 73

    (47) estatuto -> read .

    ID              reduce using rule 47 (estatuto -> read .)
    READ            reduce using rule 47 (estatuto -> read .)
    WRITE           reduce using rule 47 (estatuto -> read .)
    IF              reduce using rule 47 (estatuto -> read .)
    FOR             reduce using rule 47 (estatuto -> read .)
    WHILE           reduce using rule 47 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> read .)
    RETURN          reduce using rule 47 (estatuto -> read .)


state 74

    (48) estatuto -> write .

    ID              reduce using rule 48 (estatuto -> write .)
    READ            reduce using rule 48 (estatuto -> write .)
    WRITE           reduce using rule 48 (estatuto -> write .)
    IF              reduce using rule 48 (estatuto -> write .)
    FOR             reduce using rule 48 (estatuto -> write .)
    WHILE           reduce using rule 48 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> write .)
    RETURN          reduce using rule 48 (estatuto -> write .)


state 75

    (49) estatuto -> if_1 .

    ID              reduce using rule 49 (estatuto -> if_1 .)
    READ            reduce using rule 49 (estatuto -> if_1 .)
    WRITE           reduce using rule 49 (estatuto -> if_1 .)
    IF              reduce using rule 49 (estatuto -> if_1 .)
    FOR             reduce using rule 49 (estatuto -> if_1 .)
    WHILE           reduce using rule 49 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> if_1 .)
    RETURN          reduce using rule 49 (estatuto -> if_1 .)


state 76

    (50) estatuto -> for_l .

    ID              reduce using rule 50 (estatuto -> for_l .)
    READ            reduce using rule 50 (estatuto -> for_l .)
    WRITE           reduce using rule 50 (estatuto -> for_l .)
    IF              reduce using rule 50 (estatuto -> for_l .)
    FOR             reduce using rule 50 (estatuto -> for_l .)
    WHILE           reduce using rule 50 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> for_l .)
    RETURN          reduce using rule 50 (estatuto -> for_l .)


state 77

    (51) estatuto -> while_l .

    ID              reduce using rule 51 (estatuto -> while_l .)
    READ            reduce using rule 51 (estatuto -> while_l .)
    WRITE           reduce using rule 51 (estatuto -> while_l .)
    IF              reduce using rule 51 (estatuto -> while_l .)
    FOR             reduce using rule 51 (estatuto -> while_l .)
    WHILE           reduce using rule 51 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> while_l .)
    RETURN          reduce using rule 51 (estatuto -> while_l .)


state 78

    (52) estatuto -> func_extra .

    ID              reduce using rule 52 (estatuto -> func_extra .)
    READ            reduce using rule 52 (estatuto -> func_extra .)
    WRITE           reduce using rule 52 (estatuto -> func_extra .)
    IF              reduce using rule 52 (estatuto -> func_extra .)
    FOR             reduce using rule 52 (estatuto -> func_extra .)
    WHILE           reduce using rule 52 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> func_extra .)
    RETURN          reduce using rule 52 (estatuto -> func_extra .)


state 79

    (53) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 98


state 80

    (55) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (39) variable -> ID . variable_2 variable_point
    (41) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (42) variable_2 -> . empty
    (121) empty -> .

    LPAR            shift and go to state 99
    L_S_BRACKET     shift and go to state 101
    EQUAL           reduce using rule 121 (empty -> .)

    variable_2                     shift and go to state 100
    empty                          shift and go to state 102

state 81

    (58) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 103


state 82

    (60) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 104


state 83

    (65) if_1 -> IF . LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    LPAR            shift and go to state 105


state 84

    (69) for_l -> FOR . LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 106


state 85

    (72) while_l -> WHILE . LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 107


state 86

    (75) func_extra -> empty .

    ID              reduce using rule 75 (func_extra -> empty .)
    READ            reduce using rule 75 (func_extra -> empty .)
    WRITE           reduce using rule 75 (func_extra -> empty .)
    IF              reduce using rule 75 (func_extra -> empty .)
    FOR             reduce using rule 75 (func_extra -> empty .)
    WHILE           reduce using rule 75 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 75 (func_extra -> empty .)
    RETURN          reduce using rule 75 (func_extra -> empty .)


state 87

    (34) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 108


state 88

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param . RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    RPAR            shift and go to state 109


state 89

    (35) param -> empty .

    RPAR            reduce using rule 35 (param -> empty .)


state 90

    (115) function_2 -> VOID ID function_punto2 LPAR param . RPAR L_C_BRACKET body R_C_BRACKET

    RPAR            shift and go to state 110


state 91

    (28) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 111


state 92

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 25 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 93

    (29) vars_7 -> var_array .

    SEMICOLON       reduce using rule 29 (vars_7 -> var_array .)


state 94

    (30) var_array -> empty .

    SEMICOLON       reduce using rule 30 (var_array -> empty .)


state 95

    (11) body_2 -> estatuto . body_2
    (11) body_2 -> . estatuto body_2
    (12) body_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    RETURN          reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 95
    body_2                         shift and go to state 112
    empty                          shift and go to state 97
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 96

    (10) body -> vars func_agrega_v estatuto body_2 .

    R_C_BRACKET     reduce using rule 10 (body -> vars func_agrega_v estatuto body_2 .)
    RETURN          reduce using rule 10 (body -> vars func_agrega_v estatuto body_2 .)


state 97

    (12) body_2 -> empty .
    (75) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 12 (body_2 -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 12 (body_2 -> empty .)
    RETURN          reduce using rule 12 (body_2 -> empty .)
    ID              reduce using rule 75 (func_extra -> empty .)
    READ            reduce using rule 75 (func_extra -> empty .)
    WRITE           reduce using rule 75 (func_extra -> empty .)
    IF              reduce using rule 75 (func_extra -> empty .)
    FOR             reduce using rule 75 (func_extra -> empty .)
    WHILE           reduce using rule 75 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 75 (func_extra -> empty .) ]
  ! RETURN          [ reduce using rule 75 (func_extra -> empty .) ]


state 98

    (53) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 113
    empty                          shift and go to state 114

state 99

    (55) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 117
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 100

    (39) variable -> ID variable_2 . variable_point
    (40) variable_point -> . empty
    (121) empty -> .

    EQUAL           reduce using rule 121 (empty -> .)
    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    variable_point                 shift and go to state 128
    empty                          shift and go to state 129

state 101

    (41) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 130
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 102

    (42) variable_2 -> empty .

    EQUAL           reduce using rule 42 (variable_2 -> empty .)
    TIMES           reduce using rule 42 (variable_2 -> empty .)
    DIVIDE          reduce using rule 42 (variable_2 -> empty .)
    PLUS            reduce using rule 42 (variable_2 -> empty .)
    MINUS           reduce using rule 42 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 42 (variable_2 -> empty .)
    LESS            reduce using rule 42 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 42 (variable_2 -> empty .)
    GREATER         reduce using rule 42 (variable_2 -> empty .)
    COMPARE         reduce using rule 42 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 42 (variable_2 -> empty .)
    AND             reduce using rule 42 (variable_2 -> empty .)
    OR              reduce using rule 42 (variable_2 -> empty .)
    COMMA           reduce using rule 42 (variable_2 -> empty .)
    RPAR            reduce using rule 42 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 42 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 42 (variable_2 -> empty .)
    TO              reduce using rule 42 (variable_2 -> empty .)


state 103

    (58) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (39) variable -> . ID variable_2 variable_point

    ID              shift and go to state 132

    variable                       shift and go to state 131

state 104

    (60) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (61) write_2 -> . exp
    (62) write_2 -> . CTE_S
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 135
    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    write_2                        shift and go to state 133
    exp                            shift and go to state 134
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 105

    (65) if_1 -> IF LPAR . exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 136
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 106

    (69) for_l -> FOR LPAR . ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    ID              shift and go to state 137


state 107

    (72) while_l -> WHILE LPAR . exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 138
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 108

    (34) param -> tipo_simple ID . punto_param param_2
    (38) punto_param -> . empty
    (121) empty -> .

    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)

    punto_param                    shift and go to state 139
    empty                          shift and go to state 140

state 109

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR . L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    L_C_BRACKET     shift and go to state 141


state 110

    (115) function_2 -> VOID ID function_punto2 LPAR param RPAR . L_C_BRACKET body R_C_BRACKET

    L_C_BRACKET     shift and go to state 142


state 111

    (28) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 143


state 112

    (11) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body_2 -> estatuto body_2 .)
    RETURN          reduce using rule 11 (body_2 -> estatuto body_2 .)


state 113

    (53) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    variable                       shift and go to state 123
    exp                            shift and go to state 144
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 114

    (106) add_operator -> empty .

    LPAR            reduce using rule 106 (add_operator -> empty .)
    ID              reduce using rule 106 (add_operator -> empty .)
    CTE_I           reduce using rule 106 (add_operator -> empty .)
    CTE_F           reduce using rule 106 (add_operator -> empty .)


state 115

    (39) variable -> ID . variable_2 variable_point
    (55) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (41) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (42) variable_2 -> . empty
    (121) empty -> .

    LPAR            shift and go to state 99
    L_S_BRACKET     shift and go to state 101
    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    variable_2                     shift and go to state 100
    empty                          shift and go to state 102

state 116

    (98) f -> LPAR . add_floor exp RPAR remove_floor
    (104) add_floor -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_floor                      shift and go to state 145
    empty                          shift and go to state 146

state 117

    (55) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (56) llamada_2 -> . COMMA exp llamada_2
    (57) llamada_2 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 148
    RPAR            reduce using rule 121 (empty -> .)

    llamada_2                      shift and go to state 147
    empty                          shift and go to state 149

state 118

    (76) exp -> t_exp . add_operator_4 exp_2
    (110) add_operator_4 -> . empty
    (121) empty -> .

    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_operator_4                 shift and go to state 150
    empty                          shift and go to state 151

state 119

    (79) t_exp -> g_exp . add_operator_4 t_exp_2
    (110) add_operator_4 -> . empty
    (121) empty -> .

    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_operator_4                 shift and go to state 152
    empty                          shift and go to state 151

state 120

    (82) g_exp -> m_exp . g_exp_2 add_operator_3
    (83) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (84) g_exp_2 -> . LESS add_operator m_exp
    (85) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (86) g_exp_2 -> . GREATER add_operator m_exp
    (87) g_exp_2 -> . COMPARE add_operator m_exp
    (88) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (89) g_exp_2 -> . empty
    (121) empty -> .

    LESS_EQUAL      shift and go to state 154
    LESS            shift and go to state 155
    GREATER_EQUAL   shift and go to state 156
    GREATER         shift and go to state 157
    COMPARE         shift and go to state 158
    NOT_EQUAL       shift and go to state 159
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    g_exp_2                        shift and go to state 153
    empty                          shift and go to state 160

state 121

    (90) m_exp -> t . add_operator_2 m_exp_2
    (108) add_operator_2 -> . empty
    (121) empty -> .

    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_operator_2                 shift and go to state 161
    empty                          shift and go to state 162

state 122

    (94) t -> f . add_operator_1 t_2
    (107) add_operator_1 -> . empty
    (121) empty -> .

    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_operator_1                 shift and go to state 163
    empty                          shift and go to state 164

state 123

    (99) f -> variable .

    TIMES           reduce using rule 99 (f -> variable .)
    DIVIDE          reduce using rule 99 (f -> variable .)
    PLUS            reduce using rule 99 (f -> variable .)
    MINUS           reduce using rule 99 (f -> variable .)
    LESS_EQUAL      reduce using rule 99 (f -> variable .)
    LESS            reduce using rule 99 (f -> variable .)
    GREATER_EQUAL   reduce using rule 99 (f -> variable .)
    GREATER         reduce using rule 99 (f -> variable .)
    COMPARE         reduce using rule 99 (f -> variable .)
    NOT_EQUAL       reduce using rule 99 (f -> variable .)
    AND             reduce using rule 99 (f -> variable .)
    OR              reduce using rule 99 (f -> variable .)
    COMMA           reduce using rule 99 (f -> variable .)
    RPAR            reduce using rule 99 (f -> variable .)
    R_S_BRACKET     reduce using rule 99 (f -> variable .)
    SEMICOLON       reduce using rule 99 (f -> variable .)
    TO              reduce using rule 99 (f -> variable .)


state 124

    (100) f -> llamada .

    TIMES           reduce using rule 100 (f -> llamada .)
    DIVIDE          reduce using rule 100 (f -> llamada .)
    PLUS            reduce using rule 100 (f -> llamada .)
    MINUS           reduce using rule 100 (f -> llamada .)
    LESS_EQUAL      reduce using rule 100 (f -> llamada .)
    LESS            reduce using rule 100 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 100 (f -> llamada .)
    GREATER         reduce using rule 100 (f -> llamada .)
    COMPARE         reduce using rule 100 (f -> llamada .)
    NOT_EQUAL       reduce using rule 100 (f -> llamada .)
    AND             reduce using rule 100 (f -> llamada .)
    OR              reduce using rule 100 (f -> llamada .)
    COMMA           reduce using rule 100 (f -> llamada .)
    RPAR            reduce using rule 100 (f -> llamada .)
    R_S_BRACKET     reduce using rule 100 (f -> llamada .)
    SEMICOLON       reduce using rule 100 (f -> llamada .)
    TO              reduce using rule 100 (f -> llamada .)


state 125

    (101) f -> f_2 .

    TIMES           reduce using rule 101 (f -> f_2 .)
    DIVIDE          reduce using rule 101 (f -> f_2 .)
    PLUS            reduce using rule 101 (f -> f_2 .)
    MINUS           reduce using rule 101 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 101 (f -> f_2 .)
    LESS            reduce using rule 101 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 101 (f -> f_2 .)
    GREATER         reduce using rule 101 (f -> f_2 .)
    COMPARE         reduce using rule 101 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 101 (f -> f_2 .)
    AND             reduce using rule 101 (f -> f_2 .)
    OR              reduce using rule 101 (f -> f_2 .)
    COMMA           reduce using rule 101 (f -> f_2 .)
    RPAR            reduce using rule 101 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 101 (f -> f_2 .)
    SEMICOLON       reduce using rule 101 (f -> f_2 .)
    TO              reduce using rule 101 (f -> f_2 .)


state 126

    (102) f_2 -> CTE_I . add_constant_i
    (111) add_constant_i -> . empty
    (121) empty -> .

    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_constant_i                 shift and go to state 165
    empty                          shift and go to state 166

state 127

    (103) f_2 -> CTE_F . add_constant_f
    (112) add_constant_f -> . empty
    (121) empty -> .

    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_constant_f                 shift and go to state 167
    empty                          shift and go to state 168

state 128

    (39) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 39 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 39 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 39 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 39 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 39 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 39 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 39 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 39 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 39 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 39 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 39 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 39 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 39 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 39 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 39 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 39 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 39 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 39 (variable -> ID variable_2 variable_point .)


state 129

    (40) variable_point -> empty .

    EQUAL           reduce using rule 40 (variable_point -> empty .)
    TIMES           reduce using rule 40 (variable_point -> empty .)
    DIVIDE          reduce using rule 40 (variable_point -> empty .)
    PLUS            reduce using rule 40 (variable_point -> empty .)
    MINUS           reduce using rule 40 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 40 (variable_point -> empty .)
    LESS            reduce using rule 40 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 40 (variable_point -> empty .)
    GREATER         reduce using rule 40 (variable_point -> empty .)
    COMPARE         reduce using rule 40 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 40 (variable_point -> empty .)
    AND             reduce using rule 40 (variable_point -> empty .)
    OR              reduce using rule 40 (variable_point -> empty .)
    COMMA           reduce using rule 40 (variable_point -> empty .)
    RPAR            reduce using rule 40 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 40 (variable_point -> empty .)
    SEMICOLON       reduce using rule 40 (variable_point -> empty .)
    TO              reduce using rule 40 (variable_point -> empty .)


state 130

    (41) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 169


state 131

    (58) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (59) read_point -> . empty
    (121) empty -> .

    RPAR            reduce using rule 121 (empty -> .)

    read_point                     shift and go to state 170
    empty                          shift and go to state 171

state 132

    (39) variable -> ID . variable_2 variable_point
    (41) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (42) variable_2 -> . empty
    (121) empty -> .

    L_S_BRACKET     shift and go to state 101
    RPAR            reduce using rule 121 (empty -> .)

    variable_2                     shift and go to state 100
    empty                          shift and go to state 102

state 133

    (60) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (63) write_3 -> . COMMA write_2 write_3
    (64) write_3 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 173
    RPAR            reduce using rule 121 (empty -> .)

    write_3                        shift and go to state 172
    empty                          shift and go to state 174

state 134

    (61) write_2 -> exp .

    COMMA           reduce using rule 61 (write_2 -> exp .)
    RPAR            reduce using rule 61 (write_2 -> exp .)


state 135

    (62) write_2 -> CTE_S .

    COMMA           reduce using rule 62 (write_2 -> CTE_S .)
    RPAR            reduce using rule 62 (write_2 -> CTE_S .)


state 136

    (65) if_1 -> IF LPAR exp . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    RPAR            shift and go to state 175


state 137

    (69) for_l -> FOR LPAR ID . RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 176


state 138

    (72) while_l -> WHILE LPAR exp . RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 177


state 139

    (34) param -> tipo_simple ID punto_param . param_2
    (36) param_2 -> . COMMA param
    (37) param_2 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 179
    RPAR            reduce using rule 121 (empty -> .)

    param_2                        shift and go to state 178
    empty                          shift and go to state 180

state 140

    (38) punto_param -> empty .

    COMMA           reduce using rule 38 (punto_param -> empty .)
    RPAR            reduce using rule 38 (punto_param -> empty .)


state 141

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET . body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (10) body -> . vars func_agrega_v estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 181
    vars                           shift and go to state 54

state 142

    (115) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET . body R_C_BRACKET
    (10) body -> . vars func_agrega_v estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 182
    vars                           shift and go to state 54

state 143

    (28) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (31) var_mat -> . empty
    (121) empty -> .

    SEMICOLON       reduce using rule 121 (empty -> .)

    var_mat                        shift and go to state 183
    empty                          shift and go to state 184

state 144

    (53) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (54) asigna_point -> . empty
    (121) empty -> .

    SEMICOLON       reduce using rule 121 (empty -> .)

    asigna_point                   shift and go to state 185
    empty                          shift and go to state 186

state 145

    (98) f -> LPAR add_floor . exp RPAR remove_floor
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 187
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 146

    (104) add_floor -> empty .

    LPAR            reduce using rule 104 (add_floor -> empty .)
    ID              reduce using rule 104 (add_floor -> empty .)
    CTE_I           reduce using rule 104 (add_floor -> empty .)
    CTE_F           reduce using rule 104 (add_floor -> empty .)


state 147

    (55) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 188


state 148

    (56) llamada_2 -> COMMA . exp llamada_2
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 189
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 149

    (57) llamada_2 -> empty .

    RPAR            reduce using rule 57 (llamada_2 -> empty .)


state 150

    (76) exp -> t_exp add_operator_4 . exp_2
    (77) exp_2 -> . OR add_operator exp
    (78) exp_2 -> . empty
    (121) empty -> .

    OR              shift and go to state 191
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    exp_2                          shift and go to state 190
    empty                          shift and go to state 192

state 151

    (110) add_operator_4 -> empty .

    OR              reduce using rule 110 (add_operator_4 -> empty .)
    COMMA           reduce using rule 110 (add_operator_4 -> empty .)
    RPAR            reduce using rule 110 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 110 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 110 (add_operator_4 -> empty .)
    TO              reduce using rule 110 (add_operator_4 -> empty .)
    AND             reduce using rule 110 (add_operator_4 -> empty .)


state 152

    (79) t_exp -> g_exp add_operator_4 . t_exp_2
    (80) t_exp_2 -> . AND add_operator t_exp
    (81) t_exp_2 -> . empty
    (121) empty -> .

    AND             shift and go to state 194
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    t_exp_2                        shift and go to state 193
    empty                          shift and go to state 195

state 153

    (82) g_exp -> m_exp g_exp_2 . add_operator_3
    (109) add_operator_3 -> . empty
    (121) empty -> .

    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    add_operator_3                 shift and go to state 196
    empty                          shift and go to state 197

state 154

    (83) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 198
    empty                          shift and go to state 114

state 155

    (84) g_exp_2 -> LESS . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 199
    empty                          shift and go to state 114

state 156

    (85) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 200
    empty                          shift and go to state 114

state 157

    (86) g_exp_2 -> GREATER . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 201
    empty                          shift and go to state 114

state 158

    (87) g_exp_2 -> COMPARE . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 202
    empty                          shift and go to state 114

state 159

    (88) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 203
    empty                          shift and go to state 114

state 160

    (89) g_exp_2 -> empty .

    AND             reduce using rule 89 (g_exp_2 -> empty .)
    OR              reduce using rule 89 (g_exp_2 -> empty .)
    COMMA           reduce using rule 89 (g_exp_2 -> empty .)
    RPAR            reduce using rule 89 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 89 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 89 (g_exp_2 -> empty .)
    TO              reduce using rule 89 (g_exp_2 -> empty .)


state 161

    (90) m_exp -> t add_operator_2 . m_exp_2
    (91) m_exp_2 -> . PLUS add_operator m_exp
    (92) m_exp_2 -> . MINUS add_operator m_exp
    (93) m_exp_2 -> . empty
    (121) empty -> .

    PLUS            shift and go to state 205
    MINUS           shift and go to state 206
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    m_exp_2                        shift and go to state 204
    empty                          shift and go to state 207

state 162

    (108) add_operator_2 -> empty .

    PLUS            reduce using rule 108 (add_operator_2 -> empty .)
    MINUS           reduce using rule 108 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 108 (add_operator_2 -> empty .)
    LESS            reduce using rule 108 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 108 (add_operator_2 -> empty .)
    GREATER         reduce using rule 108 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 108 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 108 (add_operator_2 -> empty .)
    AND             reduce using rule 108 (add_operator_2 -> empty .)
    OR              reduce using rule 108 (add_operator_2 -> empty .)
    COMMA           reduce using rule 108 (add_operator_2 -> empty .)
    RPAR            reduce using rule 108 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 108 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 108 (add_operator_2 -> empty .)
    TO              reduce using rule 108 (add_operator_2 -> empty .)


state 163

    (94) t -> f add_operator_1 . t_2
    (95) t_2 -> . TIMES add_operator t
    (96) t_2 -> . DIVIDE add_operator t
    (97) t_2 -> . empty
    (121) empty -> .

    TIMES           shift and go to state 209
    DIVIDE          shift and go to state 210
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    t_2                            shift and go to state 208
    empty                          shift and go to state 211

state 164

    (107) add_operator_1 -> empty .

    TIMES           reduce using rule 107 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 107 (add_operator_1 -> empty .)
    PLUS            reduce using rule 107 (add_operator_1 -> empty .)
    MINUS           reduce using rule 107 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 107 (add_operator_1 -> empty .)
    LESS            reduce using rule 107 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 107 (add_operator_1 -> empty .)
    GREATER         reduce using rule 107 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 107 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 107 (add_operator_1 -> empty .)
    AND             reduce using rule 107 (add_operator_1 -> empty .)
    OR              reduce using rule 107 (add_operator_1 -> empty .)
    COMMA           reduce using rule 107 (add_operator_1 -> empty .)
    RPAR            reduce using rule 107 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 107 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 107 (add_operator_1 -> empty .)
    TO              reduce using rule 107 (add_operator_1 -> empty .)


state 165

    (102) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 102 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 102 (f_2 -> CTE_I add_constant_i .)


state 166

    (111) add_constant_i -> empty .

    TIMES           reduce using rule 111 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 111 (add_constant_i -> empty .)
    PLUS            reduce using rule 111 (add_constant_i -> empty .)
    MINUS           reduce using rule 111 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 111 (add_constant_i -> empty .)
    LESS            reduce using rule 111 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 111 (add_constant_i -> empty .)
    GREATER         reduce using rule 111 (add_constant_i -> empty .)
    COMPARE         reduce using rule 111 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 111 (add_constant_i -> empty .)
    AND             reduce using rule 111 (add_constant_i -> empty .)
    OR              reduce using rule 111 (add_constant_i -> empty .)
    COMMA           reduce using rule 111 (add_constant_i -> empty .)
    RPAR            reduce using rule 111 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 111 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 111 (add_constant_i -> empty .)
    TO              reduce using rule 111 (add_constant_i -> empty .)


state 167

    (103) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 103 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 103 (f_2 -> CTE_F add_constant_f .)


state 168

    (112) add_constant_f -> empty .

    TIMES           reduce using rule 112 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 112 (add_constant_f -> empty .)
    PLUS            reduce using rule 112 (add_constant_f -> empty .)
    MINUS           reduce using rule 112 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 112 (add_constant_f -> empty .)
    LESS            reduce using rule 112 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 112 (add_constant_f -> empty .)
    GREATER         reduce using rule 112 (add_constant_f -> empty .)
    COMPARE         reduce using rule 112 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 112 (add_constant_f -> empty .)
    AND             reduce using rule 112 (add_constant_f -> empty .)
    OR              reduce using rule 112 (add_constant_f -> empty .)
    COMMA           reduce using rule 112 (add_constant_f -> empty .)
    RPAR            reduce using rule 112 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 112 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 112 (add_constant_f -> empty .)
    TO              reduce using rule 112 (add_constant_f -> empty .)


state 169

    (41) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (43) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (44) variable_3 -> . empty
    (121) empty -> .

    L_S_BRACKET     shift and go to state 212
    EQUAL           reduce using rule 121 (empty -> .)
    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    variable_3                     shift and go to state 213
    empty                          shift and go to state 214

state 170

    (58) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 215


state 171

    (59) read_point -> empty .

    RPAR            reduce using rule 59 (read_point -> empty .)


state 172

    (60) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 216


state 173

    (63) write_3 -> COMMA . write_2 write_3
    (61) write_2 -> . exp
    (62) write_2 -> . CTE_S
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 135
    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    write_2                        shift and go to state 217
    exp                            shift and go to state 134
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 174

    (64) write_3 -> empty .

    RPAR            reduce using rule 64 (write_3 -> empty .)


state 175

    (65) if_1 -> IF LPAR exp RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    L_C_BRACKET     shift and go to state 218


state 176

    (69) for_l -> FOR LPAR ID RPAR . EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    EQUAL           shift and go to state 219


state 177

    (72) while_l -> WHILE LPAR exp RPAR . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 220


state 178

    (34) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 34 (param -> tipo_simple ID punto_param param_2 .)


state 179

    (36) param_2 -> COMMA . param
    (34) param -> . tipo_simple ID punto_param param_2
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (121) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 121 (empty -> .)

    param                          shift and go to state 221
    tipo_simple                    shift and go to state 87
    empty                          shift and go to state 89

state 180

    (37) param_2 -> empty .

    RPAR            reduce using rule 37 (param_2 -> empty .)


state 181

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body . RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    RETURN          shift and go to state 222


state 182

    (115) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body . R_C_BRACKET

    R_C_BRACKET     shift and go to state 223


state 183

    (28) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 28 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 184

    (31) var_mat -> empty .

    SEMICOLON       reduce using rule 31 (var_mat -> empty .)


state 185

    (53) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 224


state 186

    (54) asigna_point -> empty .

    SEMICOLON       reduce using rule 54 (asigna_point -> empty .)


state 187

    (98) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 225


state 188

    (55) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 226


state 189

    (56) llamada_2 -> COMMA exp . llamada_2
    (56) llamada_2 -> . COMMA exp llamada_2
    (57) llamada_2 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 148
    RPAR            reduce using rule 121 (empty -> .)

    llamada_2                      shift and go to state 227
    empty                          shift and go to state 149

state 190

    (76) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 76 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 76 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 76 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 76 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 76 (exp -> t_exp add_operator_4 exp_2 .)


state 191

    (77) exp_2 -> OR . add_operator exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 228
    empty                          shift and go to state 114

state 192

    (78) exp_2 -> empty .

    COMMA           reduce using rule 78 (exp_2 -> empty .)
    RPAR            reduce using rule 78 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 78 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 78 (exp_2 -> empty .)
    TO              reduce using rule 78 (exp_2 -> empty .)


state 193

    (79) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 79 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 79 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 79 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 79 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 79 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 79 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 194

    (80) t_exp_2 -> AND . add_operator t_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 229
    empty                          shift and go to state 114

state 195

    (81) t_exp_2 -> empty .

    OR              reduce using rule 81 (t_exp_2 -> empty .)
    COMMA           reduce using rule 81 (t_exp_2 -> empty .)
    RPAR            reduce using rule 81 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 81 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 81 (t_exp_2 -> empty .)
    TO              reduce using rule 81 (t_exp_2 -> empty .)


state 196

    (82) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 82 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 197

    (109) add_operator_3 -> empty .

    AND             reduce using rule 109 (add_operator_3 -> empty .)
    OR              reduce using rule 109 (add_operator_3 -> empty .)
    COMMA           reduce using rule 109 (add_operator_3 -> empty .)
    RPAR            reduce using rule 109 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 109 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 109 (add_operator_3 -> empty .)
    TO              reduce using rule 109 (add_operator_3 -> empty .)


state 198

    (83) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 230
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 199

    (84) g_exp_2 -> LESS add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 231
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 200

    (85) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 232
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 201

    (86) g_exp_2 -> GREATER add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 233
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 202

    (87) g_exp_2 -> COMPARE add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 234
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 203

    (88) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 235
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 204

    (90) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 90 (m_exp -> t add_operator_2 m_exp_2 .)


state 205

    (91) m_exp_2 -> PLUS . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 236
    empty                          shift and go to state 114

state 206

    (92) m_exp_2 -> MINUS . add_operator m_exp
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 237
    empty                          shift and go to state 114

state 207

    (93) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 93 (m_exp_2 -> empty .)
    LESS            reduce using rule 93 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 93 (m_exp_2 -> empty .)
    GREATER         reduce using rule 93 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 93 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 93 (m_exp_2 -> empty .)
    AND             reduce using rule 93 (m_exp_2 -> empty .)
    OR              reduce using rule 93 (m_exp_2 -> empty .)
    COMMA           reduce using rule 93 (m_exp_2 -> empty .)
    RPAR            reduce using rule 93 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 93 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 93 (m_exp_2 -> empty .)
    TO              reduce using rule 93 (m_exp_2 -> empty .)


state 208

    (94) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 94 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 94 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 94 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 94 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 94 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 94 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 94 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 94 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 94 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 94 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 94 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 94 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 94 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 94 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 94 (t -> f add_operator_1 t_2 .)


state 209

    (95) t_2 -> TIMES . add_operator t
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 238
    empty                          shift and go to state 114

state 210

    (96) t_2 -> DIVIDE . add_operator t
    (106) add_operator -> . empty
    (121) empty -> .

    LPAR            reduce using rule 121 (empty -> .)
    ID              reduce using rule 121 (empty -> .)
    CTE_I           reduce using rule 121 (empty -> .)
    CTE_F           reduce using rule 121 (empty -> .)

    add_operator                   shift and go to state 239
    empty                          shift and go to state 114

state 211

    (97) t_2 -> empty .

    PLUS            reduce using rule 97 (t_2 -> empty .)
    MINUS           reduce using rule 97 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 97 (t_2 -> empty .)
    LESS            reduce using rule 97 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 97 (t_2 -> empty .)
    GREATER         reduce using rule 97 (t_2 -> empty .)
    COMPARE         reduce using rule 97 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 97 (t_2 -> empty .)
    AND             reduce using rule 97 (t_2 -> empty .)
    OR              reduce using rule 97 (t_2 -> empty .)
    COMMA           reduce using rule 97 (t_2 -> empty .)
    RPAR            reduce using rule 97 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 97 (t_2 -> empty .)
    SEMICOLON       reduce using rule 97 (t_2 -> empty .)
    TO              reduce using rule 97 (t_2 -> empty .)


state 212

    (43) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 240
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 213

    (41) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 41 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 214

    (44) variable_3 -> empty .

    EQUAL           reduce using rule 44 (variable_3 -> empty .)
    TIMES           reduce using rule 44 (variable_3 -> empty .)
    DIVIDE          reduce using rule 44 (variable_3 -> empty .)
    PLUS            reduce using rule 44 (variable_3 -> empty .)
    MINUS           reduce using rule 44 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 44 (variable_3 -> empty .)
    LESS            reduce using rule 44 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 44 (variable_3 -> empty .)
    GREATER         reduce using rule 44 (variable_3 -> empty .)
    COMPARE         reduce using rule 44 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 44 (variable_3 -> empty .)
    AND             reduce using rule 44 (variable_3 -> empty .)
    OR              reduce using rule 44 (variable_3 -> empty .)
    COMMA           reduce using rule 44 (variable_3 -> empty .)
    RPAR            reduce using rule 44 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 44 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 44 (variable_3 -> empty .)
    TO              reduce using rule 44 (variable_3 -> empty .)


state 215

    (58) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 241


state 216

    (60) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 242


state 217

    (63) write_3 -> COMMA write_2 . write_3
    (63) write_3 -> . COMMA write_2 write_3
    (64) write_3 -> . empty
    (121) empty -> .

    COMMA           shift and go to state 173
    RPAR            reduce using rule 121 (empty -> .)

    write_3                        shift and go to state 243
    empty                          shift and go to state 174

state 218

    (65) if_1 -> IF LPAR exp RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point
    (121) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85
    R_C_BRACKET     reduce using rule 121 (empty -> .)

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 244
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79
    empty                          shift and go to state 86

state 219

    (69) for_l -> FOR LPAR ID RPAR EQUAL . exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 245
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 220

    (72) while_l -> WHILE LPAR exp RPAR L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point
    (121) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85
    R_C_BRACKET     reduce using rule 121 (empty -> .)

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 246
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79
    empty                          shift and go to state 86

state 221

    (36) param_2 -> COMMA param .

    RPAR            reduce using rule 36 (param_2 -> COMMA param .)


state 222

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN . LPAR exp RPAR SEMICOLON R_C_BRACKET

    LPAR            shift and go to state 247


state 223

    (115) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET .

    SEMICOLON       reduce using rule 115 (function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET .)


state 224

    (53) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 53 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 225

    (98) f -> LPAR add_floor exp RPAR . remove_floor
    (105) remove_floor -> . empty
    (121) empty -> .

    TIMES           reduce using rule 121 (empty -> .)
    DIVIDE          reduce using rule 121 (empty -> .)
    PLUS            reduce using rule 121 (empty -> .)
    MINUS           reduce using rule 121 (empty -> .)
    LESS_EQUAL      reduce using rule 121 (empty -> .)
    LESS            reduce using rule 121 (empty -> .)
    GREATER_EQUAL   reduce using rule 121 (empty -> .)
    GREATER         reduce using rule 121 (empty -> .)
    COMPARE         reduce using rule 121 (empty -> .)
    NOT_EQUAL       reduce using rule 121 (empty -> .)
    AND             reduce using rule 121 (empty -> .)
    OR              reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    RPAR            reduce using rule 121 (empty -> .)
    R_S_BRACKET     reduce using rule 121 (empty -> .)
    SEMICOLON       reduce using rule 121 (empty -> .)
    TO              reduce using rule 121 (empty -> .)

    remove_floor                   shift and go to state 248
    empty                          shift and go to state 249

state 226

    (55) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 55 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 227

    (56) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 56 (llamada_2 -> COMMA exp llamada_2 .)


state 228

    (77) exp_2 -> OR add_operator . exp
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 250
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 229

    (80) t_exp_2 -> AND add_operator . t_exp
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    t_exp                          shift and go to state 251
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 230

    (83) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 83 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 231

    (84) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 84 (g_exp_2 -> LESS add_operator m_exp .)


state 232

    (85) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 85 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 233

    (86) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 86 (g_exp_2 -> GREATER add_operator m_exp .)


state 234

    (87) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 87 (g_exp_2 -> COMPARE add_operator m_exp .)


state 235

    (88) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 88 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 236

    (91) m_exp_2 -> PLUS add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 252
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 237

    (92) m_exp_2 -> MINUS add_operator . m_exp
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    m_exp                          shift and go to state 253
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 238

    (95) t_2 -> TIMES add_operator . t
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    t                              shift and go to state 254
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 239

    (96) t_2 -> DIVIDE add_operator . t
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    t                              shift and go to state 255
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 240

    (43) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 256


state 241

    (58) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 58 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 242

    (60) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 60 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 243

    (63) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 63 (write_3 -> COMMA write_2 write_3 .)


state 244

    (65) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON
    (66) if_2 -> . estatuto if_2
    (67) if_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 257
    if_2                           shift and go to state 258
    empty                          shift and go to state 259
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 245

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp . TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    TO              shift and go to state 260


state 246

    (72) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON
    (73) while_l_2 -> . estatuto while_l_2
    (74) while_l_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 261
    while_l_2                      shift and go to state 262
    empty                          shift and go to state 263
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 247

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR . exp RPAR SEMICOLON R_C_BRACKET
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 264
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 248

    (98) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 98 (f -> LPAR add_floor exp RPAR remove_floor .)


state 249

    (105) remove_floor -> empty .

    TIMES           reduce using rule 105 (remove_floor -> empty .)
    DIVIDE          reduce using rule 105 (remove_floor -> empty .)
    PLUS            reduce using rule 105 (remove_floor -> empty .)
    MINUS           reduce using rule 105 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 105 (remove_floor -> empty .)
    LESS            reduce using rule 105 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 105 (remove_floor -> empty .)
    GREATER         reduce using rule 105 (remove_floor -> empty .)
    COMPARE         reduce using rule 105 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 105 (remove_floor -> empty .)
    AND             reduce using rule 105 (remove_floor -> empty .)
    OR              reduce using rule 105 (remove_floor -> empty .)
    COMMA           reduce using rule 105 (remove_floor -> empty .)
    RPAR            reduce using rule 105 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 105 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 105 (remove_floor -> empty .)
    TO              reduce using rule 105 (remove_floor -> empty .)


state 250

    (77) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 77 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 77 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 77 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 77 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 77 (exp_2 -> OR add_operator exp .)


state 251

    (80) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 80 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 80 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 80 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 80 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 80 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 80 (t_exp_2 -> AND add_operator t_exp .)


state 252

    (91) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 91 (m_exp_2 -> PLUS add_operator m_exp .)


state 253

    (92) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 92 (m_exp_2 -> MINUS add_operator m_exp .)


state 254

    (95) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 95 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 95 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 95 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 95 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 95 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 95 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 95 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 95 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 95 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 95 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 95 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 95 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 95 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 95 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 95 (t_2 -> TIMES add_operator t .)


state 255

    (96) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 96 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 96 (t_2 -> DIVIDE add_operator t .)


state 256

    (43) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 43 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 257

    (66) if_2 -> estatuto . if_2
    (66) if_2 -> . estatuto if_2
    (67) if_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 257
    if_2                           shift and go to state 265
    empty                          shift and go to state 259
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 258

    (65) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON

    R_C_BRACKET     shift and go to state 266


state 259

    (67) if_2 -> empty .
    (75) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 67 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 67 (if_2 -> empty .)
    ID              reduce using rule 75 (func_extra -> empty .)
    READ            reduce using rule 75 (func_extra -> empty .)
    WRITE           reduce using rule 75 (func_extra -> empty .)
    IF              reduce using rule 75 (func_extra -> empty .)
    FOR             reduce using rule 75 (func_extra -> empty .)
    WHILE           reduce using rule 75 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 75 (func_extra -> empty .) ]


state 260

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO . exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (76) exp -> . t_exp add_operator_4 exp_2
    (79) t_exp -> . g_exp add_operator_4 t_exp_2
    (82) g_exp -> . m_exp g_exp_2 add_operator_3
    (90) m_exp -> . t add_operator_2 m_exp_2
    (94) t -> . f add_operator_1 t_2
    (98) f -> . LPAR add_floor exp RPAR remove_floor
    (99) f -> . variable
    (100) f -> . llamada
    (101) f -> . f_2
    (39) variable -> . ID variable_2 variable_point
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (102) f_2 -> . CTE_I add_constant_i
    (103) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 116
    ID              shift and go to state 115
    CTE_I           shift and go to state 126
    CTE_F           shift and go to state 127

    exp                            shift and go to state 267
    t_exp                          shift and go to state 118
    g_exp                          shift and go to state 119
    m_exp                          shift and go to state 120
    t                              shift and go to state 121
    f                              shift and go to state 122
    variable                       shift and go to state 123
    llamada                        shift and go to state 124
    f_2                            shift and go to state 125

state 261

    (73) while_l_2 -> estatuto . while_l_2
    (73) while_l_2 -> . estatuto while_l_2
    (74) while_l_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 261
    while_l_2                      shift and go to state 268
    empty                          shift and go to state 263
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 262

    (72) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 269


state 263

    (74) while_l_2 -> empty .
    (75) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 74 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 74 (while_l_2 -> empty .)
    ID              reduce using rule 75 (func_extra -> empty .)
    READ            reduce using rule 75 (func_extra -> empty .)
    WRITE           reduce using rule 75 (func_extra -> empty .)
    IF              reduce using rule 75 (func_extra -> empty .)
    FOR             reduce using rule 75 (func_extra -> empty .)
    WHILE           reduce using rule 75 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 75 (func_extra -> empty .) ]


state 264

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp . RPAR SEMICOLON R_C_BRACKET

    RPAR            shift and go to state 270


state 265

    (66) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 66 (if_2 -> estatuto if_2 .)


state 266

    (65) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON
    (68) if_3 -> . ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET

    ELSE            shift and go to state 272

    if_3                           shift and go to state 271

state 267

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 273


state 268

    (73) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 73 (while_l_2 -> estatuto while_l_2 .)


state 269

    (72) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 274


state 270

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR . SEMICOLON R_C_BRACKET

    SEMICOLON       shift and go to state 275


state 271

    (65) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON

    SEMICOLON       shift and go to state 276


state 272

    (68) if_3 -> ELSE . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 277


state 273

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 278


state 274

    (72) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 72 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)


state 275

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON . R_C_BRACKET

    R_C_BRACKET     shift and go to state 279


state 276

    (65) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .

    ID              reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    READ            reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    WRITE           reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    IF              reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    FOR             reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    WHILE           reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    R_C_BRACKET     reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    RETURN          reduce using rule 65 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)


state 277

    (68) if_3 -> ELSE L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point
    (121) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85
    R_C_BRACKET     reduce using rule 121 (empty -> .)

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 280
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79
    empty                          shift and go to state 86

state 278

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point
    (121) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85
    R_C_BRACKET     reduce using rule 121 (empty -> .)

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 281
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79
    empty                          shift and go to state 86

state 279

    (114) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET .

    SEMICOLON       reduce using rule 114 (function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET .)


state 280

    (68) if_3 -> ELSE L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (66) if_2 -> . estatuto if_2
    (67) if_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 257
    if_2                           shift and go to state 282
    empty                          shift and go to state 259
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 281

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON
    (70) for_l_2 -> . estatuto for_l_2
    (71) for_l_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 283
    for_l_2                        shift and go to state 284
    empty                          shift and go to state 285
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 282

    (68) if_3 -> ELSE L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 286


state 283

    (70) for_l_2 -> estatuto . for_l_2
    (70) for_l_2 -> . estatuto for_l_2
    (71) for_l_2 -> . empty
    (45) estatuto -> . asigna
    (46) estatuto -> . llamada
    (47) estatuto -> . read
    (48) estatuto -> . write
    (49) estatuto -> . if_1
    (50) estatuto -> . for_l
    (51) estatuto -> . while_l
    (52) estatuto -> . func_extra
    (121) empty -> .
    (53) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (55) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (58) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (60) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (65) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (69) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (75) func_extra -> . empty
    (39) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 121 (empty -> .)
    ID              shift and go to state 80
    READ            shift and go to state 81
    WRITE           shift and go to state 82
    IF              shift and go to state 83
    FOR             shift and go to state 84
    WHILE           shift and go to state 85

  ! ID              [ reduce using rule 121 (empty -> .) ]
  ! READ            [ reduce using rule 121 (empty -> .) ]
  ! WRITE           [ reduce using rule 121 (empty -> .) ]
  ! IF              [ reduce using rule 121 (empty -> .) ]
  ! FOR             [ reduce using rule 121 (empty -> .) ]
  ! WHILE           [ reduce using rule 121 (empty -> .) ]

    estatuto                       shift and go to state 283
    for_l_2                        shift and go to state 287
    empty                          shift and go to state 285
    asigna                         shift and go to state 71
    llamada                        shift and go to state 72
    read                           shift and go to state 73
    write                          shift and go to state 74
    if_1                           shift and go to state 75
    for_l                          shift and go to state 76
    while_l                        shift and go to state 77
    func_extra                     shift and go to state 78
    variable                       shift and go to state 79

state 284

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 288


state 285

    (71) for_l_2 -> empty .
    (75) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 71 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 71 (for_l_2 -> empty .)
    ID              reduce using rule 75 (func_extra -> empty .)
    READ            reduce using rule 75 (func_extra -> empty .)
    WRITE           reduce using rule 75 (func_extra -> empty .)
    IF              reduce using rule 75 (func_extra -> empty .)
    FOR             reduce using rule 75 (func_extra -> empty .)
    WHILE           reduce using rule 75 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 75 (func_extra -> empty .) ]


state 286

    (68) if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 68 (if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 287

    (70) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 70 (for_l_2 -> estatuto for_l_2 .)


state 288

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 289


state 289

    (69) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 69 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for READ in state 64 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for READ in state 70 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for READ in state 95 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 95 resolved as shift
WARNING: shift/reduce conflict for IF in state 95 resolved as shift
WARNING: shift/reduce conflict for FOR in state 95 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 218 resolved as shift
WARNING: shift/reduce conflict for READ in state 218 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 218 resolved as shift
WARNING: shift/reduce conflict for IF in state 218 resolved as shift
WARNING: shift/reduce conflict for FOR in state 218 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 220 resolved as shift
WARNING: shift/reduce conflict for READ in state 220 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 220 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for READ in state 244 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 244 resolved as shift
WARNING: shift/reduce conflict for IF in state 244 resolved as shift
WARNING: shift/reduce conflict for FOR in state 244 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 246 resolved as shift
WARNING: shift/reduce conflict for READ in state 246 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 246 resolved as shift
WARNING: shift/reduce conflict for IF in state 246 resolved as shift
WARNING: shift/reduce conflict for FOR in state 246 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 246 resolved as shift
WARNING: shift/reduce conflict for ID in state 257 resolved as shift
WARNING: shift/reduce conflict for READ in state 257 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 257 resolved as shift
WARNING: shift/reduce conflict for IF in state 257 resolved as shift
WARNING: shift/reduce conflict for FOR in state 257 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 257 resolved as shift
WARNING: shift/reduce conflict for ID in state 261 resolved as shift
WARNING: shift/reduce conflict for READ in state 261 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 261 resolved as shift
WARNING: shift/reduce conflict for IF in state 261 resolved as shift
WARNING: shift/reduce conflict for FOR in state 261 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 261 resolved as shift
WARNING: shift/reduce conflict for ID in state 277 resolved as shift
WARNING: shift/reduce conflict for READ in state 277 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 277 resolved as shift
WARNING: shift/reduce conflict for IF in state 277 resolved as shift
WARNING: shift/reduce conflict for FOR in state 277 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 277 resolved as shift
WARNING: shift/reduce conflict for ID in state 278 resolved as shift
WARNING: shift/reduce conflict for READ in state 278 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 278 resolved as shift
WARNING: shift/reduce conflict for IF in state 278 resolved as shift
WARNING: shift/reduce conflict for FOR in state 278 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 278 resolved as shift
WARNING: shift/reduce conflict for ID in state 280 resolved as shift
WARNING: shift/reduce conflict for READ in state 280 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 280 resolved as shift
WARNING: shift/reduce conflict for IF in state 280 resolved as shift
WARNING: shift/reduce conflict for FOR in state 280 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 280 resolved as shift
WARNING: shift/reduce conflict for ID in state 281 resolved as shift
WARNING: shift/reduce conflict for READ in state 281 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 281 resolved as shift
WARNING: shift/reduce conflict for IF in state 281 resolved as shift
WARNING: shift/reduce conflict for FOR in state 281 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 281 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
WARNING: shift/reduce conflict for READ in state 283 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 283 resolved as shift
WARNING: shift/reduce conflict for IF in state 283 resolved as shift
WARNING: shift/reduce conflict for FOR in state 283 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 283 resolved as shift
WARNING: reduce/reduce conflict in state 46 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 46
WARNING: reduce/reduce conflict in state 97 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 97
WARNING: reduce/reduce conflict in state 259 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 259
WARNING: reduce/reduce conflict in state 263 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 263
WARNING: reduce/reduce conflict in state 285 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 285
WARNING: Rule (vars_6 -> empty) is never reduced
