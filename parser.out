Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    main_point -> empty
Rule 11    body -> vars func_agrega_v estatuto body_2
Rule 12    body_2 -> estatuto body_2
Rule 13    body_2 -> empty
Rule 14    tipo_simple -> INT
Rule 15    tipo_simple -> FLOAT
Rule 16    tipo_simple -> CHAR
Rule 17    tipo_comp -> DATAFRAME
Rule 18    vars -> VAR vars_2 SEMICOLON vars_8
Rule 19    vars_2 -> tipo_comp vars_3
Rule 20    vars_2 -> tipo_simple vars_4
Rule 21    vars_3 -> ID vars_5
Rule 22    vars_4 -> vars_3
Rule 23    vars_4 -> ID vars_6
Rule 24    vars_5 -> COMMA vars_3
Rule 25    vars_5 -> empty
Rule 26    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 27    vars_6 -> empty
Rule 28    punto_id_especial -> empty
Rule 29    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 30    vars_7 -> var_array
Rule 31    var_array -> empty
Rule 32    var_mat -> empty
Rule 33    vars_8 -> vars
Rule 34    vars_8 -> empty
Rule 35    param -> tipo_simple ID punto_param param_2
Rule 36    param -> empty
Rule 37    param_2 -> COMMA param
Rule 38    param_2 -> empty
Rule 39    punto_param -> empty
Rule 40    punto_param_2 -> empty
Rule 41    variable -> ID variable_2 variable_point
Rule 42    variable_point -> empty
Rule 43    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 44    variable_2 -> empty
Rule 45    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 46    variable_3 -> empty
Rule 47    estatuto -> asigna
Rule 48    estatuto -> llamada
Rule 49    estatuto -> llamada_void
Rule 50    estatuto -> read
Rule 51    estatuto -> write
Rule 52    estatuto -> if_1
Rule 53    estatuto -> for_l
Rule 54    estatuto -> while_l
Rule 55    estatuto -> return
Rule 56    estatuto -> func_extra
Rule 57    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 58    asigna_point -> empty
Rule 59    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 60    llamada_2 -> COMMA exp llamada_2
Rule 61    llamada_2 -> empty
Rule 62    llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON
Rule 63    llamada_void_2 -> COMMA exp llamada_void_2
Rule 64    llamada_void_2 -> empty
Rule 65    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 66    read_point -> empty
Rule 67    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 68    write_2 -> exp write_point
Rule 69    write_2 -> CTE_S add_constant_s write_point
Rule 70    write_3 -> COMMA write_2 write_3
Rule 71    write_3 -> empty
Rule 72    write_point -> empty
Rule 73    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 74    if_2 -> estatuto if_2
Rule 75    if_2 -> empty
Rule 76    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 77    if_3 -> empty
Rule 78    if_point -> empty
Rule 79    if_point_2 -> empty
Rule 80    if_point_3 -> empty
Rule 81    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 82    for_l_2 -> estatuto for_l_2
Rule 83    for_l_2 -> empty
Rule 84    for_point_1 -> empty
Rule 85    for_point_2 -> empty
Rule 86    for_point_3 -> empty
Rule 87    for_point_4 -> empty
Rule 88    while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 89    while_l_2 -> estatuto while_l_2
Rule 90    while_l_2 -> empty
Rule 91    while_point -> empty
Rule 92    while_point_2 -> empty
Rule 93    while_point_3 -> empty
Rule 94    return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON
Rule 95    check_valid_func -> empty
Rule 96    func_extra -> empty
Rule 97    exp -> t_exp add_operator_4 exp_2
Rule 98    exp_2 -> OR add_operator exp
Rule 99    exp_2 -> empty
Rule 100   t_exp -> g_exp add_operator_4 t_exp_2
Rule 101   t_exp_2 -> AND add_operator t_exp
Rule 102   t_exp_2 -> empty
Rule 103   g_exp -> m_exp g_exp_2 add_operator_3
Rule 104   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 105   g_exp_2 -> LESS add_operator m_exp
Rule 106   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 107   g_exp_2 -> GREATER add_operator m_exp
Rule 108   g_exp_2 -> COMPARE add_operator m_exp
Rule 109   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 110   g_exp_2 -> empty
Rule 111   m_exp -> t add_operator_2 m_exp_2
Rule 112   m_exp_2 -> PLUS add_operator m_exp
Rule 113   m_exp_2 -> MINUS add_operator m_exp
Rule 114   m_exp_2 -> empty
Rule 115   t -> f add_operator_1 t_2
Rule 116   t_2 -> TIMES add_operator t
Rule 117   t_2 -> DIVIDE add_operator t
Rule 118   t_2 -> empty
Rule 119   f -> LPAR add_floor exp RPAR remove_floor
Rule 120   f -> variable
Rule 121   f -> llamada
Rule 122   f -> f_2
Rule 123   f_2 -> CTE_I add_constant_i
Rule 124   f_2 -> CTE_F add_constant_f
Rule 125   add_floor -> empty
Rule 126   remove_floor -> empty
Rule 127   add_operator -> empty
Rule 128   add_operator_1 -> empty
Rule 129   add_operator_2 -> empty
Rule 130   add_operator_3 -> empty
Rule 131   add_operator_4 -> empty
Rule 132   add_constant_i -> empty
Rule 133   add_constant_s -> empty
Rule 134   add_constant_f -> empty
Rule 135   function -> FUNC function_2 SEMICOLON function_4
Rule 136   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 137   function_3 -> tipo_simple
Rule 138   function_3 -> VOID
Rule 139   function_4 -> function
Rule 140   function_4 -> empty
Rule 141   function_punto1 -> empty
Rule 142   func_agrega_v -> empty
Rule 143   final_func_point -> empty
Rule 144   empty -> <empty>

Terminals, with rules where they appear

AND                  : 101
CHAR                 : 16
COLON                : 1
COMMA                : 24 37 60 63 70
COMPARE              : 108
CTE_F                : 124
CTE_I                : 26 29 123
CTE_S                : 69
DATAFRAME            : 17
DIVIDE               : 117
ELSE                 : 76
EQUAL                : 57 81
FLOAT                : 15
FOR                  : 81
FUNC                 : 135
GREATER              : 107
GREATER_EQUAL        : 106
ID                   : 1 21 23 35 41 59 62 81 136
IF                   : 73
INT                  : 14
LESS                 : 105
LESS_EQUAL           : 104
LPAR                 : 9 59 62 65 67 73 81 88 94 119 136
L_C_BRACKET          : 9 73 76 81 88 136
L_S_BRACKET          : 26 29 43 45
MAIN                 : 9
MINUS                : 113
NOT_EQUAL            : 109
OR                   : 98
PLUS                 : 112
PROGRAM              : 1
READ                 : 65
RETURN               : 94
RPAR                 : 9 59 62 65 67 73 81 88 94 119 136
R_C_BRACKET          : 9 73 76 81 88 136
R_S_BRACKET          : 26 29 43 45
SEMICOLON            : 9 18 57 59 62 65 67 73 81 88 94 135
STRING               : 
TIMES                : 116
TO                   : 81
VAR                  : 18
VOID                 : 138
WHILE                : 88
WRITE                : 67
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 124
add_constant_i       : 123
add_constant_s       : 69
add_floor            : 119
add_operator         : 57 98 101 104 105 106 107 108 109 112 113 116 117
add_operator_1       : 115
add_operator_2       : 111
add_operator_3       : 103
add_operator_4       : 97 100
asigna               : 47
asigna_point         : 57
body                 : 9 136
body_2               : 11 12
check_valid_func     : 94
empty                : 2 4 6 8 10 13 25 27 28 31 32 34 36 38 39 40 42 44 46 58 61 64 66 71 72 75 77 78 79 80 83 84 85 86 87 90 91 92 93 95 96 99 102 110 114 118 125 126 127 128 129 130 131 132 133 134 140 141 142 143
estatuto             : 11 12 73 74 76 81 82 88 89
exp                  : 43 45 57 59 60 62 63 68 73 81 81 88 94 98 119
exp_2                : 97
f                    : 115
f_2                  : 122
final_func_point     : 136
for_l                : 53
for_l_2              : 81 82
for_point_1          : 81
for_point_2          : 81
for_point_3          : 81
for_point_4          : 81
func_agrega_v        : 11
func_extra           : 56
function             : 7 139
function_2           : 135
function_3           : 136
function_4           : 135
function_punto1      : 136
g_exp                : 100
g_exp_2              : 103
if_1                 : 52
if_2                 : 73 74 76
if_3                 : 73
if_point             : 73
if_point_2           : 73
if_point_3           : 76
llamada              : 48 121
llamada_2            : 59 60
llamada_void         : 49
llamada_void_2       : 62 63
m_exp                : 103 104 105 106 107 108 109 112 113
m_exp_2              : 111
main                 : 1
main_point           : 9
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 37 136
param_2              : 35
program              : 0
program_point        : 1
punto_id_especial    : 26
punto_param          : 35
punto_param_2        : 136
read                 : 50
read_point           : 65
remove_floor         : 119
return               : 55
t                    : 111 116 117
t_2                  : 115
t_exp                : 97 101
t_exp_2              : 100
tipo_comp            : 19
tipo_simple          : 20 35 137
var_array            : 30
var_mat              : 29
variable             : 57 65 120
variable_2           : 41
variable_3           : 43
variable_point       : 41
vars                 : 5 11 33
vars_2               : 18
vars_3               : 19 22 24
vars_4               : 20
vars_5               : 21
vars_6               : 23
vars_7               : 26
vars_8               : 18
while_l              : 54
while_l_2            : 88 89
while_point          : 88
while_point_2        : 88
while_point_3        : 88
write                : 51
write_2              : 67 70
write_3              : 67 70
write_point          : 68 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (144) empty -> .

    ID              reduce using rule 144 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (144) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 144 (empty -> .)
    MAIN            reduce using rule 144 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (144) empty -> .

    FUNC            reduce using rule 144 (empty -> .)
    MAIN            reduce using rule 144 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (18) vars -> VAR . vars_2 SEMICOLON vars_8
    (19) vars_2 -> . tipo_comp vars_3
    (20) vars_2 -> . tipo_simple vars_4
    (17) tipo_comp -> . DATAFRAME
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
    (10) main_point -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (135) function -> . FUNC function_2 SEMICOLON function_4
    (144) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 144 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (18) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (19) vars_2 -> tipo_comp . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (20) vars_2 -> tipo_simple . vars_4
    (22) vars_4 -> . vars_3
    (23) vars_4 -> . ID vars_6
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (17) tipo_comp -> DATAFRAME .

    ID              reduce using rule 17 (tipo_comp -> DATAFRAME .)


state 20

    (14) tipo_simple -> INT .

    ID              reduce using rule 14 (tipo_simple -> INT .)


state 21

    (15) tipo_simple -> FLOAT .

    ID              reduce using rule 15 (tipo_simple -> FLOAT .)


state 22

    (16) tipo_simple -> CHAR .

    ID              reduce using rule 16 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 35


state 24

    (10) main_point -> empty .

    LPAR            reduce using rule 10 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 26

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 27

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 28

    (135) function -> FUNC . function_2 SEMICOLON function_4
    (136) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (137) function_3 -> . tipo_simple
    (138) function_3 -> . VOID
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    VOID            shift and go to state 39
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 36
    function_3                     shift and go to state 37
    tipo_simple                    shift and go to state 38

state 29

    (18) vars -> VAR vars_2 SEMICOLON . vars_8
    (33) vars_8 -> . vars
    (34) vars_8 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (144) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 144 (empty -> .)
    MAIN            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    READ            reduce using rule 144 (empty -> .)
    WRITE           reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    R_C_BRACKET     reduce using rule 144 (empty -> .)

    vars_8                         shift and go to state 40
    vars                           shift and go to state 41
    empty                          shift and go to state 42

state 30

    (19) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_comp vars_3 .)


state 31

    (21) vars_3 -> ID . vars_5
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 144 (empty -> .)

    vars_5                         shift and go to state 43
    empty                          shift and go to state 45

state 32

    (20) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 20 (vars_2 -> tipo_simple vars_4 .)


state 33

    (22) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 22 (vars_4 -> vars_3 .)


state 34

    (23) vars_4 -> ID . vars_6
    (21) vars_3 -> ID . vars_5
    (26) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (27) vars_6 -> . empty
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (28) punto_id_especial -> . empty
    (144) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 144 (empty -> .)
    L_S_BRACKET     reduce using rule 144 (empty -> .)

    vars_6                         shift and go to state 46
    vars_5                         shift and go to state 43
    punto_id_especial              shift and go to state 47
    empty                          shift and go to state 48

state 35

    (9) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 49


state 36

    (135) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 50


state 37

    (136) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 51


state 38

    (137) function_3 -> tipo_simple .

    ID              reduce using rule 137 (function_3 -> tipo_simple .)


state 39

    (138) function_3 -> VOID .

    ID              reduce using rule 138 (function_3 -> VOID .)


state 40

    (18) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 41

    (33) vars_8 -> vars .

    FUNC            reduce using rule 33 (vars_8 -> vars .)
    MAIN            reduce using rule 33 (vars_8 -> vars .)
    ID              reduce using rule 33 (vars_8 -> vars .)
    READ            reduce using rule 33 (vars_8 -> vars .)
    WRITE           reduce using rule 33 (vars_8 -> vars .)
    IF              reduce using rule 33 (vars_8 -> vars .)
    FOR             reduce using rule 33 (vars_8 -> vars .)
    WHILE           reduce using rule 33 (vars_8 -> vars .)
    RETURN          reduce using rule 33 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> vars .)


state 42

    (34) vars_8 -> empty .

    FUNC            reduce using rule 34 (vars_8 -> empty .)
    MAIN            reduce using rule 34 (vars_8 -> empty .)
    ID              reduce using rule 34 (vars_8 -> empty .)
    READ            reduce using rule 34 (vars_8 -> empty .)
    WRITE           reduce using rule 34 (vars_8 -> empty .)
    IF              reduce using rule 34 (vars_8 -> empty .)
    FOR             reduce using rule 34 (vars_8 -> empty .)
    WHILE           reduce using rule 34 (vars_8 -> empty .)
    RETURN          reduce using rule 34 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 34 (vars_8 -> empty .)


state 43

    (21) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 21 (vars_3 -> ID vars_5 .)


state 44

    (24) vars_5 -> COMMA . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 52

state 45

    (25) vars_5 -> empty .

    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)


state 46

    (23) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 23 (vars_4 -> ID vars_6 .)


state 47

    (26) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 53


state 48

    (27) vars_6 -> empty .
    (25) vars_5 -> empty .
    (28) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 28 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 27 (vars_6 -> empty .) ]


state 49

    (9) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 54


state 50

    (135) function -> FUNC function_2 SEMICOLON . function_4
    (139) function_4 -> . function
    (140) function_4 -> . empty
    (135) function -> . FUNC function_2 SEMICOLON function_4
    (144) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 144 (empty -> .)

    function_4                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 51

    (136) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (141) function_punto1 -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 52

    (24) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 24 (vars_5 -> COMMA vars_3 .)


state 53

    (26) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 60


state 54

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 61
    vars                           shift and go to state 62

state 55

    (135) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 135 (function -> FUNC function_2 SEMICOLON function_4 .)


state 56

    (139) function_4 -> function .

    MAIN            reduce using rule 139 (function_4 -> function .)


state 57

    (140) function_4 -> empty .

    MAIN            reduce using rule 140 (function_4 -> empty .)


state 58

    (136) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 63


state 59

    (141) function_punto1 -> empty .

    LPAR            reduce using rule 141 (function_punto1 -> empty .)


state 60

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 64


state 61

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 65


state 62

    (11) body -> vars . func_agrega_v estatuto body_2
    (142) func_agrega_v -> . empty
    (144) empty -> .

    ID              reduce using rule 144 (empty -> .)
    READ            reduce using rule 144 (empty -> .)
    WRITE           reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    R_C_BRACKET     reduce using rule 144 (empty -> .)

    func_agrega_v                  shift and go to state 66
    empty                          shift and go to state 67

state 63

    (136) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (144) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 144 (empty -> .)

    param                          shift and go to state 68
    tipo_simple                    shift and go to state 69
    empty                          shift and go to state 70

state 64

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (29) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (30) vars_7 -> . var_array
    (31) var_array -> . empty
    (144) empty -> .

    L_S_BRACKET     shift and go to state 71
    SEMICOLON       reduce using rule 144 (empty -> .)

    vars_7                         shift and go to state 72
    var_array                      shift and go to state 73
    empty                          shift and go to state 74

state 65

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 75


state 66

    (11) body -> vars func_agrega_v . estatuto body_2
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (144) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 144 (empty -> .)

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 76
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 67

    (142) func_agrega_v -> empty .

    ID              reduce using rule 142 (func_agrega_v -> empty .)
    READ            reduce using rule 142 (func_agrega_v -> empty .)
    WRITE           reduce using rule 142 (func_agrega_v -> empty .)
    IF              reduce using rule 142 (func_agrega_v -> empty .)
    FOR             reduce using rule 142 (func_agrega_v -> empty .)
    WHILE           reduce using rule 142 (func_agrega_v -> empty .)
    RETURN          reduce using rule 142 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 142 (func_agrega_v -> empty .)


state 68

    (136) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (40) punto_param_2 -> . empty
    (144) empty -> .

    RPAR            reduce using rule 144 (empty -> .)

    punto_param_2                  shift and go to state 96
    empty                          shift and go to state 97

state 69

    (35) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 98


state 70

    (36) param -> empty .

    RPAR            reduce using rule 36 (param -> empty .)


state 71

    (29) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 99


state 72

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 26 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 73

    (30) vars_7 -> var_array .

    SEMICOLON       reduce using rule 30 (vars_7 -> var_array .)


state 74

    (31) var_array -> empty .

    SEMICOLON       reduce using rule 31 (var_array -> empty .)


state 75

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 76

    (11) body -> vars func_agrega_v estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 100
    body_2                         shift and go to state 101
    empty                          shift and go to state 102
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 77

    (47) estatuto -> asigna .

    ID              reduce using rule 47 (estatuto -> asigna .)
    READ            reduce using rule 47 (estatuto -> asigna .)
    WRITE           reduce using rule 47 (estatuto -> asigna .)
    IF              reduce using rule 47 (estatuto -> asigna .)
    FOR             reduce using rule 47 (estatuto -> asigna .)
    WHILE           reduce using rule 47 (estatuto -> asigna .)
    RETURN          reduce using rule 47 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> asigna .)


state 78

    (48) estatuto -> llamada .

    ID              reduce using rule 48 (estatuto -> llamada .)
    READ            reduce using rule 48 (estatuto -> llamada .)
    WRITE           reduce using rule 48 (estatuto -> llamada .)
    IF              reduce using rule 48 (estatuto -> llamada .)
    FOR             reduce using rule 48 (estatuto -> llamada .)
    WHILE           reduce using rule 48 (estatuto -> llamada .)
    RETURN          reduce using rule 48 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> llamada .)


state 79

    (49) estatuto -> llamada_void .

    ID              reduce using rule 49 (estatuto -> llamada_void .)
    READ            reduce using rule 49 (estatuto -> llamada_void .)
    WRITE           reduce using rule 49 (estatuto -> llamada_void .)
    IF              reduce using rule 49 (estatuto -> llamada_void .)
    FOR             reduce using rule 49 (estatuto -> llamada_void .)
    WHILE           reduce using rule 49 (estatuto -> llamada_void .)
    RETURN          reduce using rule 49 (estatuto -> llamada_void .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> llamada_void .)


state 80

    (50) estatuto -> read .

    ID              reduce using rule 50 (estatuto -> read .)
    READ            reduce using rule 50 (estatuto -> read .)
    WRITE           reduce using rule 50 (estatuto -> read .)
    IF              reduce using rule 50 (estatuto -> read .)
    FOR             reduce using rule 50 (estatuto -> read .)
    WHILE           reduce using rule 50 (estatuto -> read .)
    RETURN          reduce using rule 50 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> read .)


state 81

    (51) estatuto -> write .

    ID              reduce using rule 51 (estatuto -> write .)
    READ            reduce using rule 51 (estatuto -> write .)
    WRITE           reduce using rule 51 (estatuto -> write .)
    IF              reduce using rule 51 (estatuto -> write .)
    FOR             reduce using rule 51 (estatuto -> write .)
    WHILE           reduce using rule 51 (estatuto -> write .)
    RETURN          reduce using rule 51 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> write .)


state 82

    (52) estatuto -> if_1 .

    ID              reduce using rule 52 (estatuto -> if_1 .)
    READ            reduce using rule 52 (estatuto -> if_1 .)
    WRITE           reduce using rule 52 (estatuto -> if_1 .)
    IF              reduce using rule 52 (estatuto -> if_1 .)
    FOR             reduce using rule 52 (estatuto -> if_1 .)
    WHILE           reduce using rule 52 (estatuto -> if_1 .)
    RETURN          reduce using rule 52 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> if_1 .)


state 83

    (53) estatuto -> for_l .

    ID              reduce using rule 53 (estatuto -> for_l .)
    READ            reduce using rule 53 (estatuto -> for_l .)
    WRITE           reduce using rule 53 (estatuto -> for_l .)
    IF              reduce using rule 53 (estatuto -> for_l .)
    FOR             reduce using rule 53 (estatuto -> for_l .)
    WHILE           reduce using rule 53 (estatuto -> for_l .)
    RETURN          reduce using rule 53 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> for_l .)


state 84

    (54) estatuto -> while_l .

    ID              reduce using rule 54 (estatuto -> while_l .)
    READ            reduce using rule 54 (estatuto -> while_l .)
    WRITE           reduce using rule 54 (estatuto -> while_l .)
    IF              reduce using rule 54 (estatuto -> while_l .)
    FOR             reduce using rule 54 (estatuto -> while_l .)
    WHILE           reduce using rule 54 (estatuto -> while_l .)
    RETURN          reduce using rule 54 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> while_l .)


state 85

    (55) estatuto -> return .

    ID              reduce using rule 55 (estatuto -> return .)
    READ            reduce using rule 55 (estatuto -> return .)
    WRITE           reduce using rule 55 (estatuto -> return .)
    IF              reduce using rule 55 (estatuto -> return .)
    FOR             reduce using rule 55 (estatuto -> return .)
    WHILE           reduce using rule 55 (estatuto -> return .)
    RETURN          reduce using rule 55 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> return .)


state 86

    (56) estatuto -> func_extra .

    ID              reduce using rule 56 (estatuto -> func_extra .)
    READ            reduce using rule 56 (estatuto -> func_extra .)
    WRITE           reduce using rule 56 (estatuto -> func_extra .)
    IF              reduce using rule 56 (estatuto -> func_extra .)
    FOR             reduce using rule 56 (estatuto -> func_extra .)
    WHILE           reduce using rule 56 (estatuto -> func_extra .)
    RETURN          reduce using rule 56 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 56 (estatuto -> func_extra .)


state 87

    (57) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 103


state 88

    (59) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> ID . LPAR exp llamada_void_2 RPAR SEMICOLON
    (41) variable -> ID . variable_2 variable_point
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (144) empty -> .

    LPAR            shift and go to state 104
    L_S_BRACKET     shift and go to state 106
    EQUAL           reduce using rule 144 (empty -> .)

    variable_2                     shift and go to state 105
    empty                          shift and go to state 107

state 89

    (65) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 108


state 90

    (67) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 109


state 91

    (73) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 110


state 92

    (81) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 111


state 93

    (88) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (91) while_point -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)

    while_point                    shift and go to state 112
    empty                          shift and go to state 113

state 94

    (94) return -> RETURN . check_valid_func LPAR exp RPAR SEMICOLON
    (95) check_valid_func -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)

    check_valid_func               shift and go to state 114
    empty                          shift and go to state 115

state 95

    (96) func_extra -> empty .

    ID              reduce using rule 96 (func_extra -> empty .)
    READ            reduce using rule 96 (func_extra -> empty .)
    WRITE           reduce using rule 96 (func_extra -> empty .)
    IF              reduce using rule 96 (func_extra -> empty .)
    FOR             reduce using rule 96 (func_extra -> empty .)
    WHILE           reduce using rule 96 (func_extra -> empty .)
    RETURN          reduce using rule 96 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 96 (func_extra -> empty .)


state 96

    (136) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 116


state 97

    (40) punto_param_2 -> empty .

    RPAR            reduce using rule 40 (punto_param_2 -> empty .)


state 98

    (35) param -> tipo_simple ID . punto_param param_2
    (39) punto_param -> . empty
    (144) empty -> .

    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)

    punto_param                    shift and go to state 117
    empty                          shift and go to state 118

state 99

    (29) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 119


state 100

    (12) body_2 -> estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 100
    body_2                         shift and go to state 120
    empty                          shift and go to state 102
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 101

    (11) body -> vars func_agrega_v estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body -> vars func_agrega_v estatuto body_2 .)


state 102

    (13) body_2 -> empty .
    (96) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 13 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 13 (body_2 -> empty .)
    ID              reduce using rule 96 (func_extra -> empty .)
    READ            reduce using rule 96 (func_extra -> empty .)
    WRITE           reduce using rule 96 (func_extra -> empty .)
    IF              reduce using rule 96 (func_extra -> empty .)
    FOR             reduce using rule 96 (func_extra -> empty .)
    WHILE           reduce using rule 96 (func_extra -> empty .)
    RETURN          reduce using rule 96 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 96 (func_extra -> empty .) ]


state 103

    (57) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 121
    empty                          shift and go to state 122

state 104

    (59) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> ID LPAR . exp llamada_void_2 RPAR SEMICOLON
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 125
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 105

    (41) variable -> ID variable_2 . variable_point
    (42) variable_point -> . empty
    (144) empty -> .

    EQUAL           reduce using rule 144 (empty -> .)
    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    variable_point                 shift and go to state 136
    empty                          shift and go to state 137

state 106

    (43) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 138
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 107

    (44) variable_2 -> empty .

    EQUAL           reduce using rule 44 (variable_2 -> empty .)
    TIMES           reduce using rule 44 (variable_2 -> empty .)
    DIVIDE          reduce using rule 44 (variable_2 -> empty .)
    PLUS            reduce using rule 44 (variable_2 -> empty .)
    MINUS           reduce using rule 44 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 44 (variable_2 -> empty .)
    LESS            reduce using rule 44 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 44 (variable_2 -> empty .)
    GREATER         reduce using rule 44 (variable_2 -> empty .)
    COMPARE         reduce using rule 44 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 44 (variable_2 -> empty .)
    AND             reduce using rule 44 (variable_2 -> empty .)
    OR              reduce using rule 44 (variable_2 -> empty .)
    COMMA           reduce using rule 44 (variable_2 -> empty .)
    RPAR            reduce using rule 44 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 44 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 44 (variable_2 -> empty .)
    TO              reduce using rule 44 (variable_2 -> empty .)


state 108

    (65) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (41) variable -> . ID variable_2 variable_point

    ID              shift and go to state 140

    variable                       shift and go to state 139

state 109

    (67) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (68) write_2 -> . exp write_point
    (69) write_2 -> . CTE_S add_constant_s write_point
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 143
    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    write_2                        shift and go to state 141
    exp                            shift and go to state 142
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 110

    (73) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 144
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 111

    (81) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 145


state 112

    (88) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 146


state 113

    (91) while_point -> empty .

    LPAR            reduce using rule 91 (while_point -> empty .)


state 114

    (94) return -> RETURN check_valid_func . LPAR exp RPAR SEMICOLON

    LPAR            shift and go to state 147


state 115

    (95) check_valid_func -> empty .

    LPAR            reduce using rule 95 (check_valid_func -> empty .)


state 116

    (136) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 148


state 117

    (35) param -> tipo_simple ID punto_param . param_2
    (37) param_2 -> . COMMA param
    (38) param_2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 150
    RPAR            reduce using rule 144 (empty -> .)

    param_2                        shift and go to state 149
    empty                          shift and go to state 151

state 118

    (39) punto_param -> empty .

    COMMA           reduce using rule 39 (punto_param -> empty .)
    RPAR            reduce using rule 39 (punto_param -> empty .)


state 119

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (32) var_mat -> . empty
    (144) empty -> .

    SEMICOLON       reduce using rule 144 (empty -> .)

    var_mat                        shift and go to state 152
    empty                          shift and go to state 153

state 120

    (12) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 12 (body_2 -> estatuto body_2 .)


state 121

    (57) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    variable                       shift and go to state 131
    exp                            shift and go to state 154
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 122

    (127) add_operator -> empty .

    LPAR            reduce using rule 127 (add_operator -> empty .)
    ID              reduce using rule 127 (add_operator -> empty .)
    CTE_I           reduce using rule 127 (add_operator -> empty .)
    CTE_F           reduce using rule 127 (add_operator -> empty .)


state 123

    (41) variable -> ID . variable_2 variable_point
    (59) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (144) empty -> .

    LPAR            shift and go to state 155
    L_S_BRACKET     shift and go to state 106
    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    variable_2                     shift and go to state 105
    empty                          shift and go to state 107

state 124

    (119) f -> LPAR . add_floor exp RPAR remove_floor
    (125) add_floor -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_floor                      shift and go to state 156
    empty                          shift and go to state 157

state 125

    (59) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (62) llamada_void -> ID LPAR exp . llamada_void_2 RPAR SEMICOLON
    (60) llamada_2 -> . COMMA exp llamada_2
    (61) llamada_2 -> . empty
    (63) llamada_void_2 -> . COMMA exp llamada_void_2
    (64) llamada_void_2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 160
    RPAR            reduce using rule 144 (empty -> .)

    llamada_2                      shift and go to state 158
    llamada_void_2                 shift and go to state 159
    empty                          shift and go to state 161

state 126

    (97) exp -> t_exp . add_operator_4 exp_2
    (131) add_operator_4 -> . empty
    (144) empty -> .

    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_operator_4                 shift and go to state 162
    empty                          shift and go to state 163

state 127

    (100) t_exp -> g_exp . add_operator_4 t_exp_2
    (131) add_operator_4 -> . empty
    (144) empty -> .

    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_operator_4                 shift and go to state 164
    empty                          shift and go to state 163

state 128

    (103) g_exp -> m_exp . g_exp_2 add_operator_3
    (104) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (105) g_exp_2 -> . LESS add_operator m_exp
    (106) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (107) g_exp_2 -> . GREATER add_operator m_exp
    (108) g_exp_2 -> . COMPARE add_operator m_exp
    (109) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (110) g_exp_2 -> . empty
    (144) empty -> .

    LESS_EQUAL      shift and go to state 166
    LESS            shift and go to state 167
    GREATER_EQUAL   shift and go to state 168
    GREATER         shift and go to state 169
    COMPARE         shift and go to state 170
    NOT_EQUAL       shift and go to state 171
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    g_exp_2                        shift and go to state 165
    empty                          shift and go to state 172

state 129

    (111) m_exp -> t . add_operator_2 m_exp_2
    (129) add_operator_2 -> . empty
    (144) empty -> .

    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_operator_2                 shift and go to state 173
    empty                          shift and go to state 174

state 130

    (115) t -> f . add_operator_1 t_2
    (128) add_operator_1 -> . empty
    (144) empty -> .

    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_operator_1                 shift and go to state 175
    empty                          shift and go to state 176

state 131

    (120) f -> variable .

    TIMES           reduce using rule 120 (f -> variable .)
    DIVIDE          reduce using rule 120 (f -> variable .)
    PLUS            reduce using rule 120 (f -> variable .)
    MINUS           reduce using rule 120 (f -> variable .)
    LESS_EQUAL      reduce using rule 120 (f -> variable .)
    LESS            reduce using rule 120 (f -> variable .)
    GREATER_EQUAL   reduce using rule 120 (f -> variable .)
    GREATER         reduce using rule 120 (f -> variable .)
    COMPARE         reduce using rule 120 (f -> variable .)
    NOT_EQUAL       reduce using rule 120 (f -> variable .)
    AND             reduce using rule 120 (f -> variable .)
    OR              reduce using rule 120 (f -> variable .)
    COMMA           reduce using rule 120 (f -> variable .)
    RPAR            reduce using rule 120 (f -> variable .)
    R_S_BRACKET     reduce using rule 120 (f -> variable .)
    SEMICOLON       reduce using rule 120 (f -> variable .)
    TO              reduce using rule 120 (f -> variable .)


state 132

    (121) f -> llamada .

    TIMES           reduce using rule 121 (f -> llamada .)
    DIVIDE          reduce using rule 121 (f -> llamada .)
    PLUS            reduce using rule 121 (f -> llamada .)
    MINUS           reduce using rule 121 (f -> llamada .)
    LESS_EQUAL      reduce using rule 121 (f -> llamada .)
    LESS            reduce using rule 121 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 121 (f -> llamada .)
    GREATER         reduce using rule 121 (f -> llamada .)
    COMPARE         reduce using rule 121 (f -> llamada .)
    NOT_EQUAL       reduce using rule 121 (f -> llamada .)
    AND             reduce using rule 121 (f -> llamada .)
    OR              reduce using rule 121 (f -> llamada .)
    COMMA           reduce using rule 121 (f -> llamada .)
    RPAR            reduce using rule 121 (f -> llamada .)
    R_S_BRACKET     reduce using rule 121 (f -> llamada .)
    SEMICOLON       reduce using rule 121 (f -> llamada .)
    TO              reduce using rule 121 (f -> llamada .)


state 133

    (122) f -> f_2 .

    TIMES           reduce using rule 122 (f -> f_2 .)
    DIVIDE          reduce using rule 122 (f -> f_2 .)
    PLUS            reduce using rule 122 (f -> f_2 .)
    MINUS           reduce using rule 122 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 122 (f -> f_2 .)
    LESS            reduce using rule 122 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 122 (f -> f_2 .)
    GREATER         reduce using rule 122 (f -> f_2 .)
    COMPARE         reduce using rule 122 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 122 (f -> f_2 .)
    AND             reduce using rule 122 (f -> f_2 .)
    OR              reduce using rule 122 (f -> f_2 .)
    COMMA           reduce using rule 122 (f -> f_2 .)
    RPAR            reduce using rule 122 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 122 (f -> f_2 .)
    SEMICOLON       reduce using rule 122 (f -> f_2 .)
    TO              reduce using rule 122 (f -> f_2 .)


state 134

    (123) f_2 -> CTE_I . add_constant_i
    (132) add_constant_i -> . empty
    (144) empty -> .

    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_constant_i                 shift and go to state 177
    empty                          shift and go to state 178

state 135

    (124) f_2 -> CTE_F . add_constant_f
    (134) add_constant_f -> . empty
    (144) empty -> .

    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_constant_f                 shift and go to state 179
    empty                          shift and go to state 180

state 136

    (41) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 41 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 41 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 41 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 41 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 41 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 41 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 41 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 41 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 41 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 41 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 41 (variable -> ID variable_2 variable_point .)


state 137

    (42) variable_point -> empty .

    EQUAL           reduce using rule 42 (variable_point -> empty .)
    TIMES           reduce using rule 42 (variable_point -> empty .)
    DIVIDE          reduce using rule 42 (variable_point -> empty .)
    PLUS            reduce using rule 42 (variable_point -> empty .)
    MINUS           reduce using rule 42 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 42 (variable_point -> empty .)
    LESS            reduce using rule 42 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 42 (variable_point -> empty .)
    GREATER         reduce using rule 42 (variable_point -> empty .)
    COMPARE         reduce using rule 42 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 42 (variable_point -> empty .)
    AND             reduce using rule 42 (variable_point -> empty .)
    OR              reduce using rule 42 (variable_point -> empty .)
    COMMA           reduce using rule 42 (variable_point -> empty .)
    RPAR            reduce using rule 42 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 42 (variable_point -> empty .)
    SEMICOLON       reduce using rule 42 (variable_point -> empty .)
    TO              reduce using rule 42 (variable_point -> empty .)


state 138

    (43) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 181


state 139

    (65) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (66) read_point -> . empty
    (144) empty -> .

    RPAR            reduce using rule 144 (empty -> .)

    read_point                     shift and go to state 182
    empty                          shift and go to state 183

state 140

    (41) variable -> ID . variable_2 variable_point
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (144) empty -> .

    L_S_BRACKET     shift and go to state 106
    RPAR            reduce using rule 144 (empty -> .)

    variable_2                     shift and go to state 105
    empty                          shift and go to state 107

state 141

    (67) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (70) write_3 -> . COMMA write_2 write_3
    (71) write_3 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 185
    RPAR            reduce using rule 144 (empty -> .)

    write_3                        shift and go to state 184
    empty                          shift and go to state 186

state 142

    (68) write_2 -> exp . write_point
    (72) write_point -> . empty
    (144) empty -> .

    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)

    write_point                    shift and go to state 187
    empty                          shift and go to state 188

state 143

    (69) write_2 -> CTE_S . add_constant_s write_point
    (133) add_constant_s -> . empty
    (144) empty -> .

    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)

    add_constant_s                 shift and go to state 189
    empty                          shift and go to state 190

state 144

    (73) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (78) if_point -> . empty
    (144) empty -> .

    RPAR            reduce using rule 144 (empty -> .)

    if_point                       shift and go to state 191
    empty                          shift and go to state 192

state 145

    (81) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) for_point_1 -> . empty
    (144) empty -> .

    EQUAL           reduce using rule 144 (empty -> .)

    for_point_1                    shift and go to state 193
    empty                          shift and go to state 194

state 146

    (88) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 195
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 147

    (94) return -> RETURN check_valid_func LPAR . exp RPAR SEMICOLON
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 196
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 148

    (136) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 197
    vars                           shift and go to state 62

state 149

    (35) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 35 (param -> tipo_simple ID punto_param param_2 .)


state 150

    (37) param_2 -> COMMA . param
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (144) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 144 (empty -> .)

    param                          shift and go to state 198
    tipo_simple                    shift and go to state 69
    empty                          shift and go to state 70

state 151

    (38) param_2 -> empty .

    RPAR            reduce using rule 38 (param_2 -> empty .)


state 152

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 29 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 153

    (32) var_mat -> empty .

    SEMICOLON       reduce using rule 32 (var_mat -> empty .)


state 154

    (57) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (58) asigna_point -> . empty
    (144) empty -> .

    SEMICOLON       reduce using rule 144 (empty -> .)

    asigna_point                   shift and go to state 199
    empty                          shift and go to state 200

state 155

    (59) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 201
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 156

    (119) f -> LPAR add_floor . exp RPAR remove_floor
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 202
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 157

    (125) add_floor -> empty .

    LPAR            reduce using rule 125 (add_floor -> empty .)
    ID              reduce using rule 125 (add_floor -> empty .)
    CTE_I           reduce using rule 125 (add_floor -> empty .)
    CTE_F           reduce using rule 125 (add_floor -> empty .)


state 158

    (59) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 203


state 159

    (62) llamada_void -> ID LPAR exp llamada_void_2 . RPAR SEMICOLON

    RPAR            shift and go to state 204


state 160

    (60) llamada_2 -> COMMA . exp llamada_2
    (63) llamada_void_2 -> COMMA . exp llamada_void_2
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 205
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 161

    (61) llamada_2 -> empty .
    (64) llamada_void_2 -> empty .

  ! reduce/reduce conflict for RPAR resolved using rule 61 (llamada_2 -> empty .)
    RPAR            reduce using rule 61 (llamada_2 -> empty .)

  ! RPAR            [ reduce using rule 64 (llamada_void_2 -> empty .) ]


state 162

    (97) exp -> t_exp add_operator_4 . exp_2
    (98) exp_2 -> . OR add_operator exp
    (99) exp_2 -> . empty
    (144) empty -> .

    OR              shift and go to state 207
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    exp_2                          shift and go to state 206
    empty                          shift and go to state 208

state 163

    (131) add_operator_4 -> empty .

    OR              reduce using rule 131 (add_operator_4 -> empty .)
    COMMA           reduce using rule 131 (add_operator_4 -> empty .)
    RPAR            reduce using rule 131 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 131 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 131 (add_operator_4 -> empty .)
    TO              reduce using rule 131 (add_operator_4 -> empty .)
    AND             reduce using rule 131 (add_operator_4 -> empty .)


state 164

    (100) t_exp -> g_exp add_operator_4 . t_exp_2
    (101) t_exp_2 -> . AND add_operator t_exp
    (102) t_exp_2 -> . empty
    (144) empty -> .

    AND             shift and go to state 210
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    t_exp_2                        shift and go to state 209
    empty                          shift and go to state 211

state 165

    (103) g_exp -> m_exp g_exp_2 . add_operator_3
    (130) add_operator_3 -> . empty
    (144) empty -> .

    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    add_operator_3                 shift and go to state 212
    empty                          shift and go to state 213

state 166

    (104) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 214
    empty                          shift and go to state 122

state 167

    (105) g_exp_2 -> LESS . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 215
    empty                          shift and go to state 122

state 168

    (106) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 216
    empty                          shift and go to state 122

state 169

    (107) g_exp_2 -> GREATER . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 217
    empty                          shift and go to state 122

state 170

    (108) g_exp_2 -> COMPARE . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 218
    empty                          shift and go to state 122

state 171

    (109) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 219
    empty                          shift and go to state 122

state 172

    (110) g_exp_2 -> empty .

    AND             reduce using rule 110 (g_exp_2 -> empty .)
    OR              reduce using rule 110 (g_exp_2 -> empty .)
    COMMA           reduce using rule 110 (g_exp_2 -> empty .)
    RPAR            reduce using rule 110 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 110 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 110 (g_exp_2 -> empty .)
    TO              reduce using rule 110 (g_exp_2 -> empty .)


state 173

    (111) m_exp -> t add_operator_2 . m_exp_2
    (112) m_exp_2 -> . PLUS add_operator m_exp
    (113) m_exp_2 -> . MINUS add_operator m_exp
    (114) m_exp_2 -> . empty
    (144) empty -> .

    PLUS            shift and go to state 221
    MINUS           shift and go to state 222
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    m_exp_2                        shift and go to state 220
    empty                          shift and go to state 223

state 174

    (129) add_operator_2 -> empty .

    PLUS            reduce using rule 129 (add_operator_2 -> empty .)
    MINUS           reduce using rule 129 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 129 (add_operator_2 -> empty .)
    LESS            reduce using rule 129 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 129 (add_operator_2 -> empty .)
    GREATER         reduce using rule 129 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 129 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 129 (add_operator_2 -> empty .)
    AND             reduce using rule 129 (add_operator_2 -> empty .)
    OR              reduce using rule 129 (add_operator_2 -> empty .)
    COMMA           reduce using rule 129 (add_operator_2 -> empty .)
    RPAR            reduce using rule 129 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 129 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 129 (add_operator_2 -> empty .)
    TO              reduce using rule 129 (add_operator_2 -> empty .)


state 175

    (115) t -> f add_operator_1 . t_2
    (116) t_2 -> . TIMES add_operator t
    (117) t_2 -> . DIVIDE add_operator t
    (118) t_2 -> . empty
    (144) empty -> .

    TIMES           shift and go to state 225
    DIVIDE          shift and go to state 226
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    t_2                            shift and go to state 224
    empty                          shift and go to state 227

state 176

    (128) add_operator_1 -> empty .

    TIMES           reduce using rule 128 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 128 (add_operator_1 -> empty .)
    PLUS            reduce using rule 128 (add_operator_1 -> empty .)
    MINUS           reduce using rule 128 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 128 (add_operator_1 -> empty .)
    LESS            reduce using rule 128 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 128 (add_operator_1 -> empty .)
    GREATER         reduce using rule 128 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 128 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 128 (add_operator_1 -> empty .)
    AND             reduce using rule 128 (add_operator_1 -> empty .)
    OR              reduce using rule 128 (add_operator_1 -> empty .)
    COMMA           reduce using rule 128 (add_operator_1 -> empty .)
    RPAR            reduce using rule 128 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 128 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 128 (add_operator_1 -> empty .)
    TO              reduce using rule 128 (add_operator_1 -> empty .)


state 177

    (123) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 123 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 123 (f_2 -> CTE_I add_constant_i .)


state 178

    (132) add_constant_i -> empty .

    TIMES           reduce using rule 132 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 132 (add_constant_i -> empty .)
    PLUS            reduce using rule 132 (add_constant_i -> empty .)
    MINUS           reduce using rule 132 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 132 (add_constant_i -> empty .)
    LESS            reduce using rule 132 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 132 (add_constant_i -> empty .)
    GREATER         reduce using rule 132 (add_constant_i -> empty .)
    COMPARE         reduce using rule 132 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 132 (add_constant_i -> empty .)
    AND             reduce using rule 132 (add_constant_i -> empty .)
    OR              reduce using rule 132 (add_constant_i -> empty .)
    COMMA           reduce using rule 132 (add_constant_i -> empty .)
    RPAR            reduce using rule 132 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 132 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 132 (add_constant_i -> empty .)
    TO              reduce using rule 132 (add_constant_i -> empty .)


state 179

    (124) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 124 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 124 (f_2 -> CTE_F add_constant_f .)


state 180

    (134) add_constant_f -> empty .

    TIMES           reduce using rule 134 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 134 (add_constant_f -> empty .)
    PLUS            reduce using rule 134 (add_constant_f -> empty .)
    MINUS           reduce using rule 134 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 134 (add_constant_f -> empty .)
    LESS            reduce using rule 134 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 134 (add_constant_f -> empty .)
    GREATER         reduce using rule 134 (add_constant_f -> empty .)
    COMPARE         reduce using rule 134 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 134 (add_constant_f -> empty .)
    AND             reduce using rule 134 (add_constant_f -> empty .)
    OR              reduce using rule 134 (add_constant_f -> empty .)
    COMMA           reduce using rule 134 (add_constant_f -> empty .)
    RPAR            reduce using rule 134 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 134 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 134 (add_constant_f -> empty .)
    TO              reduce using rule 134 (add_constant_f -> empty .)


state 181

    (43) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (45) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (46) variable_3 -> . empty
    (144) empty -> .

    L_S_BRACKET     shift and go to state 228
    EQUAL           reduce using rule 144 (empty -> .)
    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    variable_3                     shift and go to state 229
    empty                          shift and go to state 230

state 182

    (65) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 231


state 183

    (66) read_point -> empty .

    RPAR            reduce using rule 66 (read_point -> empty .)


state 184

    (67) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 232


state 185

    (70) write_3 -> COMMA . write_2 write_3
    (68) write_2 -> . exp write_point
    (69) write_2 -> . CTE_S add_constant_s write_point
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 143
    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    write_2                        shift and go to state 233
    exp                            shift and go to state 142
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 186

    (71) write_3 -> empty .

    RPAR            reduce using rule 71 (write_3 -> empty .)


state 187

    (68) write_2 -> exp write_point .

    COMMA           reduce using rule 68 (write_2 -> exp write_point .)
    RPAR            reduce using rule 68 (write_2 -> exp write_point .)


state 188

    (72) write_point -> empty .

    COMMA           reduce using rule 72 (write_point -> empty .)
    RPAR            reduce using rule 72 (write_point -> empty .)


state 189

    (69) write_2 -> CTE_S add_constant_s . write_point
    (72) write_point -> . empty
    (144) empty -> .

    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)

    write_point                    shift and go to state 234
    empty                          shift and go to state 188

state 190

    (133) add_constant_s -> empty .

    COMMA           reduce using rule 133 (add_constant_s -> empty .)
    RPAR            reduce using rule 133 (add_constant_s -> empty .)


state 191

    (73) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 235


state 192

    (78) if_point -> empty .

    RPAR            reduce using rule 78 (if_point -> empty .)


state 193

    (81) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 236


state 194

    (84) for_point_1 -> empty .

    EQUAL           reduce using rule 84 (for_point_1 -> empty .)


state 195

    (88) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 237


state 196

    (94) return -> RETURN check_valid_func LPAR exp . RPAR SEMICOLON

    RPAR            shift and go to state 238


state 197

    (136) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 239


state 198

    (37) param_2 -> COMMA param .

    RPAR            reduce using rule 37 (param_2 -> COMMA param .)


state 199

    (57) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 240


state 200

    (58) asigna_point -> empty .

    SEMICOLON       reduce using rule 58 (asigna_point -> empty .)


state 201

    (59) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (60) llamada_2 -> . COMMA exp llamada_2
    (61) llamada_2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 241
    RPAR            reduce using rule 144 (empty -> .)

    llamada_2                      shift and go to state 158
    empty                          shift and go to state 242

state 202

    (119) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 243


state 203

    (59) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 244


state 204

    (62) llamada_void -> ID LPAR exp llamada_void_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 245


state 205

    (60) llamada_2 -> COMMA exp . llamada_2
    (63) llamada_void_2 -> COMMA exp . llamada_void_2
    (60) llamada_2 -> . COMMA exp llamada_2
    (61) llamada_2 -> . empty
    (63) llamada_void_2 -> . COMMA exp llamada_void_2
    (64) llamada_void_2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 160
    RPAR            reduce using rule 144 (empty -> .)

    llamada_2                      shift and go to state 246
    llamada_void_2                 shift and go to state 247
    empty                          shift and go to state 161

state 206

    (97) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 97 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 97 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 97 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 97 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 97 (exp -> t_exp add_operator_4 exp_2 .)


state 207

    (98) exp_2 -> OR . add_operator exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 248
    empty                          shift and go to state 122

state 208

    (99) exp_2 -> empty .

    COMMA           reduce using rule 99 (exp_2 -> empty .)
    RPAR            reduce using rule 99 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 99 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 99 (exp_2 -> empty .)
    TO              reduce using rule 99 (exp_2 -> empty .)


state 209

    (100) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 100 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 100 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 100 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 100 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 100 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 100 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 210

    (101) t_exp_2 -> AND . add_operator t_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 249
    empty                          shift and go to state 122

state 211

    (102) t_exp_2 -> empty .

    OR              reduce using rule 102 (t_exp_2 -> empty .)
    COMMA           reduce using rule 102 (t_exp_2 -> empty .)
    RPAR            reduce using rule 102 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 102 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 102 (t_exp_2 -> empty .)
    TO              reduce using rule 102 (t_exp_2 -> empty .)


state 212

    (103) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 103 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 213

    (130) add_operator_3 -> empty .

    AND             reduce using rule 130 (add_operator_3 -> empty .)
    OR              reduce using rule 130 (add_operator_3 -> empty .)
    COMMA           reduce using rule 130 (add_operator_3 -> empty .)
    RPAR            reduce using rule 130 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 130 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 130 (add_operator_3 -> empty .)
    TO              reduce using rule 130 (add_operator_3 -> empty .)


state 214

    (104) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 250
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 215

    (105) g_exp_2 -> LESS add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 251
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 216

    (106) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 252
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 217

    (107) g_exp_2 -> GREATER add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 253
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 218

    (108) g_exp_2 -> COMPARE add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 254
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 219

    (109) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 255
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 220

    (111) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 111 (m_exp -> t add_operator_2 m_exp_2 .)


state 221

    (112) m_exp_2 -> PLUS . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 256
    empty                          shift and go to state 122

state 222

    (113) m_exp_2 -> MINUS . add_operator m_exp
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 257
    empty                          shift and go to state 122

state 223

    (114) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 114 (m_exp_2 -> empty .)
    LESS            reduce using rule 114 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 114 (m_exp_2 -> empty .)
    GREATER         reduce using rule 114 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 114 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 114 (m_exp_2 -> empty .)
    AND             reduce using rule 114 (m_exp_2 -> empty .)
    OR              reduce using rule 114 (m_exp_2 -> empty .)
    COMMA           reduce using rule 114 (m_exp_2 -> empty .)
    RPAR            reduce using rule 114 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 114 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 114 (m_exp_2 -> empty .)
    TO              reduce using rule 114 (m_exp_2 -> empty .)


state 224

    (115) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 115 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 115 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 115 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 115 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 115 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 115 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 115 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 115 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 115 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 115 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 115 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 115 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 115 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 115 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 115 (t -> f add_operator_1 t_2 .)


state 225

    (116) t_2 -> TIMES . add_operator t
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 258
    empty                          shift and go to state 122

state 226

    (117) t_2 -> DIVIDE . add_operator t
    (127) add_operator -> . empty
    (144) empty -> .

    LPAR            reduce using rule 144 (empty -> .)
    ID              reduce using rule 144 (empty -> .)
    CTE_I           reduce using rule 144 (empty -> .)
    CTE_F           reduce using rule 144 (empty -> .)

    add_operator                   shift and go to state 259
    empty                          shift and go to state 122

state 227

    (118) t_2 -> empty .

    PLUS            reduce using rule 118 (t_2 -> empty .)
    MINUS           reduce using rule 118 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 118 (t_2 -> empty .)
    LESS            reduce using rule 118 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 118 (t_2 -> empty .)
    GREATER         reduce using rule 118 (t_2 -> empty .)
    COMPARE         reduce using rule 118 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 118 (t_2 -> empty .)
    AND             reduce using rule 118 (t_2 -> empty .)
    OR              reduce using rule 118 (t_2 -> empty .)
    COMMA           reduce using rule 118 (t_2 -> empty .)
    RPAR            reduce using rule 118 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 118 (t_2 -> empty .)
    SEMICOLON       reduce using rule 118 (t_2 -> empty .)
    TO              reduce using rule 118 (t_2 -> empty .)


state 228

    (45) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 260
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 229

    (43) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 230

    (46) variable_3 -> empty .

    EQUAL           reduce using rule 46 (variable_3 -> empty .)
    TIMES           reduce using rule 46 (variable_3 -> empty .)
    DIVIDE          reduce using rule 46 (variable_3 -> empty .)
    PLUS            reduce using rule 46 (variable_3 -> empty .)
    MINUS           reduce using rule 46 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 46 (variable_3 -> empty .)
    LESS            reduce using rule 46 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 46 (variable_3 -> empty .)
    GREATER         reduce using rule 46 (variable_3 -> empty .)
    COMPARE         reduce using rule 46 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 46 (variable_3 -> empty .)
    AND             reduce using rule 46 (variable_3 -> empty .)
    OR              reduce using rule 46 (variable_3 -> empty .)
    COMMA           reduce using rule 46 (variable_3 -> empty .)
    RPAR            reduce using rule 46 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 46 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 46 (variable_3 -> empty .)
    TO              reduce using rule 46 (variable_3 -> empty .)


state 231

    (65) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 261


state 232

    (67) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 262


state 233

    (70) write_3 -> COMMA write_2 . write_3
    (70) write_3 -> . COMMA write_2 write_3
    (71) write_3 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 185
    RPAR            reduce using rule 144 (empty -> .)

    write_3                        shift and go to state 263
    empty                          shift and go to state 186

state 234

    (69) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 69 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 69 (write_2 -> CTE_S add_constant_s write_point .)


state 235

    (73) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 264


state 236

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 265
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 237

    (88) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (92) while_point_2 -> . empty
    (144) empty -> .

    L_C_BRACKET     reduce using rule 144 (empty -> .)

    while_point_2                  shift and go to state 266
    empty                          shift and go to state 267

state 238

    (94) return -> RETURN check_valid_func LPAR exp RPAR . SEMICOLON

    SEMICOLON       shift and go to state 268


state 239

    (136) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (143) final_func_point -> . empty
    (144) empty -> .

    SEMICOLON       reduce using rule 144 (empty -> .)

    final_func_point               shift and go to state 269
    empty                          shift and go to state 270

state 240

    (57) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 57 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 241

    (60) llamada_2 -> COMMA . exp llamada_2
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 271
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 242

    (61) llamada_2 -> empty .

    RPAR            reduce using rule 61 (llamada_2 -> empty .)


state 243

    (119) f -> LPAR add_floor exp RPAR . remove_floor
    (126) remove_floor -> . empty
    (144) empty -> .

    TIMES           reduce using rule 144 (empty -> .)
    DIVIDE          reduce using rule 144 (empty -> .)
    PLUS            reduce using rule 144 (empty -> .)
    MINUS           reduce using rule 144 (empty -> .)
    LESS_EQUAL      reduce using rule 144 (empty -> .)
    LESS            reduce using rule 144 (empty -> .)
    GREATER_EQUAL   reduce using rule 144 (empty -> .)
    GREATER         reduce using rule 144 (empty -> .)
    COMPARE         reduce using rule 144 (empty -> .)
    NOT_EQUAL       reduce using rule 144 (empty -> .)
    AND             reduce using rule 144 (empty -> .)
    OR              reduce using rule 144 (empty -> .)
    COMMA           reduce using rule 144 (empty -> .)
    RPAR            reduce using rule 144 (empty -> .)
    R_S_BRACKET     reduce using rule 144 (empty -> .)
    SEMICOLON       reduce using rule 144 (empty -> .)
    TO              reduce using rule 144 (empty -> .)

    remove_floor                   shift and go to state 272
    empty                          shift and go to state 273

state 244

    (59) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 59 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 245

    (62) llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .

    ID              reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    READ            reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    IF              reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    FOR             reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 62 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)


state 246

    (60) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 60 (llamada_2 -> COMMA exp llamada_2 .)


state 247

    (63) llamada_void_2 -> COMMA exp llamada_void_2 .

    RPAR            reduce using rule 63 (llamada_void_2 -> COMMA exp llamada_void_2 .)


state 248

    (98) exp_2 -> OR add_operator . exp
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 274
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 249

    (101) t_exp_2 -> AND add_operator . t_exp
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    t_exp                          shift and go to state 275
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 250

    (104) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 104 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 251

    (105) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 105 (g_exp_2 -> LESS add_operator m_exp .)


state 252

    (106) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 106 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 253

    (107) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 107 (g_exp_2 -> GREATER add_operator m_exp .)


state 254

    (108) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 108 (g_exp_2 -> COMPARE add_operator m_exp .)


state 255

    (109) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 109 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 256

    (112) m_exp_2 -> PLUS add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 276
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 257

    (113) m_exp_2 -> MINUS add_operator . m_exp
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 277
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 258

    (116) t_2 -> TIMES add_operator . t
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    t                              shift and go to state 278
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 259

    (117) t_2 -> DIVIDE add_operator . t
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    t                              shift and go to state 279
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 260

    (45) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 280


state 261

    (65) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 65 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 262

    (67) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 67 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 263

    (70) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 70 (write_3 -> COMMA write_2 write_3 .)


state 264

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (144) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 144 (empty -> .)

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 281
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 265

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (85) for_point_2 -> . empty
    (144) empty -> .

    TO              reduce using rule 144 (empty -> .)

    for_point_2                    shift and go to state 282
    empty                          shift and go to state 283

state 266

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 284


state 267

    (92) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 92 (while_point_2 -> empty .)


state 268

    (94) return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .

    ID              reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    READ            reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    WRITE           reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    IF              reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    FOR             reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    WHILE           reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    RETURN          reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 94 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)


state 269

    (136) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 136 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 270

    (143) final_func_point -> empty .

    SEMICOLON       reduce using rule 143 (final_func_point -> empty .)


state 271

    (60) llamada_2 -> COMMA exp . llamada_2
    (60) llamada_2 -> . COMMA exp llamada_2
    (61) llamada_2 -> . empty
    (144) empty -> .

    COMMA           shift and go to state 241
    RPAR            reduce using rule 144 (empty -> .)

    llamada_2                      shift and go to state 246
    empty                          shift and go to state 242

state 272

    (119) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 119 (f -> LPAR add_floor exp RPAR remove_floor .)


state 273

    (126) remove_floor -> empty .

    TIMES           reduce using rule 126 (remove_floor -> empty .)
    DIVIDE          reduce using rule 126 (remove_floor -> empty .)
    PLUS            reduce using rule 126 (remove_floor -> empty .)
    MINUS           reduce using rule 126 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 126 (remove_floor -> empty .)
    LESS            reduce using rule 126 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 126 (remove_floor -> empty .)
    GREATER         reduce using rule 126 (remove_floor -> empty .)
    COMPARE         reduce using rule 126 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 126 (remove_floor -> empty .)
    AND             reduce using rule 126 (remove_floor -> empty .)
    OR              reduce using rule 126 (remove_floor -> empty .)
    COMMA           reduce using rule 126 (remove_floor -> empty .)
    RPAR            reduce using rule 126 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 126 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 126 (remove_floor -> empty .)
    TO              reduce using rule 126 (remove_floor -> empty .)


state 274

    (98) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 98 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 98 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 98 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 98 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 98 (exp_2 -> OR add_operator exp .)


state 275

    (101) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 101 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 101 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 101 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 101 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 101 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 101 (t_exp_2 -> AND add_operator t_exp .)


state 276

    (112) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 112 (m_exp_2 -> PLUS add_operator m_exp .)


state 277

    (113) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 113 (m_exp_2 -> MINUS add_operator m_exp .)


state 278

    (116) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 116 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 116 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 116 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 116 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 116 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 116 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 116 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 116 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 116 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 116 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 116 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 116 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 116 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 116 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 116 (t_2 -> TIMES add_operator t .)


state 279

    (117) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 117 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 117 (t_2 -> DIVIDE add_operator t .)


state 280

    (45) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 281

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (74) if_2 -> . estatuto if_2
    (75) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 285
    if_2                           shift and go to state 286
    empty                          shift and go to state 287
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 282

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 288


state 283

    (85) for_point_2 -> empty .

    TO              reduce using rule 85 (for_point_2 -> empty .)


state 284

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (144) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 144 (empty -> .)

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 289
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 285

    (74) if_2 -> estatuto . if_2
    (74) if_2 -> . estatuto if_2
    (75) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 285
    if_2                           shift and go to state 290
    empty                          shift and go to state 287
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 286

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 291


state 287

    (75) if_2 -> empty .
    (96) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 75 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 75 (if_2 -> empty .)
    ID              reduce using rule 96 (func_extra -> empty .)
    READ            reduce using rule 96 (func_extra -> empty .)
    WRITE           reduce using rule 96 (func_extra -> empty .)
    IF              reduce using rule 96 (func_extra -> empty .)
    FOR             reduce using rule 96 (func_extra -> empty .)
    WHILE           reduce using rule 96 (func_extra -> empty .)
    RETURN          reduce using rule 96 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 96 (func_extra -> empty .) ]


state 288

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (97) exp -> . t_exp add_operator_4 exp_2
    (100) t_exp -> . g_exp add_operator_4 t_exp_2
    (103) g_exp -> . m_exp g_exp_2 add_operator_3
    (111) m_exp -> . t add_operator_2 m_exp_2
    (115) t -> . f add_operator_1 t_2
    (119) f -> . LPAR add_floor exp RPAR remove_floor
    (120) f -> . variable
    (121) f -> . llamada
    (122) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (123) f_2 -> . CTE_I add_constant_i
    (124) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 292
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 289

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) while_l_2 -> . estatuto while_l_2
    (90) while_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 293
    while_l_2                      shift and go to state 294
    empty                          shift and go to state 295
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 290

    (74) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 74 (if_2 -> estatuto if_2 .)


state 291

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (76) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (77) if_3 -> . empty
    (144) empty -> .

    ELSE            shift and go to state 297
    SEMICOLON       reduce using rule 144 (empty -> .)

    if_3                           shift and go to state 296
    empty                          shift and go to state 298

state 292

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (86) for_point_3 -> . empty
    (144) empty -> .

    RPAR            reduce using rule 144 (empty -> .)

    for_point_3                    shift and go to state 299
    empty                          shift and go to state 300

state 293

    (89) while_l_2 -> estatuto . while_l_2
    (89) while_l_2 -> . estatuto while_l_2
    (90) while_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 293
    while_l_2                      shift and go to state 301
    empty                          shift and go to state 295
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 294

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 302


state 295

    (90) while_l_2 -> empty .
    (96) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 90 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 90 (while_l_2 -> empty .)
    ID              reduce using rule 96 (func_extra -> empty .)
    READ            reduce using rule 96 (func_extra -> empty .)
    WRITE           reduce using rule 96 (func_extra -> empty .)
    IF              reduce using rule 96 (func_extra -> empty .)
    FOR             reduce using rule 96 (func_extra -> empty .)
    WHILE           reduce using rule 96 (func_extra -> empty .)
    RETURN          reduce using rule 96 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 96 (func_extra -> empty .) ]


state 296

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 303


state 297

    (76) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (80) if_point_3 -> . empty
    (144) empty -> .

    L_C_BRACKET     reduce using rule 144 (empty -> .)

    if_point_3                     shift and go to state 304
    empty                          shift and go to state 305

state 298

    (77) if_3 -> empty .

    SEMICOLON       reduce using rule 77 (if_3 -> empty .)


state 299

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 306


state 300

    (86) for_point_3 -> empty .

    RPAR            reduce using rule 86 (for_point_3 -> empty .)


state 301

    (89) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 89 (while_l_2 -> estatuto while_l_2 .)


state 302

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 307


state 303

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (79) if_point_2 -> . empty
    (144) empty -> .

    ID              reduce using rule 144 (empty -> .)
    READ            reduce using rule 144 (empty -> .)
    WRITE           reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    R_C_BRACKET     reduce using rule 144 (empty -> .)

    if_point_2                     shift and go to state 308
    empty                          shift and go to state 309

state 304

    (76) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 310


state 305

    (80) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 80 (if_point_3 -> empty .)


state 306

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 311


state 307

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (93) while_point_3 -> . empty
    (144) empty -> .

    ID              reduce using rule 144 (empty -> .)
    READ            reduce using rule 144 (empty -> .)
    WRITE           reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    R_C_BRACKET     reduce using rule 144 (empty -> .)

    while_point_3                  shift and go to state 312
    empty                          shift and go to state 313

state 308

    (73) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 73 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 309

    (79) if_point_2 -> empty .

    ID              reduce using rule 79 (if_point_2 -> empty .)
    READ            reduce using rule 79 (if_point_2 -> empty .)
    WRITE           reduce using rule 79 (if_point_2 -> empty .)
    IF              reduce using rule 79 (if_point_2 -> empty .)
    FOR             reduce using rule 79 (if_point_2 -> empty .)
    WHILE           reduce using rule 79 (if_point_2 -> empty .)
    RETURN          reduce using rule 79 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 79 (if_point_2 -> empty .)


state 310

    (76) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (144) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 144 (empty -> .)

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 314
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 311

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (144) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 144 (empty -> .)

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 315
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 312

    (88) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 88 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 313

    (93) while_point_3 -> empty .

    ID              reduce using rule 93 (while_point_3 -> empty .)
    READ            reduce using rule 93 (while_point_3 -> empty .)
    WRITE           reduce using rule 93 (while_point_3 -> empty .)
    IF              reduce using rule 93 (while_point_3 -> empty .)
    FOR             reduce using rule 93 (while_point_3 -> empty .)
    WHILE           reduce using rule 93 (while_point_3 -> empty .)
    RETURN          reduce using rule 93 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 93 (while_point_3 -> empty .)


state 314

    (76) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (74) if_2 -> . estatuto if_2
    (75) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 285
    if_2                           shift and go to state 316
    empty                          shift and go to state 287
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 315

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (82) for_l_2 -> . estatuto for_l_2
    (83) for_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 317
    for_l_2                        shift and go to state 318
    empty                          shift and go to state 319
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 316

    (76) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 320


state 317

    (82) for_l_2 -> estatuto . for_l_2
    (82) for_l_2 -> . estatuto for_l_2
    (83) for_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . llamada_void
    (50) estatuto -> . read
    (51) estatuto -> . write
    (52) estatuto -> . if_1
    (53) estatuto -> . for_l
    (54) estatuto -> . while_l
    (55) estatuto -> . return
    (56) estatuto -> . func_extra
    (144) empty -> .
    (57) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (59) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (62) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (65) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (67) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (73) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (81) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (88) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (94) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (96) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 144 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 144 (empty -> .) ]
  ! READ            [ reduce using rule 144 (empty -> .) ]
  ! WRITE           [ reduce using rule 144 (empty -> .) ]
  ! IF              [ reduce using rule 144 (empty -> .) ]
  ! FOR             [ reduce using rule 144 (empty -> .) ]
  ! WHILE           [ reduce using rule 144 (empty -> .) ]
  ! RETURN          [ reduce using rule 144 (empty -> .) ]

    estatuto                       shift and go to state 317
    for_l_2                        shift and go to state 321
    empty                          shift and go to state 319
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 318

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 322


state 319

    (83) for_l_2 -> empty .
    (96) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 83 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 83 (for_l_2 -> empty .)
    ID              reduce using rule 96 (func_extra -> empty .)
    READ            reduce using rule 96 (func_extra -> empty .)
    WRITE           reduce using rule 96 (func_extra -> empty .)
    IF              reduce using rule 96 (func_extra -> empty .)
    FOR             reduce using rule 96 (func_extra -> empty .)
    WHILE           reduce using rule 96 (func_extra -> empty .)
    RETURN          reduce using rule 96 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 96 (func_extra -> empty .) ]


state 320

    (76) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 76 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 321

    (82) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 82 (for_l_2 -> estatuto for_l_2 .)


state 322

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 323


state 323

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (87) for_point_4 -> . empty
    (144) empty -> .

    ID              reduce using rule 144 (empty -> .)
    READ            reduce using rule 144 (empty -> .)
    WRITE           reduce using rule 144 (empty -> .)
    IF              reduce using rule 144 (empty -> .)
    FOR             reduce using rule 144 (empty -> .)
    WHILE           reduce using rule 144 (empty -> .)
    RETURN          reduce using rule 144 (empty -> .)
    R_C_BRACKET     reduce using rule 144 (empty -> .)

    for_point_4                    shift and go to state 324
    empty                          shift and go to state 325

state 324

    (81) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 81 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 325

    (87) for_point_4 -> empty .

    ID              reduce using rule 87 (for_point_4 -> empty .)
    READ            reduce using rule 87 (for_point_4 -> empty .)
    WRITE           reduce using rule 87 (for_point_4 -> empty .)
    IF              reduce using rule 87 (for_point_4 -> empty .)
    FOR             reduce using rule 87 (for_point_4 -> empty .)
    WHILE           reduce using rule 87 (for_point_4 -> empty .)
    RETURN          reduce using rule 87 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 87 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for READ in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for READ in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 264 resolved as shift
WARNING: shift/reduce conflict for READ in state 264 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 264 resolved as shift
WARNING: shift/reduce conflict for IF in state 264 resolved as shift
WARNING: shift/reduce conflict for FOR in state 264 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 264 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 264 resolved as shift
WARNING: shift/reduce conflict for ID in state 281 resolved as shift
WARNING: shift/reduce conflict for READ in state 281 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 281 resolved as shift
WARNING: shift/reduce conflict for IF in state 281 resolved as shift
WARNING: shift/reduce conflict for FOR in state 281 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 281 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 281 resolved as shift
WARNING: shift/reduce conflict for ID in state 284 resolved as shift
WARNING: shift/reduce conflict for READ in state 284 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 284 resolved as shift
WARNING: shift/reduce conflict for IF in state 284 resolved as shift
WARNING: shift/reduce conflict for FOR in state 284 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 284 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 284 resolved as shift
WARNING: shift/reduce conflict for ID in state 285 resolved as shift
WARNING: shift/reduce conflict for READ in state 285 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 285 resolved as shift
WARNING: shift/reduce conflict for IF in state 285 resolved as shift
WARNING: shift/reduce conflict for FOR in state 285 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 285 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 285 resolved as shift
WARNING: shift/reduce conflict for ID in state 289 resolved as shift
WARNING: shift/reduce conflict for READ in state 289 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 289 resolved as shift
WARNING: shift/reduce conflict for IF in state 289 resolved as shift
WARNING: shift/reduce conflict for FOR in state 289 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 289 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 289 resolved as shift
WARNING: shift/reduce conflict for ID in state 293 resolved as shift
WARNING: shift/reduce conflict for READ in state 293 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 293 resolved as shift
WARNING: shift/reduce conflict for IF in state 293 resolved as shift
WARNING: shift/reduce conflict for FOR in state 293 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 293 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 293 resolved as shift
WARNING: shift/reduce conflict for ID in state 310 resolved as shift
WARNING: shift/reduce conflict for READ in state 310 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 310 resolved as shift
WARNING: shift/reduce conflict for IF in state 310 resolved as shift
WARNING: shift/reduce conflict for FOR in state 310 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 310 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 310 resolved as shift
WARNING: shift/reduce conflict for ID in state 311 resolved as shift
WARNING: shift/reduce conflict for READ in state 311 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 311 resolved as shift
WARNING: shift/reduce conflict for IF in state 311 resolved as shift
WARNING: shift/reduce conflict for FOR in state 311 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 311 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 311 resolved as shift
WARNING: shift/reduce conflict for ID in state 314 resolved as shift
WARNING: shift/reduce conflict for READ in state 314 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 314 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 314 resolved as shift
WARNING: shift/reduce conflict for ID in state 315 resolved as shift
WARNING: shift/reduce conflict for READ in state 315 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 315 resolved as shift
WARNING: shift/reduce conflict for IF in state 315 resolved as shift
WARNING: shift/reduce conflict for FOR in state 315 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 315 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 315 resolved as shift
WARNING: shift/reduce conflict for ID in state 317 resolved as shift
WARNING: shift/reduce conflict for READ in state 317 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 317 resolved as shift
WARNING: shift/reduce conflict for IF in state 317 resolved as shift
WARNING: shift/reduce conflict for FOR in state 317 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 317 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 317 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 48
WARNING: reduce/reduce conflict in state 102 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 102
WARNING: reduce/reduce conflict in state 161 resolved using rule (llamada_2 -> empty)
WARNING: rejected rule (llamada_void_2 -> empty) in state 161
WARNING: reduce/reduce conflict in state 287 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 287
WARNING: reduce/reduce conflict in state 295 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 295
WARNING: reduce/reduce conflict in state 319 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 319
WARNING: Rule (vars_6 -> empty) is never reduced
WARNING: Rule (llamada_void_2 -> empty) is never reduced
