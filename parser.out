Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    main_point -> empty
Rule 11    body -> vars func_agrega_v estatuto body_2
Rule 12    body_2 -> estatuto body_2
Rule 13    body_2 -> empty
Rule 14    tipo_simple -> INT
Rule 15    tipo_simple -> FLOAT
Rule 16    tipo_simple -> CHAR
Rule 17    tipo_comp -> DATAFRAME
Rule 18    vars -> VAR vars_2 SEMICOLON vars_8
Rule 19    vars_2 -> tipo_comp vars_3
Rule 20    vars_2 -> tipo_simple vars_4
Rule 21    vars_3 -> ID vars_5
Rule 22    vars_4 -> vars_3
Rule 23    vars_4 -> ID vars_6
Rule 24    vars_5 -> COMMA vars_3
Rule 25    vars_5 -> empty
Rule 26    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 27    vars_6 -> empty
Rule 28    punto_id_especial -> empty
Rule 29    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 30    vars_7 -> var_array
Rule 31    var_array -> empty
Rule 32    var_mat -> empty
Rule 33    vars_8 -> vars
Rule 34    vars_8 -> empty
Rule 35    param -> tipo_simple ID punto_param param_2
Rule 36    param -> empty
Rule 37    param_2 -> COMMA param
Rule 38    param_2 -> empty
Rule 39    punto_param -> empty
Rule 40    punto_param_2 -> empty
Rule 41    variable -> ID variable_2 variable_point
Rule 42    variable_point -> empty
Rule 43    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 44    variable_2 -> empty
Rule 45    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 46    variable_3 -> empty
Rule 47    estatuto -> asigna
Rule 48    estatuto -> llamada
Rule 49    estatuto -> read
Rule 50    estatuto -> write
Rule 51    estatuto -> if_1
Rule 52    estatuto -> for_l
Rule 53    estatuto -> while_l
Rule 54    estatuto -> return
Rule 55    estatuto -> func_extra
Rule 56    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 57    asigna_point -> empty
Rule 58    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 59    llamada_2 -> COMMA exp llamada_2
Rule 60    llamada_2 -> empty
Rule 61    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 62    read_point -> empty
Rule 63    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 64    write_2 -> exp write_point
Rule 65    write_2 -> CTE_S add_constant_s write_point
Rule 66    write_3 -> COMMA write_2 write_3
Rule 67    write_3 -> empty
Rule 68    write_point -> empty
Rule 69    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 70    if_2 -> estatuto if_2
Rule 71    if_2 -> empty
Rule 72    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 73    if_3 -> empty
Rule 74    if_point -> empty
Rule 75    if_point_2 -> empty
Rule 76    if_point_3 -> empty
Rule 77    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 78    for_l_2 -> estatuto for_l_2
Rule 79    for_l_2 -> empty
Rule 80    for_point_1 -> empty
Rule 81    for_point_2 -> empty
Rule 82    for_point_3 -> empty
Rule 83    for_point_4 -> empty
Rule 84    while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 85    while_l_2 -> estatuto while_l_2
Rule 86    while_l_2 -> empty
Rule 87    while_point -> empty
Rule 88    while_point_2 -> empty
Rule 89    while_point_3 -> empty
Rule 90    return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON
Rule 91    check_valid_func -> empty
Rule 92    func_extra -> empty
Rule 93    exp -> t_exp add_operator_4 exp_2
Rule 94    exp_2 -> OR add_operator exp
Rule 95    exp_2 -> empty
Rule 96    t_exp -> g_exp add_operator_4 t_exp_2
Rule 97    t_exp_2 -> AND add_operator t_exp
Rule 98    t_exp_2 -> empty
Rule 99    g_exp -> m_exp g_exp_2 add_operator_3
Rule 100   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 101   g_exp_2 -> LESS add_operator m_exp
Rule 102   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 103   g_exp_2 -> GREATER add_operator m_exp
Rule 104   g_exp_2 -> COMPARE add_operator m_exp
Rule 105   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 106   g_exp_2 -> empty
Rule 107   m_exp -> t add_operator_2 m_exp_2
Rule 108   m_exp_2 -> PLUS add_operator m_exp
Rule 109   m_exp_2 -> MINUS add_operator m_exp
Rule 110   m_exp_2 -> empty
Rule 111   t -> f add_operator_1 t_2
Rule 112   t_2 -> TIMES add_operator t
Rule 113   t_2 -> DIVIDE add_operator t
Rule 114   t_2 -> empty
Rule 115   f -> LPAR add_floor exp RPAR remove_floor
Rule 116   f -> variable
Rule 117   f -> llamada
Rule 118   f -> f_2
Rule 119   f_2 -> CTE_I add_constant_i
Rule 120   f_2 -> CTE_F add_constant_f
Rule 121   add_floor -> empty
Rule 122   remove_floor -> empty
Rule 123   add_operator -> empty
Rule 124   add_operator_1 -> empty
Rule 125   add_operator_2 -> empty
Rule 126   add_operator_3 -> empty
Rule 127   add_operator_4 -> empty
Rule 128   add_constant_i -> empty
Rule 129   add_constant_s -> empty
Rule 130   add_constant_f -> empty
Rule 131   function -> FUNC function_2 SEMICOLON function_4
Rule 132   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 133   function_3 -> tipo_simple
Rule 134   function_3 -> VOID
Rule 135   function_4 -> function
Rule 136   function_4 -> empty
Rule 137   function_punto1 -> empty
Rule 138   function_punto2 -> empty
Rule 139   func_agrega_v -> empty
Rule 140   final_func_point -> empty
Rule 141   empty -> <empty>

Terminals, with rules where they appear

AND                  : 97
CHAR                 : 16
COLON                : 1
COMMA                : 24 37 59 66
COMPARE              : 104
CTE_F                : 120
CTE_I                : 26 29 119
CTE_S                : 65
DATAFRAME            : 17
DIVIDE               : 113
ELSE                 : 72
EQUAL                : 56 77
FLOAT                : 15
FOR                  : 77
FUNC                 : 131
GREATER              : 103
GREATER_EQUAL        : 102
ID                   : 1 21 23 35 41 58 77 132
IF                   : 69
INT                  : 14
LESS                 : 101
LESS_EQUAL           : 100
LPAR                 : 9 58 61 63 69 77 84 90 115 132
L_C_BRACKET          : 9 69 72 77 84 132
L_S_BRACKET          : 26 29 43 45
MAIN                 : 9
MINUS                : 109
NOT_EQUAL            : 105
OR                   : 94
PLUS                 : 108
PROGRAM              : 1
READ                 : 61
RETURN               : 90
RPAR                 : 9 58 61 63 69 77 84 90 115 132
R_C_BRACKET          : 9 69 72 77 84 132
R_S_BRACKET          : 26 29 43 45
SEMICOLON            : 9 18 56 58 61 63 69 77 84 90 131
STRING               : 
TIMES                : 112
TO                   : 77
VAR                  : 18
VOID                 : 134
WHILE                : 84
WRITE                : 63
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 120
add_constant_i       : 119
add_constant_s       : 65
add_floor            : 115
add_operator         : 56 94 97 100 101 102 103 104 105 108 109 112 113
add_operator_1       : 111
add_operator_2       : 107
add_operator_3       : 99
add_operator_4       : 93 96
asigna               : 47
asigna_point         : 56
body                 : 9 132
body_2               : 11 12
check_valid_func     : 90
empty                : 2 4 6 8 10 13 25 27 28 31 32 34 36 38 39 40 42 44 46 57 60 62 67 68 71 73 74 75 76 79 80 81 82 83 86 87 88 89 91 92 95 98 106 110 114 121 122 123 124 125 126 127 128 129 130 136 137 138 139 140
estatuto             : 11 12 69 70 72 77 78 84 85
exp                  : 43 45 56 58 59 64 69 77 77 84 90 94 115
exp_2                : 93
f                    : 111
f_2                  : 118
final_func_point     : 132
for_l                : 52
for_l_2              : 77 78
for_point_1          : 77
for_point_2          : 77
for_point_3          : 77
for_point_4          : 77
func_agrega_v        : 11
func_extra           : 55
function             : 7 135
function_2           : 131
function_3           : 132
function_4           : 131
function_punto1      : 132
function_punto2      : 
g_exp                : 96
g_exp_2              : 99
if_1                 : 51
if_2                 : 69 70 72
if_3                 : 69
if_point             : 69
if_point_2           : 69
if_point_3           : 72
llamada              : 48 117
llamada_2            : 58 59
m_exp                : 99 100 101 102 103 104 105 108 109
m_exp_2              : 107
main                 : 1
main_point           : 9
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 37 132
param_2              : 35
program              : 0
program_point        : 1
punto_id_especial    : 26
punto_param          : 35
punto_param_2        : 132
read                 : 49
read_point           : 61
remove_floor         : 115
return               : 54
t                    : 107 112 113
t_2                  : 111
t_exp                : 93 97
t_exp_2              : 96
tipo_comp            : 19
tipo_simple          : 20 35 133
var_array            : 30
var_mat              : 29
variable             : 56 61 116
variable_2           : 41
variable_3           : 43
variable_point       : 41
vars                 : 5 11 33
vars_2               : 18
vars_3               : 19 22 24
vars_4               : 20
vars_5               : 21
vars_6               : 23
vars_7               : 26
vars_8               : 18
while_l              : 53
while_l_2            : 84 85
while_point          : 84
while_point_2        : 84
while_point_3        : 84
write                : 50
write_2              : 63 66
write_3              : 63 66
write_point          : 64 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (141) empty -> .

    ID              reduce using rule 141 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (141) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 141 (empty -> .)
    MAIN            reduce using rule 141 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (141) empty -> .

    FUNC            reduce using rule 141 (empty -> .)
    MAIN            reduce using rule 141 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (18) vars -> VAR . vars_2 SEMICOLON vars_8
    (19) vars_2 -> . tipo_comp vars_3
    (20) vars_2 -> . tipo_simple vars_4
    (17) tipo_comp -> . DATAFRAME
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
    (10) main_point -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (131) function -> . FUNC function_2 SEMICOLON function_4
    (141) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 141 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (18) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (19) vars_2 -> tipo_comp . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (20) vars_2 -> tipo_simple . vars_4
    (22) vars_4 -> . vars_3
    (23) vars_4 -> . ID vars_6
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (17) tipo_comp -> DATAFRAME .

    ID              reduce using rule 17 (tipo_comp -> DATAFRAME .)


state 20

    (14) tipo_simple -> INT .

    ID              reduce using rule 14 (tipo_simple -> INT .)


state 21

    (15) tipo_simple -> FLOAT .

    ID              reduce using rule 15 (tipo_simple -> FLOAT .)


state 22

    (16) tipo_simple -> CHAR .

    ID              reduce using rule 16 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 35


state 24

    (10) main_point -> empty .

    LPAR            reduce using rule 10 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 26

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 27

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 28

    (131) function -> FUNC . function_2 SEMICOLON function_4
    (132) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (133) function_3 -> . tipo_simple
    (134) function_3 -> . VOID
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    VOID            shift and go to state 39
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 36
    function_3                     shift and go to state 37
    tipo_simple                    shift and go to state 38

state 29

    (18) vars -> VAR vars_2 SEMICOLON . vars_8
    (33) vars_8 -> . vars
    (34) vars_8 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (141) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 141 (empty -> .)
    MAIN            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    R_C_BRACKET     reduce using rule 141 (empty -> .)

    vars_8                         shift and go to state 40
    vars                           shift and go to state 41
    empty                          shift and go to state 42

state 30

    (19) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_comp vars_3 .)


state 31

    (21) vars_3 -> ID . vars_5
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 141 (empty -> .)

    vars_5                         shift and go to state 43
    empty                          shift and go to state 45

state 32

    (20) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 20 (vars_2 -> tipo_simple vars_4 .)


state 33

    (22) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 22 (vars_4 -> vars_3 .)


state 34

    (23) vars_4 -> ID . vars_6
    (21) vars_3 -> ID . vars_5
    (26) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (27) vars_6 -> . empty
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (28) punto_id_especial -> . empty
    (141) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 141 (empty -> .)
    L_S_BRACKET     reduce using rule 141 (empty -> .)

    vars_6                         shift and go to state 46
    vars_5                         shift and go to state 43
    punto_id_especial              shift and go to state 47
    empty                          shift and go to state 48

state 35

    (9) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 49


state 36

    (131) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 50


state 37

    (132) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 51


state 38

    (133) function_3 -> tipo_simple .

    ID              reduce using rule 133 (function_3 -> tipo_simple .)


state 39

    (134) function_3 -> VOID .

    ID              reduce using rule 134 (function_3 -> VOID .)


state 40

    (18) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 41

    (33) vars_8 -> vars .

    FUNC            reduce using rule 33 (vars_8 -> vars .)
    MAIN            reduce using rule 33 (vars_8 -> vars .)
    ID              reduce using rule 33 (vars_8 -> vars .)
    READ            reduce using rule 33 (vars_8 -> vars .)
    WRITE           reduce using rule 33 (vars_8 -> vars .)
    IF              reduce using rule 33 (vars_8 -> vars .)
    FOR             reduce using rule 33 (vars_8 -> vars .)
    WHILE           reduce using rule 33 (vars_8 -> vars .)
    RETURN          reduce using rule 33 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> vars .)


state 42

    (34) vars_8 -> empty .

    FUNC            reduce using rule 34 (vars_8 -> empty .)
    MAIN            reduce using rule 34 (vars_8 -> empty .)
    ID              reduce using rule 34 (vars_8 -> empty .)
    READ            reduce using rule 34 (vars_8 -> empty .)
    WRITE           reduce using rule 34 (vars_8 -> empty .)
    IF              reduce using rule 34 (vars_8 -> empty .)
    FOR             reduce using rule 34 (vars_8 -> empty .)
    WHILE           reduce using rule 34 (vars_8 -> empty .)
    RETURN          reduce using rule 34 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 34 (vars_8 -> empty .)


state 43

    (21) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 21 (vars_3 -> ID vars_5 .)


state 44

    (24) vars_5 -> COMMA . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 52

state 45

    (25) vars_5 -> empty .

    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)


state 46

    (23) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 23 (vars_4 -> ID vars_6 .)


state 47

    (26) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 53


state 48

    (27) vars_6 -> empty .
    (25) vars_5 -> empty .
    (28) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 28 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 27 (vars_6 -> empty .) ]


state 49

    (9) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 54


state 50

    (131) function -> FUNC function_2 SEMICOLON . function_4
    (135) function_4 -> . function
    (136) function_4 -> . empty
    (131) function -> . FUNC function_2 SEMICOLON function_4
    (141) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 141 (empty -> .)

    function_4                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 51

    (132) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (137) function_punto1 -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 52

    (24) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 24 (vars_5 -> COMMA vars_3 .)


state 53

    (26) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 60


state 54

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 61
    vars                           shift and go to state 62

state 55

    (131) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 131 (function -> FUNC function_2 SEMICOLON function_4 .)


state 56

    (135) function_4 -> function .

    MAIN            reduce using rule 135 (function_4 -> function .)


state 57

    (136) function_4 -> empty .

    MAIN            reduce using rule 136 (function_4 -> empty .)


state 58

    (132) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 63


state 59

    (137) function_punto1 -> empty .

    LPAR            reduce using rule 137 (function_punto1 -> empty .)


state 60

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 64


state 61

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 65


state 62

    (11) body -> vars . func_agrega_v estatuto body_2
    (139) func_agrega_v -> . empty
    (141) empty -> .

    ID              reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    R_C_BRACKET     reduce using rule 141 (empty -> .)

    func_agrega_v                  shift and go to state 66
    empty                          shift and go to state 67

state 63

    (132) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (141) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 141 (empty -> .)

    param                          shift and go to state 68
    tipo_simple                    shift and go to state 69
    empty                          shift and go to state 70

state 64

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (29) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (30) vars_7 -> . var_array
    (31) var_array -> . empty
    (141) empty -> .

    L_S_BRACKET     shift and go to state 71
    SEMICOLON       reduce using rule 141 (empty -> .)

    vars_7                         shift and go to state 72
    var_array                      shift and go to state 73
    empty                          shift and go to state 74

state 65

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 75


state 66

    (11) body -> vars func_agrega_v . estatuto body_2
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93
    R_C_BRACKET     reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 76
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86
    empty                          shift and go to state 94

state 67

    (139) func_agrega_v -> empty .

    ID              reduce using rule 139 (func_agrega_v -> empty .)
    READ            reduce using rule 139 (func_agrega_v -> empty .)
    WRITE           reduce using rule 139 (func_agrega_v -> empty .)
    IF              reduce using rule 139 (func_agrega_v -> empty .)
    FOR             reduce using rule 139 (func_agrega_v -> empty .)
    WHILE           reduce using rule 139 (func_agrega_v -> empty .)
    RETURN          reduce using rule 139 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 139 (func_agrega_v -> empty .)


state 68

    (132) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (40) punto_param_2 -> . empty
    (141) empty -> .

    RPAR            reduce using rule 141 (empty -> .)

    punto_param_2                  shift and go to state 95
    empty                          shift and go to state 96

state 69

    (35) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 97


state 70

    (36) param -> empty .

    RPAR            reduce using rule 36 (param -> empty .)


state 71

    (29) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 98


state 72

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 26 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 73

    (30) vars_7 -> var_array .

    SEMICOLON       reduce using rule 30 (vars_7 -> var_array .)


state 74

    (31) var_array -> empty .

    SEMICOLON       reduce using rule 31 (var_array -> empty .)


state 75

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 76

    (11) body -> vars func_agrega_v estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 99
    body_2                         shift and go to state 100
    empty                          shift and go to state 101
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 77

    (47) estatuto -> asigna .

    ID              reduce using rule 47 (estatuto -> asigna .)
    READ            reduce using rule 47 (estatuto -> asigna .)
    WRITE           reduce using rule 47 (estatuto -> asigna .)
    IF              reduce using rule 47 (estatuto -> asigna .)
    FOR             reduce using rule 47 (estatuto -> asigna .)
    WHILE           reduce using rule 47 (estatuto -> asigna .)
    RETURN          reduce using rule 47 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> asigna .)


state 78

    (48) estatuto -> llamada .

    ID              reduce using rule 48 (estatuto -> llamada .)
    READ            reduce using rule 48 (estatuto -> llamada .)
    WRITE           reduce using rule 48 (estatuto -> llamada .)
    IF              reduce using rule 48 (estatuto -> llamada .)
    FOR             reduce using rule 48 (estatuto -> llamada .)
    WHILE           reduce using rule 48 (estatuto -> llamada .)
    RETURN          reduce using rule 48 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> llamada .)


state 79

    (49) estatuto -> read .

    ID              reduce using rule 49 (estatuto -> read .)
    READ            reduce using rule 49 (estatuto -> read .)
    WRITE           reduce using rule 49 (estatuto -> read .)
    IF              reduce using rule 49 (estatuto -> read .)
    FOR             reduce using rule 49 (estatuto -> read .)
    WHILE           reduce using rule 49 (estatuto -> read .)
    RETURN          reduce using rule 49 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> read .)


state 80

    (50) estatuto -> write .

    ID              reduce using rule 50 (estatuto -> write .)
    READ            reduce using rule 50 (estatuto -> write .)
    WRITE           reduce using rule 50 (estatuto -> write .)
    IF              reduce using rule 50 (estatuto -> write .)
    FOR             reduce using rule 50 (estatuto -> write .)
    WHILE           reduce using rule 50 (estatuto -> write .)
    RETURN          reduce using rule 50 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> write .)


state 81

    (51) estatuto -> if_1 .

    ID              reduce using rule 51 (estatuto -> if_1 .)
    READ            reduce using rule 51 (estatuto -> if_1 .)
    WRITE           reduce using rule 51 (estatuto -> if_1 .)
    IF              reduce using rule 51 (estatuto -> if_1 .)
    FOR             reduce using rule 51 (estatuto -> if_1 .)
    WHILE           reduce using rule 51 (estatuto -> if_1 .)
    RETURN          reduce using rule 51 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> if_1 .)


state 82

    (52) estatuto -> for_l .

    ID              reduce using rule 52 (estatuto -> for_l .)
    READ            reduce using rule 52 (estatuto -> for_l .)
    WRITE           reduce using rule 52 (estatuto -> for_l .)
    IF              reduce using rule 52 (estatuto -> for_l .)
    FOR             reduce using rule 52 (estatuto -> for_l .)
    WHILE           reduce using rule 52 (estatuto -> for_l .)
    RETURN          reduce using rule 52 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> for_l .)


state 83

    (53) estatuto -> while_l .

    ID              reduce using rule 53 (estatuto -> while_l .)
    READ            reduce using rule 53 (estatuto -> while_l .)
    WRITE           reduce using rule 53 (estatuto -> while_l .)
    IF              reduce using rule 53 (estatuto -> while_l .)
    FOR             reduce using rule 53 (estatuto -> while_l .)
    WHILE           reduce using rule 53 (estatuto -> while_l .)
    RETURN          reduce using rule 53 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> while_l .)


state 84

    (54) estatuto -> return .

    ID              reduce using rule 54 (estatuto -> return .)
    READ            reduce using rule 54 (estatuto -> return .)
    WRITE           reduce using rule 54 (estatuto -> return .)
    IF              reduce using rule 54 (estatuto -> return .)
    FOR             reduce using rule 54 (estatuto -> return .)
    WHILE           reduce using rule 54 (estatuto -> return .)
    RETURN          reduce using rule 54 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> return .)


state 85

    (55) estatuto -> func_extra .

    ID              reduce using rule 55 (estatuto -> func_extra .)
    READ            reduce using rule 55 (estatuto -> func_extra .)
    WRITE           reduce using rule 55 (estatuto -> func_extra .)
    IF              reduce using rule 55 (estatuto -> func_extra .)
    FOR             reduce using rule 55 (estatuto -> func_extra .)
    WHILE           reduce using rule 55 (estatuto -> func_extra .)
    RETURN          reduce using rule 55 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> func_extra .)


state 86

    (56) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 102


state 87

    (58) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (41) variable -> ID . variable_2 variable_point
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (141) empty -> .

    LPAR            shift and go to state 103
    L_S_BRACKET     shift and go to state 105
    EQUAL           reduce using rule 141 (empty -> .)

    variable_2                     shift and go to state 104
    empty                          shift and go to state 106

state 88

    (61) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 107


state 89

    (63) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 108


state 90

    (69) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 109


state 91

    (77) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 110


state 92

    (84) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (87) while_point -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)

    while_point                    shift and go to state 111
    empty                          shift and go to state 112

state 93

    (90) return -> RETURN . check_valid_func LPAR exp RPAR SEMICOLON
    (91) check_valid_func -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)

    check_valid_func               shift and go to state 113
    empty                          shift and go to state 114

state 94

    (92) func_extra -> empty .

    ID              reduce using rule 92 (func_extra -> empty .)
    READ            reduce using rule 92 (func_extra -> empty .)
    WRITE           reduce using rule 92 (func_extra -> empty .)
    IF              reduce using rule 92 (func_extra -> empty .)
    FOR             reduce using rule 92 (func_extra -> empty .)
    WHILE           reduce using rule 92 (func_extra -> empty .)
    RETURN          reduce using rule 92 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 92 (func_extra -> empty .)


state 95

    (132) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 115


state 96

    (40) punto_param_2 -> empty .

    RPAR            reduce using rule 40 (punto_param_2 -> empty .)


state 97

    (35) param -> tipo_simple ID . punto_param param_2
    (39) punto_param -> . empty
    (141) empty -> .

    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)

    punto_param                    shift and go to state 116
    empty                          shift and go to state 117

state 98

    (29) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 118


state 99

    (12) body_2 -> estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 99
    body_2                         shift and go to state 119
    empty                          shift and go to state 101
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 100

    (11) body -> vars func_agrega_v estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body -> vars func_agrega_v estatuto body_2 .)


state 101

    (13) body_2 -> empty .
    (92) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 13 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 13 (body_2 -> empty .)
    ID              reduce using rule 92 (func_extra -> empty .)
    READ            reduce using rule 92 (func_extra -> empty .)
    WRITE           reduce using rule 92 (func_extra -> empty .)
    IF              reduce using rule 92 (func_extra -> empty .)
    FOR             reduce using rule 92 (func_extra -> empty .)
    WHILE           reduce using rule 92 (func_extra -> empty .)
    RETURN          reduce using rule 92 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 92 (func_extra -> empty .) ]


state 102

    (56) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 120
    empty                          shift and go to state 121

state 103

    (58) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 124
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 104

    (41) variable -> ID variable_2 . variable_point
    (42) variable_point -> . empty
    (141) empty -> .

    EQUAL           reduce using rule 141 (empty -> .)
    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    variable_point                 shift and go to state 135
    empty                          shift and go to state 136

state 105

    (43) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 137
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 106

    (44) variable_2 -> empty .

    EQUAL           reduce using rule 44 (variable_2 -> empty .)
    TIMES           reduce using rule 44 (variable_2 -> empty .)
    DIVIDE          reduce using rule 44 (variable_2 -> empty .)
    PLUS            reduce using rule 44 (variable_2 -> empty .)
    MINUS           reduce using rule 44 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 44 (variable_2 -> empty .)
    LESS            reduce using rule 44 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 44 (variable_2 -> empty .)
    GREATER         reduce using rule 44 (variable_2 -> empty .)
    COMPARE         reduce using rule 44 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 44 (variable_2 -> empty .)
    AND             reduce using rule 44 (variable_2 -> empty .)
    OR              reduce using rule 44 (variable_2 -> empty .)
    COMMA           reduce using rule 44 (variable_2 -> empty .)
    RPAR            reduce using rule 44 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 44 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 44 (variable_2 -> empty .)
    TO              reduce using rule 44 (variable_2 -> empty .)


state 107

    (61) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (41) variable -> . ID variable_2 variable_point

    ID              shift and go to state 139

    variable                       shift and go to state 138

state 108

    (63) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (64) write_2 -> . exp write_point
    (65) write_2 -> . CTE_S add_constant_s write_point
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 142
    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    write_2                        shift and go to state 140
    exp                            shift and go to state 141
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 109

    (69) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 143
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 110

    (77) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 144


state 111

    (84) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 145


state 112

    (87) while_point -> empty .

    LPAR            reduce using rule 87 (while_point -> empty .)


state 113

    (90) return -> RETURN check_valid_func . LPAR exp RPAR SEMICOLON

    LPAR            shift and go to state 146


state 114

    (91) check_valid_func -> empty .

    LPAR            reduce using rule 91 (check_valid_func -> empty .)


state 115

    (132) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 147


state 116

    (35) param -> tipo_simple ID punto_param . param_2
    (37) param_2 -> . COMMA param
    (38) param_2 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 149
    RPAR            reduce using rule 141 (empty -> .)

    param_2                        shift and go to state 148
    empty                          shift and go to state 150

state 117

    (39) punto_param -> empty .

    COMMA           reduce using rule 39 (punto_param -> empty .)
    RPAR            reduce using rule 39 (punto_param -> empty .)


state 118

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (32) var_mat -> . empty
    (141) empty -> .

    SEMICOLON       reduce using rule 141 (empty -> .)

    var_mat                        shift and go to state 151
    empty                          shift and go to state 152

state 119

    (12) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 12 (body_2 -> estatuto body_2 .)


state 120

    (56) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    variable                       shift and go to state 130
    exp                            shift and go to state 153
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 121

    (123) add_operator -> empty .

    LPAR            reduce using rule 123 (add_operator -> empty .)
    ID              reduce using rule 123 (add_operator -> empty .)
    CTE_I           reduce using rule 123 (add_operator -> empty .)
    CTE_F           reduce using rule 123 (add_operator -> empty .)


state 122

    (41) variable -> ID . variable_2 variable_point
    (58) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (141) empty -> .

    LPAR            shift and go to state 103
    L_S_BRACKET     shift and go to state 105
    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    variable_2                     shift and go to state 104
    empty                          shift and go to state 106

state 123

    (115) f -> LPAR . add_floor exp RPAR remove_floor
    (121) add_floor -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_floor                      shift and go to state 154
    empty                          shift and go to state 155

state 124

    (58) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (59) llamada_2 -> . COMMA exp llamada_2
    (60) llamada_2 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 157
    RPAR            reduce using rule 141 (empty -> .)

    llamada_2                      shift and go to state 156
    empty                          shift and go to state 158

state 125

    (93) exp -> t_exp . add_operator_4 exp_2
    (127) add_operator_4 -> . empty
    (141) empty -> .

    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_operator_4                 shift and go to state 159
    empty                          shift and go to state 160

state 126

    (96) t_exp -> g_exp . add_operator_4 t_exp_2
    (127) add_operator_4 -> . empty
    (141) empty -> .

    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_operator_4                 shift and go to state 161
    empty                          shift and go to state 160

state 127

    (99) g_exp -> m_exp . g_exp_2 add_operator_3
    (100) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (101) g_exp_2 -> . LESS add_operator m_exp
    (102) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (103) g_exp_2 -> . GREATER add_operator m_exp
    (104) g_exp_2 -> . COMPARE add_operator m_exp
    (105) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (106) g_exp_2 -> . empty
    (141) empty -> .

    LESS_EQUAL      shift and go to state 163
    LESS            shift and go to state 164
    GREATER_EQUAL   shift and go to state 165
    GREATER         shift and go to state 166
    COMPARE         shift and go to state 167
    NOT_EQUAL       shift and go to state 168
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    g_exp_2                        shift and go to state 162
    empty                          shift and go to state 169

state 128

    (107) m_exp -> t . add_operator_2 m_exp_2
    (125) add_operator_2 -> . empty
    (141) empty -> .

    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_operator_2                 shift and go to state 170
    empty                          shift and go to state 171

state 129

    (111) t -> f . add_operator_1 t_2
    (124) add_operator_1 -> . empty
    (141) empty -> .

    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_operator_1                 shift and go to state 172
    empty                          shift and go to state 173

state 130

    (116) f -> variable .

    TIMES           reduce using rule 116 (f -> variable .)
    DIVIDE          reduce using rule 116 (f -> variable .)
    PLUS            reduce using rule 116 (f -> variable .)
    MINUS           reduce using rule 116 (f -> variable .)
    LESS_EQUAL      reduce using rule 116 (f -> variable .)
    LESS            reduce using rule 116 (f -> variable .)
    GREATER_EQUAL   reduce using rule 116 (f -> variable .)
    GREATER         reduce using rule 116 (f -> variable .)
    COMPARE         reduce using rule 116 (f -> variable .)
    NOT_EQUAL       reduce using rule 116 (f -> variable .)
    AND             reduce using rule 116 (f -> variable .)
    OR              reduce using rule 116 (f -> variable .)
    COMMA           reduce using rule 116 (f -> variable .)
    RPAR            reduce using rule 116 (f -> variable .)
    R_S_BRACKET     reduce using rule 116 (f -> variable .)
    SEMICOLON       reduce using rule 116 (f -> variable .)
    TO              reduce using rule 116 (f -> variable .)


state 131

    (117) f -> llamada .

    TIMES           reduce using rule 117 (f -> llamada .)
    DIVIDE          reduce using rule 117 (f -> llamada .)
    PLUS            reduce using rule 117 (f -> llamada .)
    MINUS           reduce using rule 117 (f -> llamada .)
    LESS_EQUAL      reduce using rule 117 (f -> llamada .)
    LESS            reduce using rule 117 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 117 (f -> llamada .)
    GREATER         reduce using rule 117 (f -> llamada .)
    COMPARE         reduce using rule 117 (f -> llamada .)
    NOT_EQUAL       reduce using rule 117 (f -> llamada .)
    AND             reduce using rule 117 (f -> llamada .)
    OR              reduce using rule 117 (f -> llamada .)
    COMMA           reduce using rule 117 (f -> llamada .)
    RPAR            reduce using rule 117 (f -> llamada .)
    R_S_BRACKET     reduce using rule 117 (f -> llamada .)
    SEMICOLON       reduce using rule 117 (f -> llamada .)
    TO              reduce using rule 117 (f -> llamada .)


state 132

    (118) f -> f_2 .

    TIMES           reduce using rule 118 (f -> f_2 .)
    DIVIDE          reduce using rule 118 (f -> f_2 .)
    PLUS            reduce using rule 118 (f -> f_2 .)
    MINUS           reduce using rule 118 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 118 (f -> f_2 .)
    LESS            reduce using rule 118 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 118 (f -> f_2 .)
    GREATER         reduce using rule 118 (f -> f_2 .)
    COMPARE         reduce using rule 118 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 118 (f -> f_2 .)
    AND             reduce using rule 118 (f -> f_2 .)
    OR              reduce using rule 118 (f -> f_2 .)
    COMMA           reduce using rule 118 (f -> f_2 .)
    RPAR            reduce using rule 118 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 118 (f -> f_2 .)
    SEMICOLON       reduce using rule 118 (f -> f_2 .)
    TO              reduce using rule 118 (f -> f_2 .)


state 133

    (119) f_2 -> CTE_I . add_constant_i
    (128) add_constant_i -> . empty
    (141) empty -> .

    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_constant_i                 shift and go to state 174
    empty                          shift and go to state 175

state 134

    (120) f_2 -> CTE_F . add_constant_f
    (130) add_constant_f -> . empty
    (141) empty -> .

    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_constant_f                 shift and go to state 176
    empty                          shift and go to state 177

state 135

    (41) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 41 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 41 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 41 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 41 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 41 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 41 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 41 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 41 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 41 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 41 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 41 (variable -> ID variable_2 variable_point .)


state 136

    (42) variable_point -> empty .

    EQUAL           reduce using rule 42 (variable_point -> empty .)
    TIMES           reduce using rule 42 (variable_point -> empty .)
    DIVIDE          reduce using rule 42 (variable_point -> empty .)
    PLUS            reduce using rule 42 (variable_point -> empty .)
    MINUS           reduce using rule 42 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 42 (variable_point -> empty .)
    LESS            reduce using rule 42 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 42 (variable_point -> empty .)
    GREATER         reduce using rule 42 (variable_point -> empty .)
    COMPARE         reduce using rule 42 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 42 (variable_point -> empty .)
    AND             reduce using rule 42 (variable_point -> empty .)
    OR              reduce using rule 42 (variable_point -> empty .)
    COMMA           reduce using rule 42 (variable_point -> empty .)
    RPAR            reduce using rule 42 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 42 (variable_point -> empty .)
    SEMICOLON       reduce using rule 42 (variable_point -> empty .)
    TO              reduce using rule 42 (variable_point -> empty .)


state 137

    (43) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 178


state 138

    (61) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (62) read_point -> . empty
    (141) empty -> .

    RPAR            reduce using rule 141 (empty -> .)

    read_point                     shift and go to state 179
    empty                          shift and go to state 180

state 139

    (41) variable -> ID . variable_2 variable_point
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (141) empty -> .

    L_S_BRACKET     shift and go to state 105
    RPAR            reduce using rule 141 (empty -> .)

    variable_2                     shift and go to state 104
    empty                          shift and go to state 106

state 140

    (63) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (66) write_3 -> . COMMA write_2 write_3
    (67) write_3 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 182
    RPAR            reduce using rule 141 (empty -> .)

    write_3                        shift and go to state 181
    empty                          shift and go to state 183

state 141

    (64) write_2 -> exp . write_point
    (68) write_point -> . empty
    (141) empty -> .

    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)

    write_point                    shift and go to state 184
    empty                          shift and go to state 185

state 142

    (65) write_2 -> CTE_S . add_constant_s write_point
    (129) add_constant_s -> . empty
    (141) empty -> .

    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)

    add_constant_s                 shift and go to state 186
    empty                          shift and go to state 187

state 143

    (69) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (74) if_point -> . empty
    (141) empty -> .

    RPAR            reduce using rule 141 (empty -> .)

    if_point                       shift and go to state 188
    empty                          shift and go to state 189

state 144

    (77) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (80) for_point_1 -> . empty
    (141) empty -> .

    EQUAL           reduce using rule 141 (empty -> .)

    for_point_1                    shift and go to state 190
    empty                          shift and go to state 191

state 145

    (84) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 192
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 146

    (90) return -> RETURN check_valid_func LPAR . exp RPAR SEMICOLON
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 193
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 147

    (132) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 194
    vars                           shift and go to state 62

state 148

    (35) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 35 (param -> tipo_simple ID punto_param param_2 .)


state 149

    (37) param_2 -> COMMA . param
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (141) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 141 (empty -> .)

    param                          shift and go to state 195
    tipo_simple                    shift and go to state 69
    empty                          shift and go to state 70

state 150

    (38) param_2 -> empty .

    RPAR            reduce using rule 38 (param_2 -> empty .)


state 151

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 29 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 152

    (32) var_mat -> empty .

    SEMICOLON       reduce using rule 32 (var_mat -> empty .)


state 153

    (56) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (57) asigna_point -> . empty
    (141) empty -> .

    SEMICOLON       reduce using rule 141 (empty -> .)

    asigna_point                   shift and go to state 196
    empty                          shift and go to state 197

state 154

    (115) f -> LPAR add_floor . exp RPAR remove_floor
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 198
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 155

    (121) add_floor -> empty .

    LPAR            reduce using rule 121 (add_floor -> empty .)
    ID              reduce using rule 121 (add_floor -> empty .)
    CTE_I           reduce using rule 121 (add_floor -> empty .)
    CTE_F           reduce using rule 121 (add_floor -> empty .)


state 156

    (58) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 199


state 157

    (59) llamada_2 -> COMMA . exp llamada_2
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 200
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 158

    (60) llamada_2 -> empty .

    RPAR            reduce using rule 60 (llamada_2 -> empty .)


state 159

    (93) exp -> t_exp add_operator_4 . exp_2
    (94) exp_2 -> . OR add_operator exp
    (95) exp_2 -> . empty
    (141) empty -> .

    OR              shift and go to state 202
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    exp_2                          shift and go to state 201
    empty                          shift and go to state 203

state 160

    (127) add_operator_4 -> empty .

    OR              reduce using rule 127 (add_operator_4 -> empty .)
    COMMA           reduce using rule 127 (add_operator_4 -> empty .)
    RPAR            reduce using rule 127 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 127 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 127 (add_operator_4 -> empty .)
    TO              reduce using rule 127 (add_operator_4 -> empty .)
    AND             reduce using rule 127 (add_operator_4 -> empty .)


state 161

    (96) t_exp -> g_exp add_operator_4 . t_exp_2
    (97) t_exp_2 -> . AND add_operator t_exp
    (98) t_exp_2 -> . empty
    (141) empty -> .

    AND             shift and go to state 205
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    t_exp_2                        shift and go to state 204
    empty                          shift and go to state 206

state 162

    (99) g_exp -> m_exp g_exp_2 . add_operator_3
    (126) add_operator_3 -> . empty
    (141) empty -> .

    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    add_operator_3                 shift and go to state 207
    empty                          shift and go to state 208

state 163

    (100) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 209
    empty                          shift and go to state 121

state 164

    (101) g_exp_2 -> LESS . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 210
    empty                          shift and go to state 121

state 165

    (102) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 211
    empty                          shift and go to state 121

state 166

    (103) g_exp_2 -> GREATER . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 212
    empty                          shift and go to state 121

state 167

    (104) g_exp_2 -> COMPARE . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 213
    empty                          shift and go to state 121

state 168

    (105) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 214
    empty                          shift and go to state 121

state 169

    (106) g_exp_2 -> empty .

    AND             reduce using rule 106 (g_exp_2 -> empty .)
    OR              reduce using rule 106 (g_exp_2 -> empty .)
    COMMA           reduce using rule 106 (g_exp_2 -> empty .)
    RPAR            reduce using rule 106 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 106 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 106 (g_exp_2 -> empty .)
    TO              reduce using rule 106 (g_exp_2 -> empty .)


state 170

    (107) m_exp -> t add_operator_2 . m_exp_2
    (108) m_exp_2 -> . PLUS add_operator m_exp
    (109) m_exp_2 -> . MINUS add_operator m_exp
    (110) m_exp_2 -> . empty
    (141) empty -> .

    PLUS            shift and go to state 216
    MINUS           shift and go to state 217
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    m_exp_2                        shift and go to state 215
    empty                          shift and go to state 218

state 171

    (125) add_operator_2 -> empty .

    PLUS            reduce using rule 125 (add_operator_2 -> empty .)
    MINUS           reduce using rule 125 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 125 (add_operator_2 -> empty .)
    LESS            reduce using rule 125 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 125 (add_operator_2 -> empty .)
    GREATER         reduce using rule 125 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 125 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 125 (add_operator_2 -> empty .)
    AND             reduce using rule 125 (add_operator_2 -> empty .)
    OR              reduce using rule 125 (add_operator_2 -> empty .)
    COMMA           reduce using rule 125 (add_operator_2 -> empty .)
    RPAR            reduce using rule 125 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 125 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 125 (add_operator_2 -> empty .)
    TO              reduce using rule 125 (add_operator_2 -> empty .)


state 172

    (111) t -> f add_operator_1 . t_2
    (112) t_2 -> . TIMES add_operator t
    (113) t_2 -> . DIVIDE add_operator t
    (114) t_2 -> . empty
    (141) empty -> .

    TIMES           shift and go to state 220
    DIVIDE          shift and go to state 221
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    t_2                            shift and go to state 219
    empty                          shift and go to state 222

state 173

    (124) add_operator_1 -> empty .

    TIMES           reduce using rule 124 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 124 (add_operator_1 -> empty .)
    PLUS            reduce using rule 124 (add_operator_1 -> empty .)
    MINUS           reduce using rule 124 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 124 (add_operator_1 -> empty .)
    LESS            reduce using rule 124 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 124 (add_operator_1 -> empty .)
    GREATER         reduce using rule 124 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 124 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 124 (add_operator_1 -> empty .)
    AND             reduce using rule 124 (add_operator_1 -> empty .)
    OR              reduce using rule 124 (add_operator_1 -> empty .)
    COMMA           reduce using rule 124 (add_operator_1 -> empty .)
    RPAR            reduce using rule 124 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 124 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 124 (add_operator_1 -> empty .)
    TO              reduce using rule 124 (add_operator_1 -> empty .)


state 174

    (119) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 119 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 119 (f_2 -> CTE_I add_constant_i .)


state 175

    (128) add_constant_i -> empty .

    TIMES           reduce using rule 128 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 128 (add_constant_i -> empty .)
    PLUS            reduce using rule 128 (add_constant_i -> empty .)
    MINUS           reduce using rule 128 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 128 (add_constant_i -> empty .)
    LESS            reduce using rule 128 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 128 (add_constant_i -> empty .)
    GREATER         reduce using rule 128 (add_constant_i -> empty .)
    COMPARE         reduce using rule 128 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 128 (add_constant_i -> empty .)
    AND             reduce using rule 128 (add_constant_i -> empty .)
    OR              reduce using rule 128 (add_constant_i -> empty .)
    COMMA           reduce using rule 128 (add_constant_i -> empty .)
    RPAR            reduce using rule 128 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 128 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 128 (add_constant_i -> empty .)
    TO              reduce using rule 128 (add_constant_i -> empty .)


state 176

    (120) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 120 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 120 (f_2 -> CTE_F add_constant_f .)


state 177

    (130) add_constant_f -> empty .

    TIMES           reduce using rule 130 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 130 (add_constant_f -> empty .)
    PLUS            reduce using rule 130 (add_constant_f -> empty .)
    MINUS           reduce using rule 130 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 130 (add_constant_f -> empty .)
    LESS            reduce using rule 130 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 130 (add_constant_f -> empty .)
    GREATER         reduce using rule 130 (add_constant_f -> empty .)
    COMPARE         reduce using rule 130 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 130 (add_constant_f -> empty .)
    AND             reduce using rule 130 (add_constant_f -> empty .)
    OR              reduce using rule 130 (add_constant_f -> empty .)
    COMMA           reduce using rule 130 (add_constant_f -> empty .)
    RPAR            reduce using rule 130 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 130 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 130 (add_constant_f -> empty .)
    TO              reduce using rule 130 (add_constant_f -> empty .)


state 178

    (43) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (45) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (46) variable_3 -> . empty
    (141) empty -> .

    L_S_BRACKET     shift and go to state 223
    EQUAL           reduce using rule 141 (empty -> .)
    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    variable_3                     shift and go to state 224
    empty                          shift and go to state 225

state 179

    (61) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 226


state 180

    (62) read_point -> empty .

    RPAR            reduce using rule 62 (read_point -> empty .)


state 181

    (63) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 227


state 182

    (66) write_3 -> COMMA . write_2 write_3
    (64) write_2 -> . exp write_point
    (65) write_2 -> . CTE_S add_constant_s write_point
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 142
    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    write_2                        shift and go to state 228
    exp                            shift and go to state 141
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 183

    (67) write_3 -> empty .

    RPAR            reduce using rule 67 (write_3 -> empty .)


state 184

    (64) write_2 -> exp write_point .

    COMMA           reduce using rule 64 (write_2 -> exp write_point .)
    RPAR            reduce using rule 64 (write_2 -> exp write_point .)


state 185

    (68) write_point -> empty .

    COMMA           reduce using rule 68 (write_point -> empty .)
    RPAR            reduce using rule 68 (write_point -> empty .)


state 186

    (65) write_2 -> CTE_S add_constant_s . write_point
    (68) write_point -> . empty
    (141) empty -> .

    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)

    write_point                    shift and go to state 229
    empty                          shift and go to state 185

state 187

    (129) add_constant_s -> empty .

    COMMA           reduce using rule 129 (add_constant_s -> empty .)
    RPAR            reduce using rule 129 (add_constant_s -> empty .)


state 188

    (69) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 230


state 189

    (74) if_point -> empty .

    RPAR            reduce using rule 74 (if_point -> empty .)


state 190

    (77) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 231


state 191

    (80) for_point_1 -> empty .

    EQUAL           reduce using rule 80 (for_point_1 -> empty .)


state 192

    (84) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 232


state 193

    (90) return -> RETURN check_valid_func LPAR exp . RPAR SEMICOLON

    RPAR            shift and go to state 233


state 194

    (132) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 234


state 195

    (37) param_2 -> COMMA param .

    RPAR            reduce using rule 37 (param_2 -> COMMA param .)


state 196

    (56) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 235


state 197

    (57) asigna_point -> empty .

    SEMICOLON       reduce using rule 57 (asigna_point -> empty .)


state 198

    (115) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 236


state 199

    (58) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 237


state 200

    (59) llamada_2 -> COMMA exp . llamada_2
    (59) llamada_2 -> . COMMA exp llamada_2
    (60) llamada_2 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 157
    RPAR            reduce using rule 141 (empty -> .)

    llamada_2                      shift and go to state 238
    empty                          shift and go to state 158

state 201

    (93) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 93 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 93 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 93 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 93 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 93 (exp -> t_exp add_operator_4 exp_2 .)


state 202

    (94) exp_2 -> OR . add_operator exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 239
    empty                          shift and go to state 121

state 203

    (95) exp_2 -> empty .

    COMMA           reduce using rule 95 (exp_2 -> empty .)
    RPAR            reduce using rule 95 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 95 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 95 (exp_2 -> empty .)
    TO              reduce using rule 95 (exp_2 -> empty .)


state 204

    (96) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 96 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 96 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 96 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 96 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 96 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 96 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 205

    (97) t_exp_2 -> AND . add_operator t_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 240
    empty                          shift and go to state 121

state 206

    (98) t_exp_2 -> empty .

    OR              reduce using rule 98 (t_exp_2 -> empty .)
    COMMA           reduce using rule 98 (t_exp_2 -> empty .)
    RPAR            reduce using rule 98 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 98 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 98 (t_exp_2 -> empty .)
    TO              reduce using rule 98 (t_exp_2 -> empty .)


state 207

    (99) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 99 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 208

    (126) add_operator_3 -> empty .

    AND             reduce using rule 126 (add_operator_3 -> empty .)
    OR              reduce using rule 126 (add_operator_3 -> empty .)
    COMMA           reduce using rule 126 (add_operator_3 -> empty .)
    RPAR            reduce using rule 126 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 126 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 126 (add_operator_3 -> empty .)
    TO              reduce using rule 126 (add_operator_3 -> empty .)


state 209

    (100) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 241
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 210

    (101) g_exp_2 -> LESS add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 242
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 211

    (102) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 243
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 212

    (103) g_exp_2 -> GREATER add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 244
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 213

    (104) g_exp_2 -> COMPARE add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 245
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 214

    (105) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 246
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 215

    (107) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 107 (m_exp -> t add_operator_2 m_exp_2 .)


state 216

    (108) m_exp_2 -> PLUS . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 247
    empty                          shift and go to state 121

state 217

    (109) m_exp_2 -> MINUS . add_operator m_exp
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 248
    empty                          shift and go to state 121

state 218

    (110) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 110 (m_exp_2 -> empty .)
    LESS            reduce using rule 110 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 110 (m_exp_2 -> empty .)
    GREATER         reduce using rule 110 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 110 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 110 (m_exp_2 -> empty .)
    AND             reduce using rule 110 (m_exp_2 -> empty .)
    OR              reduce using rule 110 (m_exp_2 -> empty .)
    COMMA           reduce using rule 110 (m_exp_2 -> empty .)
    RPAR            reduce using rule 110 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 110 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 110 (m_exp_2 -> empty .)
    TO              reduce using rule 110 (m_exp_2 -> empty .)


state 219

    (111) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 111 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 111 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 111 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 111 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 111 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 111 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 111 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 111 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 111 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 111 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 111 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 111 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 111 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 111 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 111 (t -> f add_operator_1 t_2 .)


state 220

    (112) t_2 -> TIMES . add_operator t
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 249
    empty                          shift and go to state 121

state 221

    (113) t_2 -> DIVIDE . add_operator t
    (123) add_operator -> . empty
    (141) empty -> .

    LPAR            reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)

    add_operator                   shift and go to state 250
    empty                          shift and go to state 121

state 222

    (114) t_2 -> empty .

    PLUS            reduce using rule 114 (t_2 -> empty .)
    MINUS           reduce using rule 114 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 114 (t_2 -> empty .)
    LESS            reduce using rule 114 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 114 (t_2 -> empty .)
    GREATER         reduce using rule 114 (t_2 -> empty .)
    COMPARE         reduce using rule 114 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 114 (t_2 -> empty .)
    AND             reduce using rule 114 (t_2 -> empty .)
    OR              reduce using rule 114 (t_2 -> empty .)
    COMMA           reduce using rule 114 (t_2 -> empty .)
    RPAR            reduce using rule 114 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 114 (t_2 -> empty .)
    SEMICOLON       reduce using rule 114 (t_2 -> empty .)
    TO              reduce using rule 114 (t_2 -> empty .)


state 223

    (45) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 251
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 224

    (43) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 225

    (46) variable_3 -> empty .

    EQUAL           reduce using rule 46 (variable_3 -> empty .)
    TIMES           reduce using rule 46 (variable_3 -> empty .)
    DIVIDE          reduce using rule 46 (variable_3 -> empty .)
    PLUS            reduce using rule 46 (variable_3 -> empty .)
    MINUS           reduce using rule 46 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 46 (variable_3 -> empty .)
    LESS            reduce using rule 46 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 46 (variable_3 -> empty .)
    GREATER         reduce using rule 46 (variable_3 -> empty .)
    COMPARE         reduce using rule 46 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 46 (variable_3 -> empty .)
    AND             reduce using rule 46 (variable_3 -> empty .)
    OR              reduce using rule 46 (variable_3 -> empty .)
    COMMA           reduce using rule 46 (variable_3 -> empty .)
    RPAR            reduce using rule 46 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 46 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 46 (variable_3 -> empty .)
    TO              reduce using rule 46 (variable_3 -> empty .)


state 226

    (61) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 252


state 227

    (63) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 253


state 228

    (66) write_3 -> COMMA write_2 . write_3
    (66) write_3 -> . COMMA write_2 write_3
    (67) write_3 -> . empty
    (141) empty -> .

    COMMA           shift and go to state 182
    RPAR            reduce using rule 141 (empty -> .)

    write_3                        shift and go to state 254
    empty                          shift and go to state 183

state 229

    (65) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 65 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 65 (write_2 -> CTE_S add_constant_s write_point .)


state 230

    (69) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 255


state 231

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 256
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 232

    (84) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (88) while_point_2 -> . empty
    (141) empty -> .

    L_C_BRACKET     reduce using rule 141 (empty -> .)

    while_point_2                  shift and go to state 257
    empty                          shift and go to state 258

state 233

    (90) return -> RETURN check_valid_func LPAR exp RPAR . SEMICOLON

    SEMICOLON       shift and go to state 259


state 234

    (132) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (140) final_func_point -> . empty
    (141) empty -> .

    SEMICOLON       reduce using rule 141 (empty -> .)

    final_func_point               shift and go to state 260
    empty                          shift and go to state 261

state 235

    (56) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 56 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 236

    (115) f -> LPAR add_floor exp RPAR . remove_floor
    (122) remove_floor -> . empty
    (141) empty -> .

    TIMES           reduce using rule 141 (empty -> .)
    DIVIDE          reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESS_EQUAL      reduce using rule 141 (empty -> .)
    LESS            reduce using rule 141 (empty -> .)
    GREATER_EQUAL   reduce using rule 141 (empty -> .)
    GREATER         reduce using rule 141 (empty -> .)
    COMPARE         reduce using rule 141 (empty -> .)
    NOT_EQUAL       reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    COMMA           reduce using rule 141 (empty -> .)
    RPAR            reduce using rule 141 (empty -> .)
    R_S_BRACKET     reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)

    remove_floor                   shift and go to state 262
    empty                          shift and go to state 263

state 237

    (58) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 58 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 238

    (59) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 59 (llamada_2 -> COMMA exp llamada_2 .)


state 239

    (94) exp_2 -> OR add_operator . exp
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 264
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 240

    (97) t_exp_2 -> AND add_operator . t_exp
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    t_exp                          shift and go to state 265
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 241

    (100) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 100 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 242

    (101) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 101 (g_exp_2 -> LESS add_operator m_exp .)


state 243

    (102) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 102 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 244

    (103) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 103 (g_exp_2 -> GREATER add_operator m_exp .)


state 245

    (104) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 104 (g_exp_2 -> COMPARE add_operator m_exp .)


state 246

    (105) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 105 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 247

    (108) m_exp_2 -> PLUS add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 266
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 248

    (109) m_exp_2 -> MINUS add_operator . m_exp
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    m_exp                          shift and go to state 267
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 249

    (112) t_2 -> TIMES add_operator . t
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    t                              shift and go to state 268
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 250

    (113) t_2 -> DIVIDE add_operator . t
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    t                              shift and go to state 269
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 251

    (45) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 270


state 252

    (61) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 61 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 253

    (63) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 63 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 254

    (66) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 66 (write_3 -> COMMA write_2 write_3 .)


state 255

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93
    R_C_BRACKET     reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 271
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86
    empty                          shift and go to state 94

state 256

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (81) for_point_2 -> . empty
    (141) empty -> .

    TO              reduce using rule 141 (empty -> .)

    for_point_2                    shift and go to state 272
    empty                          shift and go to state 273

state 257

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 274


state 258

    (88) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 88 (while_point_2 -> empty .)


state 259

    (90) return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .

    ID              reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    READ            reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    WRITE           reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    IF              reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    FOR             reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    WHILE           reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    RETURN          reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 90 (return -> RETURN check_valid_func LPAR exp RPAR SEMICOLON .)


state 260

    (132) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 132 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 261

    (140) final_func_point -> empty .

    SEMICOLON       reduce using rule 140 (final_func_point -> empty .)


state 262

    (115) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 115 (f -> LPAR add_floor exp RPAR remove_floor .)


state 263

    (122) remove_floor -> empty .

    TIMES           reduce using rule 122 (remove_floor -> empty .)
    DIVIDE          reduce using rule 122 (remove_floor -> empty .)
    PLUS            reduce using rule 122 (remove_floor -> empty .)
    MINUS           reduce using rule 122 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 122 (remove_floor -> empty .)
    LESS            reduce using rule 122 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 122 (remove_floor -> empty .)
    GREATER         reduce using rule 122 (remove_floor -> empty .)
    COMPARE         reduce using rule 122 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 122 (remove_floor -> empty .)
    AND             reduce using rule 122 (remove_floor -> empty .)
    OR              reduce using rule 122 (remove_floor -> empty .)
    COMMA           reduce using rule 122 (remove_floor -> empty .)
    RPAR            reduce using rule 122 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 122 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 122 (remove_floor -> empty .)
    TO              reduce using rule 122 (remove_floor -> empty .)


state 264

    (94) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 94 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 94 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 94 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 94 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 94 (exp_2 -> OR add_operator exp .)


state 265

    (97) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 97 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 97 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 97 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 97 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 97 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 97 (t_exp_2 -> AND add_operator t_exp .)


state 266

    (108) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 108 (m_exp_2 -> PLUS add_operator m_exp .)


state 267

    (109) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 109 (m_exp_2 -> MINUS add_operator m_exp .)


state 268

    (112) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 112 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 112 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 112 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 112 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 112 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 112 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 112 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 112 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 112 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 112 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 112 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 112 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 112 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 112 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 112 (t_2 -> TIMES add_operator t .)


state 269

    (113) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 113 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 113 (t_2 -> DIVIDE add_operator t .)


state 270

    (45) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 271

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (70) if_2 -> . estatuto if_2
    (71) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 275
    if_2                           shift and go to state 276
    empty                          shift and go to state 277
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 272

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 278


state 273

    (81) for_point_2 -> empty .

    TO              reduce using rule 81 (for_point_2 -> empty .)


state 274

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93
    R_C_BRACKET     reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 279
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86
    empty                          shift and go to state 94

state 275

    (70) if_2 -> estatuto . if_2
    (70) if_2 -> . estatuto if_2
    (71) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 275
    if_2                           shift and go to state 280
    empty                          shift and go to state 277
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 276

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 281


state 277

    (71) if_2 -> empty .
    (92) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 71 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 71 (if_2 -> empty .)
    ID              reduce using rule 92 (func_extra -> empty .)
    READ            reduce using rule 92 (func_extra -> empty .)
    WRITE           reduce using rule 92 (func_extra -> empty .)
    IF              reduce using rule 92 (func_extra -> empty .)
    FOR             reduce using rule 92 (func_extra -> empty .)
    WHILE           reduce using rule 92 (func_extra -> empty .)
    RETURN          reduce using rule 92 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 92 (func_extra -> empty .) ]


state 278

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (93) exp -> . t_exp add_operator_4 exp_2
    (96) t_exp -> . g_exp add_operator_4 t_exp_2
    (99) g_exp -> . m_exp g_exp_2 add_operator_3
    (107) m_exp -> . t add_operator_2 m_exp_2
    (111) t -> . f add_operator_1 t_2
    (115) f -> . LPAR add_floor exp RPAR remove_floor
    (116) f -> . variable
    (117) f -> . llamada
    (118) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (119) f_2 -> . CTE_I add_constant_i
    (120) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 123
    ID              shift and go to state 122
    CTE_I           shift and go to state 133
    CTE_F           shift and go to state 134

    exp                            shift and go to state 282
    t_exp                          shift and go to state 125
    g_exp                          shift and go to state 126
    m_exp                          shift and go to state 127
    t                              shift and go to state 128
    f                              shift and go to state 129
    variable                       shift and go to state 130
    llamada                        shift and go to state 131
    f_2                            shift and go to state 132

state 279

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (85) while_l_2 -> . estatuto while_l_2
    (86) while_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 283
    while_l_2                      shift and go to state 284
    empty                          shift and go to state 285
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 280

    (70) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 70 (if_2 -> estatuto if_2 .)


state 281

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (72) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (73) if_3 -> . empty
    (141) empty -> .

    ELSE            shift and go to state 287
    SEMICOLON       reduce using rule 141 (empty -> .)

    if_3                           shift and go to state 286
    empty                          shift and go to state 288

state 282

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (82) for_point_3 -> . empty
    (141) empty -> .

    RPAR            reduce using rule 141 (empty -> .)

    for_point_3                    shift and go to state 289
    empty                          shift and go to state 290

state 283

    (85) while_l_2 -> estatuto . while_l_2
    (85) while_l_2 -> . estatuto while_l_2
    (86) while_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 283
    while_l_2                      shift and go to state 291
    empty                          shift and go to state 285
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 284

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 292


state 285

    (86) while_l_2 -> empty .
    (92) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 86 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 86 (while_l_2 -> empty .)
    ID              reduce using rule 92 (func_extra -> empty .)
    READ            reduce using rule 92 (func_extra -> empty .)
    WRITE           reduce using rule 92 (func_extra -> empty .)
    IF              reduce using rule 92 (func_extra -> empty .)
    FOR             reduce using rule 92 (func_extra -> empty .)
    WHILE           reduce using rule 92 (func_extra -> empty .)
    RETURN          reduce using rule 92 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 92 (func_extra -> empty .) ]


state 286

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 293


state 287

    (72) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (76) if_point_3 -> . empty
    (141) empty -> .

    L_C_BRACKET     reduce using rule 141 (empty -> .)

    if_point_3                     shift and go to state 294
    empty                          shift and go to state 295

state 288

    (73) if_3 -> empty .

    SEMICOLON       reduce using rule 73 (if_3 -> empty .)


state 289

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 296


state 290

    (82) for_point_3 -> empty .

    RPAR            reduce using rule 82 (for_point_3 -> empty .)


state 291

    (85) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 85 (while_l_2 -> estatuto while_l_2 .)


state 292

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 297


state 293

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (75) if_point_2 -> . empty
    (141) empty -> .

    ID              reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    R_C_BRACKET     reduce using rule 141 (empty -> .)

    if_point_2                     shift and go to state 298
    empty                          shift and go to state 299

state 294

    (72) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 300


state 295

    (76) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 76 (if_point_3 -> empty .)


state 296

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 301


state 297

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (89) while_point_3 -> . empty
    (141) empty -> .

    ID              reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    R_C_BRACKET     reduce using rule 141 (empty -> .)

    while_point_3                  shift and go to state 302
    empty                          shift and go to state 303

state 298

    (69) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 69 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 299

    (75) if_point_2 -> empty .

    ID              reduce using rule 75 (if_point_2 -> empty .)
    READ            reduce using rule 75 (if_point_2 -> empty .)
    WRITE           reduce using rule 75 (if_point_2 -> empty .)
    IF              reduce using rule 75 (if_point_2 -> empty .)
    FOR             reduce using rule 75 (if_point_2 -> empty .)
    WHILE           reduce using rule 75 (if_point_2 -> empty .)
    RETURN          reduce using rule 75 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 75 (if_point_2 -> empty .)


state 300

    (72) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93
    R_C_BRACKET     reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 304
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86
    empty                          shift and go to state 94

state 301

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (141) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93
    R_C_BRACKET     reduce using rule 141 (empty -> .)

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 305
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86
    empty                          shift and go to state 94

state 302

    (84) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 84 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 303

    (89) while_point_3 -> empty .

    ID              reduce using rule 89 (while_point_3 -> empty .)
    READ            reduce using rule 89 (while_point_3 -> empty .)
    WRITE           reduce using rule 89 (while_point_3 -> empty .)
    IF              reduce using rule 89 (while_point_3 -> empty .)
    FOR             reduce using rule 89 (while_point_3 -> empty .)
    WHILE           reduce using rule 89 (while_point_3 -> empty .)
    RETURN          reduce using rule 89 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 89 (while_point_3 -> empty .)


state 304

    (72) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (70) if_2 -> . estatuto if_2
    (71) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 275
    if_2                           shift and go to state 306
    empty                          shift and go to state 277
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 305

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (78) for_l_2 -> . estatuto for_l_2
    (79) for_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 307
    for_l_2                        shift and go to state 308
    empty                          shift and go to state 309
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 306

    (72) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 310


state 307

    (78) for_l_2 -> estatuto . for_l_2
    (78) for_l_2 -> . estatuto for_l_2
    (79) for_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . return
    (55) estatuto -> . func_extra
    (141) empty -> .
    (56) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (58) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (61) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (63) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (69) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (77) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (84) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) return -> . RETURN check_valid_func LPAR exp RPAR SEMICOLON
    (92) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 141 (empty -> .)
    ID              shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    FOR             shift and go to state 91
    WHILE           shift and go to state 92
    RETURN          shift and go to state 93

  ! ID              [ reduce using rule 141 (empty -> .) ]
  ! READ            [ reduce using rule 141 (empty -> .) ]
  ! WRITE           [ reduce using rule 141 (empty -> .) ]
  ! IF              [ reduce using rule 141 (empty -> .) ]
  ! FOR             [ reduce using rule 141 (empty -> .) ]
  ! WHILE           [ reduce using rule 141 (empty -> .) ]
  ! RETURN          [ reduce using rule 141 (empty -> .) ]

    estatuto                       shift and go to state 307
    for_l_2                        shift and go to state 311
    empty                          shift and go to state 309
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    if_1                           shift and go to state 81
    for_l                          shift and go to state 82
    while_l                        shift and go to state 83
    return                         shift and go to state 84
    func_extra                     shift and go to state 85
    variable                       shift and go to state 86

state 308

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 312


state 309

    (79) for_l_2 -> empty .
    (92) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 79 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 79 (for_l_2 -> empty .)
    ID              reduce using rule 92 (func_extra -> empty .)
    READ            reduce using rule 92 (func_extra -> empty .)
    WRITE           reduce using rule 92 (func_extra -> empty .)
    IF              reduce using rule 92 (func_extra -> empty .)
    FOR             reduce using rule 92 (func_extra -> empty .)
    WHILE           reduce using rule 92 (func_extra -> empty .)
    RETURN          reduce using rule 92 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 92 (func_extra -> empty .) ]


state 310

    (72) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 72 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 311

    (78) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 78 (for_l_2 -> estatuto for_l_2 .)


state 312

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 313


state 313

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (83) for_point_4 -> . empty
    (141) empty -> .

    ID              reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    WRITE           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    R_C_BRACKET     reduce using rule 141 (empty -> .)

    for_point_4                    shift and go to state 314
    empty                          shift and go to state 315

state 314

    (77) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 77 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 315

    (83) for_point_4 -> empty .

    ID              reduce using rule 83 (for_point_4 -> empty .)
    READ            reduce using rule 83 (for_point_4 -> empty .)
    WRITE           reduce using rule 83 (for_point_4 -> empty .)
    IF              reduce using rule 83 (for_point_4 -> empty .)
    FOR             reduce using rule 83 (for_point_4 -> empty .)
    WHILE           reduce using rule 83 (for_point_4 -> empty .)
    RETURN          reduce using rule 83 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 83 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for READ in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for READ in state 99 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 99 resolved as shift
WARNING: shift/reduce conflict for IF in state 99 resolved as shift
WARNING: shift/reduce conflict for FOR in state 99 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 99 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 99 resolved as shift
WARNING: shift/reduce conflict for ID in state 255 resolved as shift
WARNING: shift/reduce conflict for READ in state 255 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 255 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 255 resolved as shift
WARNING: shift/reduce conflict for ID in state 271 resolved as shift
WARNING: shift/reduce conflict for READ in state 271 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 271 resolved as shift
WARNING: shift/reduce conflict for IF in state 271 resolved as shift
WARNING: shift/reduce conflict for FOR in state 271 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 271 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 271 resolved as shift
WARNING: shift/reduce conflict for ID in state 274 resolved as shift
WARNING: shift/reduce conflict for READ in state 274 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 274 resolved as shift
WARNING: shift/reduce conflict for IF in state 274 resolved as shift
WARNING: shift/reduce conflict for FOR in state 274 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 274 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 274 resolved as shift
WARNING: shift/reduce conflict for ID in state 275 resolved as shift
WARNING: shift/reduce conflict for READ in state 275 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 275 resolved as shift
WARNING: shift/reduce conflict for IF in state 275 resolved as shift
WARNING: shift/reduce conflict for FOR in state 275 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 275 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 275 resolved as shift
WARNING: shift/reduce conflict for ID in state 279 resolved as shift
WARNING: shift/reduce conflict for READ in state 279 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 279 resolved as shift
WARNING: shift/reduce conflict for IF in state 279 resolved as shift
WARNING: shift/reduce conflict for FOR in state 279 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 279 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 279 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
WARNING: shift/reduce conflict for READ in state 283 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 283 resolved as shift
WARNING: shift/reduce conflict for IF in state 283 resolved as shift
WARNING: shift/reduce conflict for FOR in state 283 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 283 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 283 resolved as shift
WARNING: shift/reduce conflict for ID in state 300 resolved as shift
WARNING: shift/reduce conflict for READ in state 300 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 300 resolved as shift
WARNING: shift/reduce conflict for IF in state 300 resolved as shift
WARNING: shift/reduce conflict for FOR in state 300 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 300 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 300 resolved as shift
WARNING: shift/reduce conflict for ID in state 301 resolved as shift
WARNING: shift/reduce conflict for READ in state 301 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 301 resolved as shift
WARNING: shift/reduce conflict for IF in state 301 resolved as shift
WARNING: shift/reduce conflict for FOR in state 301 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 301 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 301 resolved as shift
WARNING: shift/reduce conflict for ID in state 304 resolved as shift
WARNING: shift/reduce conflict for READ in state 304 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 304 resolved as shift
WARNING: shift/reduce conflict for IF in state 304 resolved as shift
WARNING: shift/reduce conflict for FOR in state 304 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 304 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 304 resolved as shift
WARNING: shift/reduce conflict for ID in state 305 resolved as shift
WARNING: shift/reduce conflict for READ in state 305 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 305 resolved as shift
WARNING: shift/reduce conflict for IF in state 305 resolved as shift
WARNING: shift/reduce conflict for FOR in state 305 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 305 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 305 resolved as shift
WARNING: shift/reduce conflict for ID in state 307 resolved as shift
WARNING: shift/reduce conflict for READ in state 307 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 307 resolved as shift
WARNING: shift/reduce conflict for IF in state 307 resolved as shift
WARNING: shift/reduce conflict for FOR in state 307 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 307 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 307 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 48
WARNING: reduce/reduce conflict in state 101 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 101
WARNING: reduce/reduce conflict in state 277 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 277
WARNING: reduce/reduce conflict in state 285 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 285
WARNING: reduce/reduce conflict in state 309 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 309
WARNING: Rule (vars_6 -> empty) is never reduced
