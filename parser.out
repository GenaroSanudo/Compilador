Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3 count_global_vars
Rule 4     modules_point -> empty
Rule 5     count_global_vars -> empty
Rule 6     modules_2 -> vars
Rule 7     modules_2 -> empty
Rule 8     modules_3 -> function
Rule 9     modules_3 -> empty
Rule 10    main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
Rule 11    main_point -> empty
Rule 12    main_final -> empty
Rule 13    body -> body_2 func_agrega_v estatuto body_3
Rule 14    body_2 -> vars
Rule 15    body_2 -> empty
Rule 16    body_3 -> estatuto body_3
Rule 17    body_3 -> empty
Rule 18    tipo_simple -> INT
Rule 19    tipo_simple -> FLOAT
Rule 20    tipo_simple -> CHAR
Rule 21    tipo_comp -> DATAFRAME
Rule 22    vars -> VAR vars_2 SEMICOLON vars_8
Rule 23    vars_2 -> tipo_comp vars_3
Rule 24    vars_2 -> tipo_simple vars_4
Rule 25    vars_3 -> ID vars_5
Rule 26    vars_4 -> vars_3
Rule 27    vars_4 -> ID vars_6
Rule 28    vars_5 -> COMMA vars_3
Rule 29    vars_5 -> empty
Rule 30    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 31    vars_6 -> empty
Rule 32    punto_id_especial -> empty
Rule 33    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 34    vars_7 -> var_array
Rule 35    var_array -> empty
Rule 36    var_mat -> empty
Rule 37    vars_8 -> vars
Rule 38    vars_8 -> empty
Rule 39    param -> tipo_simple ID punto_param param_2
Rule 40    param -> empty
Rule 41    param_2 -> COMMA param
Rule 42    param_2 -> empty
Rule 43    punto_param -> empty
Rule 44    punto_param_2 -> empty
Rule 45    variable -> ID variable_2 variable_point
Rule 46    variable_point -> empty
Rule 47    variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
Rule 48    variable_2 -> empty
Rule 49    variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor
Rule 50    variable_3 -> empty
Rule 51    estatuto -> asigna
Rule 52    estatuto -> llamada
Rule 53    estatuto -> llamada_void
Rule 54    estatuto -> read
Rule 55    estatuto -> write
Rule 56    estatuto -> if_1
Rule 57    estatuto -> for_l
Rule 58    estatuto -> while_l
Rule 59    estatuto -> return
Rule 60    estatuto -> func_extra
Rule 61    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 62    asigna_point -> empty
Rule 63    llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
Rule 64    llamada_2 -> exp verify_parameter
Rule 65    llamada_2 -> empty
Rule 66    llamada_3 -> COMMA exp verify_parameter llamada_3
Rule 67    llamada_3 -> empty
Rule 68    llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
Rule 69    llamada_void_2 -> exp verify_parameter
Rule 70    llamada_void_2 -> empty
Rule 71    llamada_void_3 -> COMMA exp verify_parameter llamada_void_3
Rule 72    llamada_void_3 -> empty
Rule 73    not_void -> empty
Rule 74    verify_func -> empty
Rule 75    verify_parameter -> empty
Rule 76    gosub -> empty
Rule 77    add_temp -> empty
Rule 78    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 79    read_point -> empty
Rule 80    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 81    write_2 -> exp write_point
Rule 82    write_2 -> CTE_S add_constant_s write_point
Rule 83    write_3 -> COMMA write_2 write_3
Rule 84    write_3 -> empty
Rule 85    write_point -> empty
Rule 86    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 87    if_2 -> estatuto if_2
Rule 88    if_2 -> empty
Rule 89    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 90    if_3 -> empty
Rule 91    if_point -> empty
Rule 92    if_point_2 -> empty
Rule 93    if_point_3 -> empty
Rule 94    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 95    for_l_2 -> estatuto for_l_2
Rule 96    for_l_2 -> empty
Rule 97    for_point_1 -> empty
Rule 98    for_point_2 -> empty
Rule 99    for_point_3 -> empty
Rule 100   for_point_4 -> empty
Rule 101   while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 102   while_l_2 -> estatuto while_l_2
Rule 103   while_l_2 -> empty
Rule 104   while_point -> empty
Rule 105   while_point_2 -> empty
Rule 106   while_point_3 -> empty
Rule 107   return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON
Rule 108   check_valid_func -> empty
Rule 109   func_extra -> empty
Rule 110   exp -> t_exp add_operator_4 exp_2
Rule 111   exp_2 -> OR add_operator exp
Rule 112   exp_2 -> empty
Rule 113   t_exp -> g_exp add_operator_4 t_exp_2
Rule 114   t_exp_2 -> AND add_operator t_exp
Rule 115   t_exp_2 -> empty
Rule 116   g_exp -> m_exp g_exp_2 add_operator_3
Rule 117   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 118   g_exp_2 -> LESS add_operator m_exp
Rule 119   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 120   g_exp_2 -> GREATER add_operator m_exp
Rule 121   g_exp_2 -> COMPARE add_operator m_exp
Rule 122   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 123   g_exp_2 -> empty
Rule 124   m_exp -> t add_operator_2 m_exp_2
Rule 125   m_exp_2 -> PLUS add_operator m_exp
Rule 126   m_exp_2 -> MINUS add_operator m_exp
Rule 127   m_exp_2 -> empty
Rule 128   t -> f add_operator_1 t_2
Rule 129   t_2 -> TIMES add_operator t
Rule 130   t_2 -> DIVIDE add_operator t
Rule 131   t_2 -> empty
Rule 132   f -> LPAR add_floor exp RPAR remove_floor
Rule 133   f -> variable
Rule 134   f -> llamada
Rule 135   f -> f_2
Rule 136   f_2 -> CTE_I add_constant_i
Rule 137   f_2 -> CTE_F add_constant_f
Rule 138   add_floor -> empty
Rule 139   remove_floor -> empty
Rule 140   add_operator -> empty
Rule 141   add_operator_1 -> empty
Rule 142   add_operator_2 -> empty
Rule 143   add_operator_3 -> empty
Rule 144   add_operator_4 -> empty
Rule 145   add_constant_i -> empty
Rule 146   add_constant_s -> empty
Rule 147   add_constant_f -> empty
Rule 148   function -> FUNC function_2 SEMICOLON function_4
Rule 149   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 150   function_3 -> tipo_simple
Rule 151   function_3 -> VOID
Rule 152   function_4 -> function
Rule 153   function_4 -> empty
Rule 154   function_punto1 -> empty
Rule 155   func_agrega_v -> empty
Rule 156   final_func_point -> empty
Rule 157   empty -> <empty>

Terminals, with rules where they appear

AND                  : 114
CHAR                 : 20
COLON                : 1
COMMA                : 28 41 66 71 83
COMPARE              : 121
CTE_F                : 137
CTE_I                : 30 33 136
CTE_S                : 82
DATAFRAME            : 21
DIVIDE               : 130
ELSE                 : 89
EQUAL                : 61 94
FLOAT                : 19
FOR                  : 94
FUNC                 : 148
GREATER              : 120
GREATER_EQUAL        : 119
ID                   : 1 25 27 39 45 63 68 94 149
IF                   : 86
INT                  : 18
LESS                 : 118
LESS_EQUAL           : 117
LPAR                 : 10 63 68 78 80 86 94 101 107 132 149
L_C_BRACKET          : 10 86 89 94 101 149
L_S_BRACKET          : 30 33 47 49
MAIN                 : 10
MINUS                : 126
NOT_EQUAL            : 122
OR                   : 111
PLUS                 : 125
PROGRAM              : 1
READ                 : 78
RETURN               : 107
RPAR                 : 10 63 68 78 80 86 94 101 107 132 149
R_C_BRACKET          : 10 86 89 94 101 149
R_S_BRACKET          : 30 33 47 49
SEMICOLON            : 10 22 61 63 68 78 80 86 94 101 107 148
STRING               : 
TIMES                : 129
TO                   : 94
VAR                  : 22
VOID                 : 151
WHILE                : 101
WRITE                : 80
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 137
add_constant_i       : 136
add_constant_s       : 82
add_floor            : 47 49 63 68 132
add_operator         : 61 111 114 117 118 119 120 121 122 125 126 129 130
add_operator_1       : 128
add_operator_2       : 124
add_operator_3       : 116
add_operator_4       : 110 113
add_temp             : 63
asigna               : 51
asigna_point         : 61
body                 : 10 149
body_2               : 13
body_3               : 13 16
check_valid_func     : 107
count_global_vars    : 3
empty                : 2 4 5 7 9 11 12 15 17 29 31 32 35 36 38 40 42 43 44 46 48 50 62 65 67 70 72 73 74 75 76 77 79 84 85 88 90 91 92 93 96 97 98 99 100 103 104 105 106 108 109 112 115 123 127 131 138 139 140 141 142 143 144 145 146 147 153 154 155 156
estatuto             : 13 16 86 87 89 94 95 101 102
exp                  : 47 49 61 64 66 69 71 81 86 94 94 101 107 111 132
exp_2                : 110
f                    : 128
f_2                  : 135
final_func_point     : 149
for_l                : 57
for_l_2              : 94 95
for_point_1          : 94
for_point_2          : 94
for_point_3          : 94
for_point_4          : 94
func_agrega_v        : 13
func_extra           : 60
function             : 8 152
function_2           : 148
function_3           : 149
function_4           : 148
function_punto1      : 149
g_exp                : 113
g_exp_2              : 116
gosub                : 63 68
if_1                 : 56
if_2                 : 86 87 89
if_3                 : 86
if_point             : 86
if_point_2           : 86
if_point_3           : 89
llamada              : 52 134
llamada_2            : 63
llamada_3            : 63 66
llamada_void         : 53
llamada_void_2       : 68
llamada_void_3       : 68 71
m_exp                : 116 117 118 119 120 121 122 125 126
m_exp_2              : 124
main                 : 1
main_final           : 10
main_point           : 10
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
not_void             : 63
param                : 41 149
param_2              : 39
program              : 0
program_point        : 1
punto_id_especial    : 30
punto_param          : 39
punto_param_2        : 149
read                 : 54
read_point           : 78
remove_floor         : 47 49 63 68 132
return               : 59
t                    : 124 129 130
t_2                  : 128
t_exp                : 110 114
t_exp_2              : 113
tipo_comp            : 23
tipo_simple          : 24 39 150
var_array            : 34
var_mat              : 33
variable             : 61 78 133
variable_2           : 45
variable_3           : 47
variable_point       : 45
vars                 : 6 14 37
vars_2               : 22
vars_3               : 23 26 28
vars_4               : 24
vars_5               : 25
vars_6               : 27
vars_7               : 30
vars_8               : 22
verify_func          : 63 68
verify_parameter     : 64 66 69 71
while_l              : 58
while_l_2            : 101 102
while_point          : 101
while_point_2        : 101
while_point_3        : 101
write                : 55
write_2              : 80 83
write_3              : 80 83
write_point          : 81 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3 count_global_vars
    (6) modules_2 -> . vars
    (7) modules_2 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (157) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 157 (empty -> .)
    MAIN            reduce using rule 157 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (10) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3 count_global_vars
    (4) modules_point -> . empty
    (157) empty -> .

    FUNC            reduce using rule 157 (empty -> .)
    MAIN            reduce using rule 157 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (6) modules_2 -> vars .

    FUNC            reduce using rule 6 (modules_2 -> vars .)
    MAIN            reduce using rule 6 (modules_2 -> vars .)


state 10

    (7) modules_2 -> empty .

    FUNC            reduce using rule 7 (modules_2 -> empty .)
    MAIN            reduce using rule 7 (modules_2 -> empty .)


state 11

    (22) vars -> VAR . vars_2 SEMICOLON vars_8
    (23) vars_2 -> . tipo_comp vars_3
    (24) vars_2 -> . tipo_simple vars_4
    (21) tipo_comp -> . DATAFRAME
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (10) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
    (11) main_point -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3 count_global_vars
    (8) modules_3 -> . function
    (9) modules_3 -> . empty
    (148) function -> . FUNC function_2 SEMICOLON function_4
    (157) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 157 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (22) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (23) vars_2 -> tipo_comp . vars_3
    (25) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (24) vars_2 -> tipo_simple . vars_4
    (26) vars_4 -> . vars_3
    (27) vars_4 -> . ID vars_6
    (25) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (21) tipo_comp -> DATAFRAME .

    ID              reduce using rule 21 (tipo_comp -> DATAFRAME .)


state 20

    (18) tipo_simple -> INT .

    ID              reduce using rule 18 (tipo_simple -> INT .)


state 21

    (19) tipo_simple -> FLOAT .

    ID              reduce using rule 19 (tipo_simple -> FLOAT .)


state 22

    (20) tipo_simple -> CHAR .

    ID              reduce using rule 20 (tipo_simple -> CHAR .)


state 23

    (10) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    LPAR            shift and go to state 35


state 24

    (11) main_point -> empty .

    LPAR            reduce using rule 11 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 . count_global_vars
    (5) count_global_vars -> . empty
    (157) empty -> .

    MAIN            reduce using rule 157 (empty -> .)

    count_global_vars              shift and go to state 36
    empty                          shift and go to state 37

state 26

    (8) modules_3 -> function .

    MAIN            reduce using rule 8 (modules_3 -> function .)


state 27

    (9) modules_3 -> empty .

    MAIN            reduce using rule 9 (modules_3 -> empty .)


state 28

    (148) function -> FUNC . function_2 SEMICOLON function_4
    (149) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (150) function_3 -> . tipo_simple
    (151) function_3 -> . VOID
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR

    VOID            shift and go to state 41
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 38
    function_3                     shift and go to state 39
    tipo_simple                    shift and go to state 40

state 29

    (22) vars -> VAR vars_2 SEMICOLON . vars_8
    (37) vars_8 -> . vars
    (38) vars_8 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (157) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 157 (empty -> .)
    MAIN            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    vars_8                         shift and go to state 42
    vars                           shift and go to state 43
    empty                          shift and go to state 44

state 30

    (23) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 23 (vars_2 -> tipo_comp vars_3 .)


state 31

    (25) vars_3 -> ID . vars_5
    (28) vars_5 -> . COMMA vars_3
    (29) vars_5 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 157 (empty -> .)

    vars_5                         shift and go to state 45
    empty                          shift and go to state 47

state 32

    (24) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 24 (vars_2 -> tipo_simple vars_4 .)


state 33

    (26) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 26 (vars_4 -> vars_3 .)


state 34

    (27) vars_4 -> ID . vars_6
    (25) vars_3 -> ID . vars_5
    (30) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (31) vars_6 -> . empty
    (28) vars_5 -> . COMMA vars_3
    (29) vars_5 -> . empty
    (32) punto_id_especial -> . empty
    (157) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 157 (empty -> .)
    L_S_BRACKET     reduce using rule 157 (empty -> .)

    vars_6                         shift and go to state 48
    vars_5                         shift and go to state 45
    punto_id_especial              shift and go to state 49
    empty                          shift and go to state 50

state 35

    (10) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    RPAR            shift and go to state 51


state 36

    (3) modules -> modules_2 modules_point modules_3 count_global_vars .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 count_global_vars .)


state 37

    (5) count_global_vars -> empty .

    MAIN            reduce using rule 5 (count_global_vars -> empty .)


state 38

    (148) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 52


state 39

    (149) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 53


state 40

    (150) function_3 -> tipo_simple .

    ID              reduce using rule 150 (function_3 -> tipo_simple .)


state 41

    (151) function_3 -> VOID .

    ID              reduce using rule 151 (function_3 -> VOID .)


state 42

    (22) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 22 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 43

    (37) vars_8 -> vars .

    FUNC            reduce using rule 37 (vars_8 -> vars .)
    MAIN            reduce using rule 37 (vars_8 -> vars .)
    ID              reduce using rule 37 (vars_8 -> vars .)
    READ            reduce using rule 37 (vars_8 -> vars .)
    WRITE           reduce using rule 37 (vars_8 -> vars .)
    IF              reduce using rule 37 (vars_8 -> vars .)
    FOR             reduce using rule 37 (vars_8 -> vars .)
    WHILE           reduce using rule 37 (vars_8 -> vars .)
    RETURN          reduce using rule 37 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 37 (vars_8 -> vars .)


state 44

    (38) vars_8 -> empty .

    FUNC            reduce using rule 38 (vars_8 -> empty .)
    MAIN            reduce using rule 38 (vars_8 -> empty .)
    ID              reduce using rule 38 (vars_8 -> empty .)
    READ            reduce using rule 38 (vars_8 -> empty .)
    WRITE           reduce using rule 38 (vars_8 -> empty .)
    IF              reduce using rule 38 (vars_8 -> empty .)
    FOR             reduce using rule 38 (vars_8 -> empty .)
    WHILE           reduce using rule 38 (vars_8 -> empty .)
    RETURN          reduce using rule 38 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 38 (vars_8 -> empty .)


state 45

    (25) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 25 (vars_3 -> ID vars_5 .)


state 46

    (28) vars_5 -> COMMA . vars_3
    (25) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 54

state 47

    (29) vars_5 -> empty .

    SEMICOLON       reduce using rule 29 (vars_5 -> empty .)


state 48

    (27) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 27 (vars_4 -> ID vars_6 .)


state 49

    (30) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 55


state 50

    (31) vars_6 -> empty .
    (29) vars_5 -> empty .
    (32) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 29 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 32 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 31 (vars_6 -> empty .) ]


state 51

    (10) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    L_C_BRACKET     shift and go to state 56


state 52

    (148) function -> FUNC function_2 SEMICOLON . function_4
    (152) function_4 -> . function
    (153) function_4 -> . empty
    (148) function -> . FUNC function_2 SEMICOLON function_4
    (157) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 157 (empty -> .)

    function_4                     shift and go to state 57
    function                       shift and go to state 58
    empty                          shift and go to state 59

state 53

    (149) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (154) function_punto1 -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)

    function_punto1                shift and go to state 60
    empty                          shift and go to state 61

state 54

    (28) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 28 (vars_5 -> COMMA vars_3 .)


state 55

    (30) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 62


state 56

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON main_final
    (13) body -> . body_2 func_agrega_v estatuto body_3
    (14) body_2 -> . vars
    (15) body_2 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (157) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    body                           shift and go to state 63
    body_2                         shift and go to state 64
    vars                           shift and go to state 65
    empty                          shift and go to state 66

state 57

    (148) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 148 (function -> FUNC function_2 SEMICOLON function_4 .)


state 58

    (152) function_4 -> function .

    MAIN            reduce using rule 152 (function_4 -> function .)


state 59

    (153) function_4 -> empty .

    MAIN            reduce using rule 153 (function_4 -> empty .)


state 60

    (149) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 67


state 61

    (154) function_punto1 -> empty .

    LPAR            reduce using rule 154 (function_punto1 -> empty .)


state 62

    (30) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 68


state 63

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON main_final

    R_C_BRACKET     shift and go to state 69


state 64

    (13) body -> body_2 . func_agrega_v estatuto body_3
    (155) func_agrega_v -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    func_agrega_v                  shift and go to state 70
    empty                          shift and go to state 71

state 65

    (14) body_2 -> vars .

    ID              reduce using rule 14 (body_2 -> vars .)
    READ            reduce using rule 14 (body_2 -> vars .)
    WRITE           reduce using rule 14 (body_2 -> vars .)
    IF              reduce using rule 14 (body_2 -> vars .)
    FOR             reduce using rule 14 (body_2 -> vars .)
    WHILE           reduce using rule 14 (body_2 -> vars .)
    RETURN          reduce using rule 14 (body_2 -> vars .)
    R_C_BRACKET     reduce using rule 14 (body_2 -> vars .)


state 66

    (15) body_2 -> empty .

    ID              reduce using rule 15 (body_2 -> empty .)
    READ            reduce using rule 15 (body_2 -> empty .)
    WRITE           reduce using rule 15 (body_2 -> empty .)
    IF              reduce using rule 15 (body_2 -> empty .)
    FOR             reduce using rule 15 (body_2 -> empty .)
    WHILE           reduce using rule 15 (body_2 -> empty .)
    RETURN          reduce using rule 15 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 15 (body_2 -> empty .)


state 67

    (149) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (39) param -> . tipo_simple ID punto_param param_2
    (40) param -> . empty
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR
    (157) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 157 (empty -> .)

    param                          shift and go to state 72
    tipo_simple                    shift and go to state 73
    empty                          shift and go to state 74

state 68

    (30) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (33) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (34) vars_7 -> . var_array
    (35) var_array -> . empty
    (157) empty -> .

    L_S_BRACKET     shift and go to state 75
    SEMICOLON       reduce using rule 157 (empty -> .)

    vars_7                         shift and go to state 76
    var_array                      shift and go to state 77
    empty                          shift and go to state 78

state 69

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON main_final

    SEMICOLON       shift and go to state 79


state 70

    (13) body -> body_2 func_agrega_v . estatuto body_3
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98
    R_C_BRACKET     reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 80
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91
    empty                          shift and go to state 99

state 71

    (155) func_agrega_v -> empty .

    ID              reduce using rule 155 (func_agrega_v -> empty .)
    READ            reduce using rule 155 (func_agrega_v -> empty .)
    WRITE           reduce using rule 155 (func_agrega_v -> empty .)
    IF              reduce using rule 155 (func_agrega_v -> empty .)
    FOR             reduce using rule 155 (func_agrega_v -> empty .)
    WHILE           reduce using rule 155 (func_agrega_v -> empty .)
    RETURN          reduce using rule 155 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 155 (func_agrega_v -> empty .)


state 72

    (149) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (44) punto_param_2 -> . empty
    (157) empty -> .

    RPAR            reduce using rule 157 (empty -> .)

    punto_param_2                  shift and go to state 100
    empty                          shift and go to state 101

state 73

    (39) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 102


state 74

    (40) param -> empty .

    RPAR            reduce using rule 40 (param -> empty .)


state 75

    (33) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 103


state 76

    (30) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 30 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 77

    (34) vars_7 -> var_array .

    SEMICOLON       reduce using rule 34 (vars_7 -> var_array .)


state 78

    (35) var_array -> empty .

    SEMICOLON       reduce using rule 35 (var_array -> empty .)


state 79

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON . main_final
    (12) main_final -> . empty
    (157) empty -> .

    $end            reduce using rule 157 (empty -> .)

    main_final                     shift and go to state 104
    empty                          shift and go to state 105

state 80

    (13) body -> body_2 func_agrega_v estatuto . body_3
    (16) body_3 -> . estatuto body_3
    (17) body_3 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 106
    body_3                         shift and go to state 107
    empty                          shift and go to state 108
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 81

    (51) estatuto -> asigna .

    ID              reduce using rule 51 (estatuto -> asigna .)
    READ            reduce using rule 51 (estatuto -> asigna .)
    WRITE           reduce using rule 51 (estatuto -> asigna .)
    IF              reduce using rule 51 (estatuto -> asigna .)
    FOR             reduce using rule 51 (estatuto -> asigna .)
    WHILE           reduce using rule 51 (estatuto -> asigna .)
    RETURN          reduce using rule 51 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> asigna .)


state 82

    (52) estatuto -> llamada .

    ID              reduce using rule 52 (estatuto -> llamada .)
    READ            reduce using rule 52 (estatuto -> llamada .)
    WRITE           reduce using rule 52 (estatuto -> llamada .)
    IF              reduce using rule 52 (estatuto -> llamada .)
    FOR             reduce using rule 52 (estatuto -> llamada .)
    WHILE           reduce using rule 52 (estatuto -> llamada .)
    RETURN          reduce using rule 52 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> llamada .)


state 83

    (53) estatuto -> llamada_void .

    ID              reduce using rule 53 (estatuto -> llamada_void .)
    READ            reduce using rule 53 (estatuto -> llamada_void .)
    WRITE           reduce using rule 53 (estatuto -> llamada_void .)
    IF              reduce using rule 53 (estatuto -> llamada_void .)
    FOR             reduce using rule 53 (estatuto -> llamada_void .)
    WHILE           reduce using rule 53 (estatuto -> llamada_void .)
    RETURN          reduce using rule 53 (estatuto -> llamada_void .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> llamada_void .)


state 84

    (54) estatuto -> read .

    ID              reduce using rule 54 (estatuto -> read .)
    READ            reduce using rule 54 (estatuto -> read .)
    WRITE           reduce using rule 54 (estatuto -> read .)
    IF              reduce using rule 54 (estatuto -> read .)
    FOR             reduce using rule 54 (estatuto -> read .)
    WHILE           reduce using rule 54 (estatuto -> read .)
    RETURN          reduce using rule 54 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> read .)


state 85

    (55) estatuto -> write .

    ID              reduce using rule 55 (estatuto -> write .)
    READ            reduce using rule 55 (estatuto -> write .)
    WRITE           reduce using rule 55 (estatuto -> write .)
    IF              reduce using rule 55 (estatuto -> write .)
    FOR             reduce using rule 55 (estatuto -> write .)
    WHILE           reduce using rule 55 (estatuto -> write .)
    RETURN          reduce using rule 55 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> write .)


state 86

    (56) estatuto -> if_1 .

    ID              reduce using rule 56 (estatuto -> if_1 .)
    READ            reduce using rule 56 (estatuto -> if_1 .)
    WRITE           reduce using rule 56 (estatuto -> if_1 .)
    IF              reduce using rule 56 (estatuto -> if_1 .)
    FOR             reduce using rule 56 (estatuto -> if_1 .)
    WHILE           reduce using rule 56 (estatuto -> if_1 .)
    RETURN          reduce using rule 56 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 56 (estatuto -> if_1 .)


state 87

    (57) estatuto -> for_l .

    ID              reduce using rule 57 (estatuto -> for_l .)
    READ            reduce using rule 57 (estatuto -> for_l .)
    WRITE           reduce using rule 57 (estatuto -> for_l .)
    IF              reduce using rule 57 (estatuto -> for_l .)
    FOR             reduce using rule 57 (estatuto -> for_l .)
    WHILE           reduce using rule 57 (estatuto -> for_l .)
    RETURN          reduce using rule 57 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 57 (estatuto -> for_l .)


state 88

    (58) estatuto -> while_l .

    ID              reduce using rule 58 (estatuto -> while_l .)
    READ            reduce using rule 58 (estatuto -> while_l .)
    WRITE           reduce using rule 58 (estatuto -> while_l .)
    IF              reduce using rule 58 (estatuto -> while_l .)
    FOR             reduce using rule 58 (estatuto -> while_l .)
    WHILE           reduce using rule 58 (estatuto -> while_l .)
    RETURN          reduce using rule 58 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 58 (estatuto -> while_l .)


state 89

    (59) estatuto -> return .

    ID              reduce using rule 59 (estatuto -> return .)
    READ            reduce using rule 59 (estatuto -> return .)
    WRITE           reduce using rule 59 (estatuto -> return .)
    IF              reduce using rule 59 (estatuto -> return .)
    FOR             reduce using rule 59 (estatuto -> return .)
    WHILE           reduce using rule 59 (estatuto -> return .)
    RETURN          reduce using rule 59 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 59 (estatuto -> return .)


state 90

    (60) estatuto -> func_extra .

    ID              reduce using rule 60 (estatuto -> func_extra .)
    READ            reduce using rule 60 (estatuto -> func_extra .)
    WRITE           reduce using rule 60 (estatuto -> func_extra .)
    IF              reduce using rule 60 (estatuto -> func_extra .)
    FOR             reduce using rule 60 (estatuto -> func_extra .)
    WHILE           reduce using rule 60 (estatuto -> func_extra .)
    RETURN          reduce using rule 60 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 60 (estatuto -> func_extra .)


state 91

    (61) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 109


state 92

    (63) llamada -> ID . verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> ID . verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (45) variable -> ID . variable_2 variable_point
    (74) verify_func -> . empty
    (47) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (48) variable_2 -> . empty
    (157) empty -> .

    L_S_BRACKET     shift and go to state 113
    LPAR            reduce using rule 157 (empty -> .)
    EQUAL           reduce using rule 157 (empty -> .)

    verify_func                    shift and go to state 110
    variable_2                     shift and go to state 111
    empty                          shift and go to state 112

state 93

    (78) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 114


state 94

    (80) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 115


state 95

    (86) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 116


state 96

    (94) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 117


state 97

    (101) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (104) while_point -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)

    while_point                    shift and go to state 118
    empty                          shift and go to state 119

state 98

    (107) return -> RETURN . LPAR exp check_valid_func RPAR SEMICOLON

    LPAR            shift and go to state 120


state 99

    (109) func_extra -> empty .

    ID              reduce using rule 109 (func_extra -> empty .)
    READ            reduce using rule 109 (func_extra -> empty .)
    WRITE           reduce using rule 109 (func_extra -> empty .)
    IF              reduce using rule 109 (func_extra -> empty .)
    FOR             reduce using rule 109 (func_extra -> empty .)
    WHILE           reduce using rule 109 (func_extra -> empty .)
    RETURN          reduce using rule 109 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 109 (func_extra -> empty .)


state 100

    (149) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 121


state 101

    (44) punto_param_2 -> empty .

    RPAR            reduce using rule 44 (punto_param_2 -> empty .)


state 102

    (39) param -> tipo_simple ID . punto_param param_2
    (43) punto_param -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    punto_param                    shift and go to state 122
    empty                          shift and go to state 123

state 103

    (33) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 124


state 104

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .

    $end            reduce using rule 10 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .)


state 105

    (12) main_final -> empty .

    $end            reduce using rule 12 (main_final -> empty .)


state 106

    (16) body_3 -> estatuto . body_3
    (16) body_3 -> . estatuto body_3
    (17) body_3 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 106
    body_3                         shift and go to state 125
    empty                          shift and go to state 108
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 107

    (13) body -> body_2 func_agrega_v estatuto body_3 .

    R_C_BRACKET     reduce using rule 13 (body -> body_2 func_agrega_v estatuto body_3 .)


state 108

    (17) body_3 -> empty .
    (109) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 17 (body_3 -> empty .)
    R_C_BRACKET     reduce using rule 17 (body_3 -> empty .)
    ID              reduce using rule 109 (func_extra -> empty .)
    READ            reduce using rule 109 (func_extra -> empty .)
    WRITE           reduce using rule 109 (func_extra -> empty .)
    IF              reduce using rule 109 (func_extra -> empty .)
    FOR             reduce using rule 109 (func_extra -> empty .)
    WHILE           reduce using rule 109 (func_extra -> empty .)
    RETURN          reduce using rule 109 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 109 (func_extra -> empty .) ]


state 109

    (61) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 126
    empty                          shift and go to state 127

state 110

    (63) llamada -> ID verify_func . not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> ID verify_func . LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (73) not_void -> . empty
    (157) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    LPAR            shift and go to state 129

  ! LPAR            [ reduce using rule 157 (empty -> .) ]

    not_void                       shift and go to state 128
    empty                          shift and go to state 130

state 111

    (45) variable -> ID variable_2 . variable_point
    (46) variable_point -> . empty
    (157) empty -> .

    EQUAL           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    variable_point                 shift and go to state 131
    empty                          shift and go to state 132

state 112

    (74) verify_func -> empty .
    (48) variable_2 -> empty .

    LPAR            reduce using rule 74 (verify_func -> empty .)
    EQUAL           reduce using rule 48 (variable_2 -> empty .)


state 113

    (47) variable_2 -> L_S_BRACKET . add_floor exp R_S_BRACKET remove_floor variable_3
    (138) add_floor -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_floor                      shift and go to state 133
    empty                          shift and go to state 134

state 114

    (78) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (45) variable -> . ID variable_2 variable_point

    ID              shift and go to state 136

    variable                       shift and go to state 135

state 115

    (80) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (81) write_2 -> . exp write_point
    (82) write_2 -> . CTE_S add_constant_s write_point
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 140
    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    write_2                        shift and go to state 138
    exp                            shift and go to state 139
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 116

    (86) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 152
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 117

    (94) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 153


state 118

    (101) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 154


state 119

    (104) while_point -> empty .

    LPAR            reduce using rule 104 (while_point -> empty .)


state 120

    (107) return -> RETURN LPAR . exp check_valid_func RPAR SEMICOLON
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 155
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 121

    (149) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 156


state 122

    (39) param -> tipo_simple ID punto_param . param_2
    (41) param_2 -> . COMMA param
    (42) param_2 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 158
    RPAR            reduce using rule 157 (empty -> .)

    param_2                        shift and go to state 157
    empty                          shift and go to state 159

state 123

    (43) punto_param -> empty .

    COMMA           reduce using rule 43 (punto_param -> empty .)
    RPAR            reduce using rule 43 (punto_param -> empty .)


state 124

    (33) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (36) var_mat -> . empty
    (157) empty -> .

    SEMICOLON       reduce using rule 157 (empty -> .)

    var_mat                        shift and go to state 160
    empty                          shift and go to state 161

state 125

    (16) body_3 -> estatuto body_3 .

    R_C_BRACKET     reduce using rule 16 (body_3 -> estatuto body_3 .)


state 126

    (61) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    variable                       shift and go to state 146
    exp                            shift and go to state 162
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 127

    (140) add_operator -> empty .

    LPAR            reduce using rule 140 (add_operator -> empty .)
    ID              reduce using rule 140 (add_operator -> empty .)
    CTE_I           reduce using rule 140 (add_operator -> empty .)
    CTE_F           reduce using rule 140 (add_operator -> empty .)


state 128

    (63) llamada -> ID verify_func not_void . LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp

    LPAR            shift and go to state 163


state 129

    (68) llamada_void -> ID verify_func LPAR . add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (138) add_floor -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    add_floor                      shift and go to state 164
    empty                          shift and go to state 134

state 130

    (73) not_void -> empty .

    LPAR            reduce using rule 73 (not_void -> empty .)


state 131

    (45) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 45 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 45 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 45 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 45 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 45 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 45 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 45 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 45 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 45 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 45 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 45 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 45 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 45 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 45 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 45 (variable -> ID variable_2 variable_point .)


state 132

    (46) variable_point -> empty .

    EQUAL           reduce using rule 46 (variable_point -> empty .)
    RPAR            reduce using rule 46 (variable_point -> empty .)
    TIMES           reduce using rule 46 (variable_point -> empty .)
    DIVIDE          reduce using rule 46 (variable_point -> empty .)
    PLUS            reduce using rule 46 (variable_point -> empty .)
    MINUS           reduce using rule 46 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 46 (variable_point -> empty .)
    LESS            reduce using rule 46 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 46 (variable_point -> empty .)
    GREATER         reduce using rule 46 (variable_point -> empty .)
    COMPARE         reduce using rule 46 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 46 (variable_point -> empty .)
    AND             reduce using rule 46 (variable_point -> empty .)
    OR              reduce using rule 46 (variable_point -> empty .)
    COMMA           reduce using rule 46 (variable_point -> empty .)
    SEMICOLON       reduce using rule 46 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 46 (variable_point -> empty .)
    TO              reduce using rule 46 (variable_point -> empty .)


state 133

    (47) variable_2 -> L_S_BRACKET add_floor . exp R_S_BRACKET remove_floor variable_3
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 165
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 134

    (138) add_floor -> empty .

    LPAR            reduce using rule 138 (add_floor -> empty .)
    ID              reduce using rule 138 (add_floor -> empty .)
    CTE_I           reduce using rule 138 (add_floor -> empty .)
    CTE_F           reduce using rule 138 (add_floor -> empty .)
    COMMA           reduce using rule 138 (add_floor -> empty .)
    RPAR            reduce using rule 138 (add_floor -> empty .)


state 135

    (78) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (79) read_point -> . empty
    (157) empty -> .

    RPAR            reduce using rule 157 (empty -> .)

    read_point                     shift and go to state 166
    empty                          shift and go to state 167

state 136

    (45) variable -> ID . variable_2 variable_point
    (47) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (48) variable_2 -> . empty
    (157) empty -> .

    L_S_BRACKET     shift and go to state 113
    RPAR            reduce using rule 157 (empty -> .)

    variable_2                     shift and go to state 111
    empty                          shift and go to state 168

state 137

    (132) f -> LPAR . add_floor exp RPAR remove_floor
    (138) add_floor -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_floor                      shift and go to state 169
    empty                          shift and go to state 134

state 138

    (80) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (83) write_3 -> . COMMA write_2 write_3
    (84) write_3 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 171
    RPAR            reduce using rule 157 (empty -> .)

    write_3                        shift and go to state 170
    empty                          shift and go to state 172

state 139

    (81) write_2 -> exp . write_point
    (85) write_point -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    write_point                    shift and go to state 173
    empty                          shift and go to state 174

state 140

    (82) write_2 -> CTE_S . add_constant_s write_point
    (146) add_constant_s -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    add_constant_s                 shift and go to state 175
    empty                          shift and go to state 176

state 141

    (110) exp -> t_exp . add_operator_4 exp_2
    (144) add_operator_4 -> . empty
    (157) empty -> .

    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_operator_4                 shift and go to state 177
    empty                          shift and go to state 178

state 142

    (113) t_exp -> g_exp . add_operator_4 t_exp_2
    (144) add_operator_4 -> . empty
    (157) empty -> .

    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_operator_4                 shift and go to state 179
    empty                          shift and go to state 178

state 143

    (116) g_exp -> m_exp . g_exp_2 add_operator_3
    (117) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (118) g_exp_2 -> . LESS add_operator m_exp
    (119) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (120) g_exp_2 -> . GREATER add_operator m_exp
    (121) g_exp_2 -> . COMPARE add_operator m_exp
    (122) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (123) g_exp_2 -> . empty
    (157) empty -> .

    LESS_EQUAL      shift and go to state 181
    LESS            shift and go to state 182
    GREATER_EQUAL   shift and go to state 183
    GREATER         shift and go to state 184
    COMPARE         shift and go to state 185
    NOT_EQUAL       shift and go to state 186
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    g_exp_2                        shift and go to state 180
    empty                          shift and go to state 187

state 144

    (124) m_exp -> t . add_operator_2 m_exp_2
    (142) add_operator_2 -> . empty
    (157) empty -> .

    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_operator_2                 shift and go to state 188
    empty                          shift and go to state 189

state 145

    (128) t -> f . add_operator_1 t_2
    (141) add_operator_1 -> . empty
    (157) empty -> .

    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_operator_1                 shift and go to state 190
    empty                          shift and go to state 191

state 146

    (133) f -> variable .

    TIMES           reduce using rule 133 (f -> variable .)
    DIVIDE          reduce using rule 133 (f -> variable .)
    PLUS            reduce using rule 133 (f -> variable .)
    MINUS           reduce using rule 133 (f -> variable .)
    LESS_EQUAL      reduce using rule 133 (f -> variable .)
    LESS            reduce using rule 133 (f -> variable .)
    GREATER_EQUAL   reduce using rule 133 (f -> variable .)
    GREATER         reduce using rule 133 (f -> variable .)
    COMPARE         reduce using rule 133 (f -> variable .)
    NOT_EQUAL       reduce using rule 133 (f -> variable .)
    AND             reduce using rule 133 (f -> variable .)
    OR              reduce using rule 133 (f -> variable .)
    COMMA           reduce using rule 133 (f -> variable .)
    RPAR            reduce using rule 133 (f -> variable .)
    SEMICOLON       reduce using rule 133 (f -> variable .)
    R_S_BRACKET     reduce using rule 133 (f -> variable .)
    TO              reduce using rule 133 (f -> variable .)


state 147

    (134) f -> llamada .

    TIMES           reduce using rule 134 (f -> llamada .)
    DIVIDE          reduce using rule 134 (f -> llamada .)
    PLUS            reduce using rule 134 (f -> llamada .)
    MINUS           reduce using rule 134 (f -> llamada .)
    LESS_EQUAL      reduce using rule 134 (f -> llamada .)
    LESS            reduce using rule 134 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 134 (f -> llamada .)
    GREATER         reduce using rule 134 (f -> llamada .)
    COMPARE         reduce using rule 134 (f -> llamada .)
    NOT_EQUAL       reduce using rule 134 (f -> llamada .)
    AND             reduce using rule 134 (f -> llamada .)
    OR              reduce using rule 134 (f -> llamada .)
    COMMA           reduce using rule 134 (f -> llamada .)
    RPAR            reduce using rule 134 (f -> llamada .)
    SEMICOLON       reduce using rule 134 (f -> llamada .)
    R_S_BRACKET     reduce using rule 134 (f -> llamada .)
    TO              reduce using rule 134 (f -> llamada .)


state 148

    (135) f -> f_2 .

    TIMES           reduce using rule 135 (f -> f_2 .)
    DIVIDE          reduce using rule 135 (f -> f_2 .)
    PLUS            reduce using rule 135 (f -> f_2 .)
    MINUS           reduce using rule 135 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 135 (f -> f_2 .)
    LESS            reduce using rule 135 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 135 (f -> f_2 .)
    GREATER         reduce using rule 135 (f -> f_2 .)
    COMPARE         reduce using rule 135 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 135 (f -> f_2 .)
    AND             reduce using rule 135 (f -> f_2 .)
    OR              reduce using rule 135 (f -> f_2 .)
    COMMA           reduce using rule 135 (f -> f_2 .)
    RPAR            reduce using rule 135 (f -> f_2 .)
    SEMICOLON       reduce using rule 135 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 135 (f -> f_2 .)
    TO              reduce using rule 135 (f -> f_2 .)


state 149

    (45) variable -> ID . variable_2 variable_point
    (63) llamada -> ID . verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (47) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (48) variable_2 -> . empty
    (74) verify_func -> . empty
    (157) empty -> .

    L_S_BRACKET     shift and go to state 113
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)
    LPAR            reduce using rule 157 (empty -> .)

    variable_2                     shift and go to state 111
    verify_func                    shift and go to state 192
    empty                          shift and go to state 193

state 150

    (136) f_2 -> CTE_I . add_constant_i
    (145) add_constant_i -> . empty
    (157) empty -> .

    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_constant_i                 shift and go to state 194
    empty                          shift and go to state 195

state 151

    (137) f_2 -> CTE_F . add_constant_f
    (147) add_constant_f -> . empty
    (157) empty -> .

    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_constant_f                 shift and go to state 196
    empty                          shift and go to state 197

state 152

    (86) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (91) if_point -> . empty
    (157) empty -> .

    RPAR            reduce using rule 157 (empty -> .)

    if_point                       shift and go to state 198
    empty                          shift and go to state 199

state 153

    (94) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (97) for_point_1 -> . empty
    (157) empty -> .

    EQUAL           reduce using rule 157 (empty -> .)

    for_point_1                    shift and go to state 200
    empty                          shift and go to state 201

state 154

    (101) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 202
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 155

    (107) return -> RETURN LPAR exp . check_valid_func RPAR SEMICOLON
    (108) check_valid_func -> . empty
    (157) empty -> .

    RPAR            reduce using rule 157 (empty -> .)

    check_valid_func               shift and go to state 203
    empty                          shift and go to state 204

state 156

    (149) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (13) body -> . body_2 func_agrega_v estatuto body_3
    (14) body_2 -> . vars
    (15) body_2 -> . empty
    (22) vars -> . VAR vars_2 SEMICOLON vars_8
    (157) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    body                           shift and go to state 205
    body_2                         shift and go to state 64
    vars                           shift and go to state 65
    empty                          shift and go to state 66

state 157

    (39) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 39 (param -> tipo_simple ID punto_param param_2 .)


state 158

    (41) param_2 -> COMMA . param
    (39) param -> . tipo_simple ID punto_param param_2
    (40) param -> . empty
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (20) tipo_simple -> . CHAR
    (157) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 157 (empty -> .)

    param                          shift and go to state 206
    tipo_simple                    shift and go to state 73
    empty                          shift and go to state 74

state 159

    (42) param_2 -> empty .

    RPAR            reduce using rule 42 (param_2 -> empty .)


state 160

    (33) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 33 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 161

    (36) var_mat -> empty .

    SEMICOLON       reduce using rule 36 (var_mat -> empty .)


state 162

    (61) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (62) asigna_point -> . empty
    (157) empty -> .

    SEMICOLON       reduce using rule 157 (empty -> .)

    asigna_point                   shift and go to state 207
    empty                          shift and go to state 208

state 163

    (63) llamada -> ID verify_func not_void LPAR . add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (138) add_floor -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    add_floor                      shift and go to state 209
    empty                          shift and go to state 134

state 164

    (68) llamada_void -> ID verify_func LPAR add_floor . llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (69) llamada_void_2 -> . exp verify_parameter
    (70) llamada_void_2 -> . empty
    (110) exp -> . t_exp add_operator_4 exp_2
    (157) empty -> .
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    llamada_void_2                 shift and go to state 210
    exp                            shift and go to state 211
    empty                          shift and go to state 212
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 165

    (47) variable_2 -> L_S_BRACKET add_floor exp . R_S_BRACKET remove_floor variable_3

    R_S_BRACKET     shift and go to state 213


state 166

    (78) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 214


state 167

    (79) read_point -> empty .

    RPAR            reduce using rule 79 (read_point -> empty .)


state 168

    (48) variable_2 -> empty .

    RPAR            reduce using rule 48 (variable_2 -> empty .)


state 169

    (132) f -> LPAR add_floor . exp RPAR remove_floor
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 215
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 170

    (80) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 216


state 171

    (83) write_3 -> COMMA . write_2 write_3
    (81) write_2 -> . exp write_point
    (82) write_2 -> . CTE_S add_constant_s write_point
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 140
    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    write_2                        shift and go to state 217
    exp                            shift and go to state 139
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 172

    (84) write_3 -> empty .

    RPAR            reduce using rule 84 (write_3 -> empty .)


state 173

    (81) write_2 -> exp write_point .

    COMMA           reduce using rule 81 (write_2 -> exp write_point .)
    RPAR            reduce using rule 81 (write_2 -> exp write_point .)


state 174

    (85) write_point -> empty .

    COMMA           reduce using rule 85 (write_point -> empty .)
    RPAR            reduce using rule 85 (write_point -> empty .)


state 175

    (82) write_2 -> CTE_S add_constant_s . write_point
    (85) write_point -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    write_point                    shift and go to state 218
    empty                          shift and go to state 174

state 176

    (146) add_constant_s -> empty .

    COMMA           reduce using rule 146 (add_constant_s -> empty .)
    RPAR            reduce using rule 146 (add_constant_s -> empty .)


state 177

    (110) exp -> t_exp add_operator_4 . exp_2
    (111) exp_2 -> . OR add_operator exp
    (112) exp_2 -> . empty
    (157) empty -> .

    OR              shift and go to state 220
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    exp_2                          shift and go to state 219
    empty                          shift and go to state 221

state 178

    (144) add_operator_4 -> empty .

    OR              reduce using rule 144 (add_operator_4 -> empty .)
    COMMA           reduce using rule 144 (add_operator_4 -> empty .)
    RPAR            reduce using rule 144 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 144 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 144 (add_operator_4 -> empty .)
    TO              reduce using rule 144 (add_operator_4 -> empty .)
    AND             reduce using rule 144 (add_operator_4 -> empty .)


state 179

    (113) t_exp -> g_exp add_operator_4 . t_exp_2
    (114) t_exp_2 -> . AND add_operator t_exp
    (115) t_exp_2 -> . empty
    (157) empty -> .

    AND             shift and go to state 223
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    t_exp_2                        shift and go to state 222
    empty                          shift and go to state 224

state 180

    (116) g_exp -> m_exp g_exp_2 . add_operator_3
    (143) add_operator_3 -> . empty
    (157) empty -> .

    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_operator_3                 shift and go to state 225
    empty                          shift and go to state 226

state 181

    (117) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 227
    empty                          shift and go to state 127

state 182

    (118) g_exp_2 -> LESS . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 228
    empty                          shift and go to state 127

state 183

    (119) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 229
    empty                          shift and go to state 127

state 184

    (120) g_exp_2 -> GREATER . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 230
    empty                          shift and go to state 127

state 185

    (121) g_exp_2 -> COMPARE . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 231
    empty                          shift and go to state 127

state 186

    (122) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 232
    empty                          shift and go to state 127

state 187

    (123) g_exp_2 -> empty .

    AND             reduce using rule 123 (g_exp_2 -> empty .)
    OR              reduce using rule 123 (g_exp_2 -> empty .)
    COMMA           reduce using rule 123 (g_exp_2 -> empty .)
    RPAR            reduce using rule 123 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 123 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 123 (g_exp_2 -> empty .)
    TO              reduce using rule 123 (g_exp_2 -> empty .)


state 188

    (124) m_exp -> t add_operator_2 . m_exp_2
    (125) m_exp_2 -> . PLUS add_operator m_exp
    (126) m_exp_2 -> . MINUS add_operator m_exp
    (127) m_exp_2 -> . empty
    (157) empty -> .

    PLUS            shift and go to state 234
    MINUS           shift and go to state 235
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    m_exp_2                        shift and go to state 233
    empty                          shift and go to state 236

state 189

    (142) add_operator_2 -> empty .

    PLUS            reduce using rule 142 (add_operator_2 -> empty .)
    MINUS           reduce using rule 142 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 142 (add_operator_2 -> empty .)
    LESS            reduce using rule 142 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 142 (add_operator_2 -> empty .)
    GREATER         reduce using rule 142 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 142 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 142 (add_operator_2 -> empty .)
    AND             reduce using rule 142 (add_operator_2 -> empty .)
    OR              reduce using rule 142 (add_operator_2 -> empty .)
    COMMA           reduce using rule 142 (add_operator_2 -> empty .)
    RPAR            reduce using rule 142 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 142 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 142 (add_operator_2 -> empty .)
    TO              reduce using rule 142 (add_operator_2 -> empty .)


state 190

    (128) t -> f add_operator_1 . t_2
    (129) t_2 -> . TIMES add_operator t
    (130) t_2 -> . DIVIDE add_operator t
    (131) t_2 -> . empty
    (157) empty -> .

    TIMES           shift and go to state 238
    DIVIDE          shift and go to state 239
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    t_2                            shift and go to state 237
    empty                          shift and go to state 240

state 191

    (141) add_operator_1 -> empty .

    TIMES           reduce using rule 141 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 141 (add_operator_1 -> empty .)
    PLUS            reduce using rule 141 (add_operator_1 -> empty .)
    MINUS           reduce using rule 141 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 141 (add_operator_1 -> empty .)
    LESS            reduce using rule 141 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 141 (add_operator_1 -> empty .)
    GREATER         reduce using rule 141 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 141 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 141 (add_operator_1 -> empty .)
    AND             reduce using rule 141 (add_operator_1 -> empty .)
    OR              reduce using rule 141 (add_operator_1 -> empty .)
    COMMA           reduce using rule 141 (add_operator_1 -> empty .)
    RPAR            reduce using rule 141 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 141 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 141 (add_operator_1 -> empty .)
    TO              reduce using rule 141 (add_operator_1 -> empty .)


state 192

    (63) llamada -> ID verify_func . not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (73) not_void -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)

    not_void                       shift and go to state 128
    empty                          shift and go to state 130

state 193

    (48) variable_2 -> empty .
    (74) verify_func -> empty .

    TIMES           reduce using rule 48 (variable_2 -> empty .)
    DIVIDE          reduce using rule 48 (variable_2 -> empty .)
    PLUS            reduce using rule 48 (variable_2 -> empty .)
    MINUS           reduce using rule 48 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 48 (variable_2 -> empty .)
    LESS            reduce using rule 48 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 48 (variable_2 -> empty .)
    GREATER         reduce using rule 48 (variable_2 -> empty .)
    COMPARE         reduce using rule 48 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 48 (variable_2 -> empty .)
    AND             reduce using rule 48 (variable_2 -> empty .)
    OR              reduce using rule 48 (variable_2 -> empty .)
    COMMA           reduce using rule 48 (variable_2 -> empty .)
    RPAR            reduce using rule 48 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 48 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 48 (variable_2 -> empty .)
    TO              reduce using rule 48 (variable_2 -> empty .)
    LPAR            reduce using rule 74 (verify_func -> empty .)


state 194

    (136) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 136 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 136 (f_2 -> CTE_I add_constant_i .)


state 195

    (145) add_constant_i -> empty .

    TIMES           reduce using rule 145 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 145 (add_constant_i -> empty .)
    PLUS            reduce using rule 145 (add_constant_i -> empty .)
    MINUS           reduce using rule 145 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 145 (add_constant_i -> empty .)
    LESS            reduce using rule 145 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 145 (add_constant_i -> empty .)
    GREATER         reduce using rule 145 (add_constant_i -> empty .)
    COMPARE         reduce using rule 145 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 145 (add_constant_i -> empty .)
    AND             reduce using rule 145 (add_constant_i -> empty .)
    OR              reduce using rule 145 (add_constant_i -> empty .)
    COMMA           reduce using rule 145 (add_constant_i -> empty .)
    RPAR            reduce using rule 145 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 145 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 145 (add_constant_i -> empty .)
    TO              reduce using rule 145 (add_constant_i -> empty .)


state 196

    (137) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 137 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 137 (f_2 -> CTE_F add_constant_f .)


state 197

    (147) add_constant_f -> empty .

    TIMES           reduce using rule 147 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 147 (add_constant_f -> empty .)
    PLUS            reduce using rule 147 (add_constant_f -> empty .)
    MINUS           reduce using rule 147 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 147 (add_constant_f -> empty .)
    LESS            reduce using rule 147 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 147 (add_constant_f -> empty .)
    GREATER         reduce using rule 147 (add_constant_f -> empty .)
    COMPARE         reduce using rule 147 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 147 (add_constant_f -> empty .)
    AND             reduce using rule 147 (add_constant_f -> empty .)
    OR              reduce using rule 147 (add_constant_f -> empty .)
    COMMA           reduce using rule 147 (add_constant_f -> empty .)
    RPAR            reduce using rule 147 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 147 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 147 (add_constant_f -> empty .)
    TO              reduce using rule 147 (add_constant_f -> empty .)


state 198

    (86) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 241


state 199

    (91) if_point -> empty .

    RPAR            reduce using rule 91 (if_point -> empty .)


state 200

    (94) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 242


state 201

    (97) for_point_1 -> empty .

    EQUAL           reduce using rule 97 (for_point_1 -> empty .)


state 202

    (101) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 243


state 203

    (107) return -> RETURN LPAR exp check_valid_func . RPAR SEMICOLON

    RPAR            shift and go to state 244


state 204

    (108) check_valid_func -> empty .

    RPAR            reduce using rule 108 (check_valid_func -> empty .)


state 205

    (149) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 245


state 206

    (41) param_2 -> COMMA param .

    RPAR            reduce using rule 41 (param_2 -> COMMA param .)


state 207

    (61) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 246


state 208

    (62) asigna_point -> empty .

    SEMICOLON       reduce using rule 62 (asigna_point -> empty .)


state 209

    (63) llamada -> ID verify_func not_void LPAR add_floor . llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (64) llamada_2 -> . exp verify_parameter
    (65) llamada_2 -> . empty
    (110) exp -> . t_exp add_operator_4 exp_2
    (157) empty -> .
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    llamada_2                      shift and go to state 247
    exp                            shift and go to state 248
    empty                          shift and go to state 249
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 210

    (68) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 . llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (71) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (72) llamada_void_3 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 251
    RPAR            reduce using rule 157 (empty -> .)

    llamada_void_3                 shift and go to state 250
    empty                          shift and go to state 252

state 211

    (69) llamada_void_2 -> exp . verify_parameter
    (75) verify_parameter -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    verify_parameter               shift and go to state 253
    empty                          shift and go to state 254

state 212

    (70) llamada_void_2 -> empty .

    COMMA           reduce using rule 70 (llamada_void_2 -> empty .)
    RPAR            reduce using rule 70 (llamada_void_2 -> empty .)


state 213

    (47) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET . remove_floor variable_3
    (139) remove_floor -> . empty
    (157) empty -> .

    L_S_BRACKET     reduce using rule 157 (empty -> .)
    EQUAL           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    remove_floor                   shift and go to state 255
    empty                          shift and go to state 256

state 214

    (78) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 257


state 215

    (132) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 258


state 216

    (80) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 259


state 217

    (83) write_3 -> COMMA write_2 . write_3
    (83) write_3 -> . COMMA write_2 write_3
    (84) write_3 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 171
    RPAR            reduce using rule 157 (empty -> .)

    write_3                        shift and go to state 260
    empty                          shift and go to state 172

state 218

    (82) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 82 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 82 (write_2 -> CTE_S add_constant_s write_point .)


state 219

    (110) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 110 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 110 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 110 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 110 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 110 (exp -> t_exp add_operator_4 exp_2 .)


state 220

    (111) exp_2 -> OR . add_operator exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 261
    empty                          shift and go to state 127

state 221

    (112) exp_2 -> empty .

    COMMA           reduce using rule 112 (exp_2 -> empty .)
    RPAR            reduce using rule 112 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 112 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 112 (exp_2 -> empty .)
    TO              reduce using rule 112 (exp_2 -> empty .)


state 222

    (113) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 113 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 113 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 113 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 113 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 113 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 113 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 223

    (114) t_exp_2 -> AND . add_operator t_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 262
    empty                          shift and go to state 127

state 224

    (115) t_exp_2 -> empty .

    OR              reduce using rule 115 (t_exp_2 -> empty .)
    COMMA           reduce using rule 115 (t_exp_2 -> empty .)
    RPAR            reduce using rule 115 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 115 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 115 (t_exp_2 -> empty .)
    TO              reduce using rule 115 (t_exp_2 -> empty .)


state 225

    (116) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 116 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 226

    (143) add_operator_3 -> empty .

    AND             reduce using rule 143 (add_operator_3 -> empty .)
    OR              reduce using rule 143 (add_operator_3 -> empty .)
    COMMA           reduce using rule 143 (add_operator_3 -> empty .)
    RPAR            reduce using rule 143 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 143 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 143 (add_operator_3 -> empty .)
    TO              reduce using rule 143 (add_operator_3 -> empty .)


state 227

    (117) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 263
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 228

    (118) g_exp_2 -> LESS add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 264
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 229

    (119) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 265
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 230

    (120) g_exp_2 -> GREATER add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 266
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 231

    (121) g_exp_2 -> COMPARE add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 267
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 232

    (122) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 268
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 233

    (124) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 124 (m_exp -> t add_operator_2 m_exp_2 .)


state 234

    (125) m_exp_2 -> PLUS . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 269
    empty                          shift and go to state 127

state 235

    (126) m_exp_2 -> MINUS . add_operator m_exp
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 270
    empty                          shift and go to state 127

state 236

    (127) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 127 (m_exp_2 -> empty .)
    LESS            reduce using rule 127 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 127 (m_exp_2 -> empty .)
    GREATER         reduce using rule 127 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 127 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 127 (m_exp_2 -> empty .)
    AND             reduce using rule 127 (m_exp_2 -> empty .)
    OR              reduce using rule 127 (m_exp_2 -> empty .)
    COMMA           reduce using rule 127 (m_exp_2 -> empty .)
    RPAR            reduce using rule 127 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 127 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 127 (m_exp_2 -> empty .)
    TO              reduce using rule 127 (m_exp_2 -> empty .)


state 237

    (128) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 128 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 128 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 128 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 128 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 128 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 128 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 128 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 128 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 128 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 128 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 128 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 128 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 128 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 128 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 128 (t -> f add_operator_1 t_2 .)


state 238

    (129) t_2 -> TIMES . add_operator t
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 271
    empty                          shift and go to state 127

state 239

    (130) t_2 -> DIVIDE . add_operator t
    (140) add_operator -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_operator                   shift and go to state 272
    empty                          shift and go to state 127

state 240

    (131) t_2 -> empty .

    PLUS            reduce using rule 131 (t_2 -> empty .)
    MINUS           reduce using rule 131 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 131 (t_2 -> empty .)
    LESS            reduce using rule 131 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 131 (t_2 -> empty .)
    GREATER         reduce using rule 131 (t_2 -> empty .)
    COMPARE         reduce using rule 131 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 131 (t_2 -> empty .)
    AND             reduce using rule 131 (t_2 -> empty .)
    OR              reduce using rule 131 (t_2 -> empty .)
    COMMA           reduce using rule 131 (t_2 -> empty .)
    RPAR            reduce using rule 131 (t_2 -> empty .)
    SEMICOLON       reduce using rule 131 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 131 (t_2 -> empty .)
    TO              reduce using rule 131 (t_2 -> empty .)


state 241

    (86) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 273


state 242

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 274
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 243

    (101) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (105) while_point_2 -> . empty
    (157) empty -> .

    L_C_BRACKET     reduce using rule 157 (empty -> .)

    while_point_2                  shift and go to state 275
    empty                          shift and go to state 276

state 244

    (107) return -> RETURN LPAR exp check_valid_func RPAR . SEMICOLON

    SEMICOLON       shift and go to state 277


state 245

    (149) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (156) final_func_point -> . empty
    (157) empty -> .

    SEMICOLON       reduce using rule 157 (empty -> .)

    final_func_point               shift and go to state 278
    empty                          shift and go to state 279

state 246

    (61) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 61 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 247

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 . llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (66) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (67) llamada_3 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 281
    RPAR            reduce using rule 157 (empty -> .)

    llamada_3                      shift and go to state 280
    empty                          shift and go to state 282

state 248

    (64) llamada_2 -> exp . verify_parameter
    (75) verify_parameter -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    verify_parameter               shift and go to state 283
    empty                          shift and go to state 254

state 249

    (65) llamada_2 -> empty .

    COMMA           reduce using rule 65 (llamada_2 -> empty .)
    RPAR            reduce using rule 65 (llamada_2 -> empty .)


state 250

    (68) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 . RPAR remove_floor SEMICOLON gosub

    RPAR            shift and go to state 284


state 251

    (71) llamada_void_3 -> COMMA . exp verify_parameter llamada_void_3
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 285
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 252

    (72) llamada_void_3 -> empty .

    RPAR            reduce using rule 72 (llamada_void_3 -> empty .)


state 253

    (69) llamada_void_2 -> exp verify_parameter .

    COMMA           reduce using rule 69 (llamada_void_2 -> exp verify_parameter .)
    RPAR            reduce using rule 69 (llamada_void_2 -> exp verify_parameter .)


state 254

    (75) verify_parameter -> empty .

    COMMA           reduce using rule 75 (verify_parameter -> empty .)
    RPAR            reduce using rule 75 (verify_parameter -> empty .)


state 255

    (47) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor . variable_3
    (49) variable_3 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor
    (50) variable_3 -> . empty
    (157) empty -> .

    L_S_BRACKET     shift and go to state 286
    EQUAL           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    variable_3                     shift and go to state 287
    empty                          shift and go to state 288

state 256

    (139) remove_floor -> empty .

    L_S_BRACKET     reduce using rule 139 (remove_floor -> empty .)
    EQUAL           reduce using rule 139 (remove_floor -> empty .)
    RPAR            reduce using rule 139 (remove_floor -> empty .)
    TIMES           reduce using rule 139 (remove_floor -> empty .)
    DIVIDE          reduce using rule 139 (remove_floor -> empty .)
    PLUS            reduce using rule 139 (remove_floor -> empty .)
    MINUS           reduce using rule 139 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 139 (remove_floor -> empty .)
    LESS            reduce using rule 139 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 139 (remove_floor -> empty .)
    GREATER         reduce using rule 139 (remove_floor -> empty .)
    COMPARE         reduce using rule 139 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 139 (remove_floor -> empty .)
    AND             reduce using rule 139 (remove_floor -> empty .)
    OR              reduce using rule 139 (remove_floor -> empty .)
    COMMA           reduce using rule 139 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 139 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 139 (remove_floor -> empty .)
    TO              reduce using rule 139 (remove_floor -> empty .)


state 257

    (78) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 78 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 258

    (132) f -> LPAR add_floor exp RPAR . remove_floor
    (139) remove_floor -> . empty
    (157) empty -> .

    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    remove_floor                   shift and go to state 289
    empty                          shift and go to state 256

state 259

    (80) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 80 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 260

    (83) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 83 (write_3 -> COMMA write_2 write_3 .)


state 261

    (111) exp_2 -> OR add_operator . exp
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 290
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 262

    (114) t_exp_2 -> AND add_operator . t_exp
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    t_exp                          shift and go to state 291
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 263

    (117) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 117 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 264

    (118) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 118 (g_exp_2 -> LESS add_operator m_exp .)


state 265

    (119) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 119 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 266

    (120) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 120 (g_exp_2 -> GREATER add_operator m_exp .)


state 267

    (121) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 121 (g_exp_2 -> COMPARE add_operator m_exp .)


state 268

    (122) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 122 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 269

    (125) m_exp_2 -> PLUS add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 292
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 270

    (126) m_exp_2 -> MINUS add_operator . m_exp
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    m_exp                          shift and go to state 293
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 271

    (129) t_2 -> TIMES add_operator . t
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    t                              shift and go to state 294
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 272

    (130) t_2 -> DIVIDE add_operator . t
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    t                              shift and go to state 295
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 273

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98
    R_C_BRACKET     reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 296
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91
    empty                          shift and go to state 99

state 274

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (98) for_point_2 -> . empty
    (157) empty -> .

    TO              reduce using rule 157 (empty -> .)

    for_point_2                    shift and go to state 297
    empty                          shift and go to state 298

state 275

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 299


state 276

    (105) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 105 (while_point_2 -> empty .)


state 277

    (107) return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .

    ID              reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    READ            reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WRITE           reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    IF              reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    FOR             reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WHILE           reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    RETURN          reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 107 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)


state 278

    (149) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 149 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 279

    (156) final_func_point -> empty .

    SEMICOLON       reduce using rule 156 (final_func_point -> empty .)


state 280

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 . RPAR remove_floor SEMICOLON gosub add_temp

    RPAR            shift and go to state 300


state 281

    (66) llamada_3 -> COMMA . exp verify_parameter llamada_3
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 301
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 282

    (67) llamada_3 -> empty .

    RPAR            reduce using rule 67 (llamada_3 -> empty .)


state 283

    (64) llamada_2 -> exp verify_parameter .

    COMMA           reduce using rule 64 (llamada_2 -> exp verify_parameter .)
    RPAR            reduce using rule 64 (llamada_2 -> exp verify_parameter .)


state 284

    (68) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR . remove_floor SEMICOLON gosub
    (139) remove_floor -> . empty
    (157) empty -> .

    SEMICOLON       reduce using rule 157 (empty -> .)

    remove_floor                   shift and go to state 302
    empty                          shift and go to state 256

state 285

    (71) llamada_void_3 -> COMMA exp . verify_parameter llamada_void_3
    (75) verify_parameter -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    verify_parameter               shift and go to state 303
    empty                          shift and go to state 254

state 286

    (49) variable_3 -> L_S_BRACKET . add_floor exp R_S_BRACKET remove_floor
    (138) add_floor -> . empty
    (157) empty -> .

    LPAR            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    CTE_I           reduce using rule 157 (empty -> .)
    CTE_F           reduce using rule 157 (empty -> .)

    add_floor                      shift and go to state 304
    empty                          shift and go to state 134

state 287

    (47) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .

    EQUAL           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    RPAR            reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    TIMES           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    DIVIDE          reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    PLUS            reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    MINUS           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    LESS_EQUAL      reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    LESS            reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    GREATER_EQUAL   reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    GREATER         reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    COMPARE         reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    NOT_EQUAL       reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    AND             reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    OR              reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    COMMA           reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    SEMICOLON       reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    R_S_BRACKET     reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    TO              reduce using rule 47 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)


state 288

    (50) variable_3 -> empty .

    EQUAL           reduce using rule 50 (variable_3 -> empty .)
    RPAR            reduce using rule 50 (variable_3 -> empty .)
    TIMES           reduce using rule 50 (variable_3 -> empty .)
    DIVIDE          reduce using rule 50 (variable_3 -> empty .)
    PLUS            reduce using rule 50 (variable_3 -> empty .)
    MINUS           reduce using rule 50 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 50 (variable_3 -> empty .)
    LESS            reduce using rule 50 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 50 (variable_3 -> empty .)
    GREATER         reduce using rule 50 (variable_3 -> empty .)
    COMPARE         reduce using rule 50 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 50 (variable_3 -> empty .)
    AND             reduce using rule 50 (variable_3 -> empty .)
    OR              reduce using rule 50 (variable_3 -> empty .)
    COMMA           reduce using rule 50 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 50 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 50 (variable_3 -> empty .)
    TO              reduce using rule 50 (variable_3 -> empty .)


state 289

    (132) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 132 (f -> LPAR add_floor exp RPAR remove_floor .)


state 290

    (111) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 111 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 111 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 111 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 111 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 111 (exp_2 -> OR add_operator exp .)


state 291

    (114) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 114 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 114 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 114 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 114 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 114 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 114 (t_exp_2 -> AND add_operator t_exp .)


state 292

    (125) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 125 (m_exp_2 -> PLUS add_operator m_exp .)


state 293

    (126) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 126 (m_exp_2 -> MINUS add_operator m_exp .)


state 294

    (129) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 129 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 129 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 129 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 129 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 129 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 129 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 129 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 129 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 129 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 129 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 129 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 129 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 129 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 129 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 129 (t_2 -> TIMES add_operator t .)


state 295

    (130) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 130 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 130 (t_2 -> DIVIDE add_operator t .)


state 296

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (87) if_2 -> . estatuto if_2
    (88) if_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 305
    if_2                           shift and go to state 306
    empty                          shift and go to state 307
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 297

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 308


state 298

    (98) for_point_2 -> empty .

    TO              reduce using rule 98 (for_point_2 -> empty .)


state 299

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98
    R_C_BRACKET     reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 309
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91
    empty                          shift and go to state 99

state 300

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR . remove_floor SEMICOLON gosub add_temp
    (139) remove_floor -> . empty
    (157) empty -> .

    SEMICOLON       reduce using rule 157 (empty -> .)

    remove_floor                   shift and go to state 310
    empty                          shift and go to state 256

state 301

    (66) llamada_3 -> COMMA exp . verify_parameter llamada_3
    (75) verify_parameter -> . empty
    (157) empty -> .

    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)

    verify_parameter               shift and go to state 311
    empty                          shift and go to state 254

state 302

    (68) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor . SEMICOLON gosub

    SEMICOLON       shift and go to state 312


state 303

    (71) llamada_void_3 -> COMMA exp verify_parameter . llamada_void_3
    (71) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (72) llamada_void_3 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 251
    RPAR            reduce using rule 157 (empty -> .)

    llamada_void_3                 shift and go to state 313
    empty                          shift and go to state 252

state 304

    (49) variable_3 -> L_S_BRACKET add_floor . exp R_S_BRACKET remove_floor
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 314
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 305

    (87) if_2 -> estatuto . if_2
    (87) if_2 -> . estatuto if_2
    (88) if_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 305
    if_2                           shift and go to state 315
    empty                          shift and go to state 307
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 306

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 316


state 307

    (88) if_2 -> empty .
    (109) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 88 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 88 (if_2 -> empty .)
    ID              reduce using rule 109 (func_extra -> empty .)
    READ            reduce using rule 109 (func_extra -> empty .)
    WRITE           reduce using rule 109 (func_extra -> empty .)
    IF              reduce using rule 109 (func_extra -> empty .)
    FOR             reduce using rule 109 (func_extra -> empty .)
    WHILE           reduce using rule 109 (func_extra -> empty .)
    RETURN          reduce using rule 109 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 109 (func_extra -> empty .) ]


state 308

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (110) exp -> . t_exp add_operator_4 exp_2
    (113) t_exp -> . g_exp add_operator_4 t_exp_2
    (116) g_exp -> . m_exp g_exp_2 add_operator_3
    (124) m_exp -> . t add_operator_2 m_exp_2
    (128) t -> . f add_operator_1 t_2
    (132) f -> . LPAR add_floor exp RPAR remove_floor
    (133) f -> . variable
    (134) f -> . llamada
    (135) f -> . f_2
    (45) variable -> . ID variable_2 variable_point
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (136) f_2 -> . CTE_I add_constant_i
    (137) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 137
    ID              shift and go to state 149
    CTE_I           shift and go to state 150
    CTE_F           shift and go to state 151

    exp                            shift and go to state 317
    t_exp                          shift and go to state 141
    g_exp                          shift and go to state 142
    m_exp                          shift and go to state 143
    t                              shift and go to state 144
    f                              shift and go to state 145
    variable                       shift and go to state 146
    llamada                        shift and go to state 147
    f_2                            shift and go to state 148

state 309

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (102) while_l_2 -> . estatuto while_l_2
    (103) while_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 318
    while_l_2                      shift and go to state 319
    empty                          shift and go to state 320
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 310

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor . SEMICOLON gosub add_temp

    SEMICOLON       shift and go to state 321


state 311

    (66) llamada_3 -> COMMA exp verify_parameter . llamada_3
    (66) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (67) llamada_3 -> . empty
    (157) empty -> .

    COMMA           shift and go to state 281
    RPAR            reduce using rule 157 (empty -> .)

    llamada_3                      shift and go to state 322
    empty                          shift and go to state 282

state 312

    (68) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON . gosub
    (76) gosub -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    gosub                          shift and go to state 323
    empty                          shift and go to state 324

state 313

    (71) llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .

    RPAR            reduce using rule 71 (llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .)


state 314

    (49) variable_3 -> L_S_BRACKET add_floor exp . R_S_BRACKET remove_floor

    R_S_BRACKET     shift and go to state 325


state 315

    (87) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 87 (if_2 -> estatuto if_2 .)


state 316

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (89) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (90) if_3 -> . empty
    (157) empty -> .

    ELSE            shift and go to state 327
    SEMICOLON       reduce using rule 157 (empty -> .)

    if_3                           shift and go to state 326
    empty                          shift and go to state 328

state 317

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (99) for_point_3 -> . empty
    (157) empty -> .

    RPAR            reduce using rule 157 (empty -> .)

    for_point_3                    shift and go to state 329
    empty                          shift and go to state 330

state 318

    (102) while_l_2 -> estatuto . while_l_2
    (102) while_l_2 -> . estatuto while_l_2
    (103) while_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 318
    while_l_2                      shift and go to state 331
    empty                          shift and go to state 320
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 319

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 332


state 320

    (103) while_l_2 -> empty .
    (109) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 103 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 103 (while_l_2 -> empty .)
    ID              reduce using rule 109 (func_extra -> empty .)
    READ            reduce using rule 109 (func_extra -> empty .)
    WRITE           reduce using rule 109 (func_extra -> empty .)
    IF              reduce using rule 109 (func_extra -> empty .)
    FOR             reduce using rule 109 (func_extra -> empty .)
    WHILE           reduce using rule 109 (func_extra -> empty .)
    RETURN          reduce using rule 109 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 109 (func_extra -> empty .) ]


state 321

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON . gosub add_temp
    (76) gosub -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    gosub                          shift and go to state 333
    empty                          shift and go to state 324

state 322

    (66) llamada_3 -> COMMA exp verify_parameter llamada_3 .

    RPAR            reduce using rule 66 (llamada_3 -> COMMA exp verify_parameter llamada_3 .)


state 323

    (68) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .

    ID              reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    READ            reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    WRITE           reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    IF              reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    FOR             reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    WHILE           reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    RETURN          reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    R_C_BRACKET     reduce using rule 68 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)


state 324

    (76) gosub -> empty .

    ID              reduce using rule 76 (gosub -> empty .)
    READ            reduce using rule 76 (gosub -> empty .)
    WRITE           reduce using rule 76 (gosub -> empty .)
    IF              reduce using rule 76 (gosub -> empty .)
    FOR             reduce using rule 76 (gosub -> empty .)
    WHILE           reduce using rule 76 (gosub -> empty .)
    RETURN          reduce using rule 76 (gosub -> empty .)
    R_C_BRACKET     reduce using rule 76 (gosub -> empty .)
    TIMES           reduce using rule 76 (gosub -> empty .)
    DIVIDE          reduce using rule 76 (gosub -> empty .)
    PLUS            reduce using rule 76 (gosub -> empty .)
    MINUS           reduce using rule 76 (gosub -> empty .)
    LESS_EQUAL      reduce using rule 76 (gosub -> empty .)
    LESS            reduce using rule 76 (gosub -> empty .)
    GREATER_EQUAL   reduce using rule 76 (gosub -> empty .)
    GREATER         reduce using rule 76 (gosub -> empty .)
    COMPARE         reduce using rule 76 (gosub -> empty .)
    NOT_EQUAL       reduce using rule 76 (gosub -> empty .)
    AND             reduce using rule 76 (gosub -> empty .)
    OR              reduce using rule 76 (gosub -> empty .)
    COMMA           reduce using rule 76 (gosub -> empty .)
    RPAR            reduce using rule 76 (gosub -> empty .)
    SEMICOLON       reduce using rule 76 (gosub -> empty .)
    R_S_BRACKET     reduce using rule 76 (gosub -> empty .)
    TO              reduce using rule 76 (gosub -> empty .)


state 325

    (49) variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET . remove_floor
    (139) remove_floor -> . empty
    (157) empty -> .

    EQUAL           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    remove_floor                   shift and go to state 334
    empty                          shift and go to state 256

state 326

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 335


state 327

    (89) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (93) if_point_3 -> . empty
    (157) empty -> .

    L_C_BRACKET     reduce using rule 157 (empty -> .)

    if_point_3                     shift and go to state 336
    empty                          shift and go to state 337

state 328

    (90) if_3 -> empty .

    SEMICOLON       reduce using rule 90 (if_3 -> empty .)


state 329

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 338


state 330

    (99) for_point_3 -> empty .

    RPAR            reduce using rule 99 (for_point_3 -> empty .)


state 331

    (102) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 102 (while_l_2 -> estatuto while_l_2 .)


state 332

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 339


state 333

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub . add_temp
    (77) add_temp -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    TIMES           reduce using rule 157 (empty -> .)
    DIVIDE          reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    LESS_EQUAL      reduce using rule 157 (empty -> .)
    LESS            reduce using rule 157 (empty -> .)
    GREATER_EQUAL   reduce using rule 157 (empty -> .)
    GREATER         reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    NOT_EQUAL       reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAR            reduce using rule 157 (empty -> .)
    SEMICOLON       reduce using rule 157 (empty -> .)
    R_S_BRACKET     reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    add_temp                       shift and go to state 340
    empty                          shift and go to state 341

state 334

    (49) variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .

    EQUAL           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    RPAR            reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    TIMES           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    DIVIDE          reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    PLUS            reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    MINUS           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    LESS_EQUAL      reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    LESS            reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    GREATER_EQUAL   reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    GREATER         reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    COMPARE         reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    NOT_EQUAL       reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    AND             reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    OR              reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    COMMA           reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    SEMICOLON       reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    R_S_BRACKET     reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    TO              reduce using rule 49 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)


state 335

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (92) if_point_2 -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    if_point_2                     shift and go to state 342
    empty                          shift and go to state 343

state 336

    (89) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 344


state 337

    (93) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 93 (if_point_3 -> empty .)


state 338

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 345


state 339

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (106) while_point_3 -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    while_point_3                  shift and go to state 346
    empty                          shift and go to state 347

state 340

    (63) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .

    ID              reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    READ            reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    WRITE           reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    IF              reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    FOR             reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    WHILE           reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    RETURN          reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    R_C_BRACKET     reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    TIMES           reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    DIVIDE          reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    PLUS            reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    MINUS           reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    LESS_EQUAL      reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    LESS            reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    GREATER_EQUAL   reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    GREATER         reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    COMPARE         reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    NOT_EQUAL       reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    AND             reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    OR              reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    COMMA           reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    RPAR            reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    SEMICOLON       reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    R_S_BRACKET     reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)
    TO              reduce using rule 63 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp .)


state 341

    (77) add_temp -> empty .

    ID              reduce using rule 77 (add_temp -> empty .)
    READ            reduce using rule 77 (add_temp -> empty .)
    WRITE           reduce using rule 77 (add_temp -> empty .)
    IF              reduce using rule 77 (add_temp -> empty .)
    FOR             reduce using rule 77 (add_temp -> empty .)
    WHILE           reduce using rule 77 (add_temp -> empty .)
    RETURN          reduce using rule 77 (add_temp -> empty .)
    R_C_BRACKET     reduce using rule 77 (add_temp -> empty .)
    TIMES           reduce using rule 77 (add_temp -> empty .)
    DIVIDE          reduce using rule 77 (add_temp -> empty .)
    PLUS            reduce using rule 77 (add_temp -> empty .)
    MINUS           reduce using rule 77 (add_temp -> empty .)
    LESS_EQUAL      reduce using rule 77 (add_temp -> empty .)
    LESS            reduce using rule 77 (add_temp -> empty .)
    GREATER_EQUAL   reduce using rule 77 (add_temp -> empty .)
    GREATER         reduce using rule 77 (add_temp -> empty .)
    COMPARE         reduce using rule 77 (add_temp -> empty .)
    NOT_EQUAL       reduce using rule 77 (add_temp -> empty .)
    AND             reduce using rule 77 (add_temp -> empty .)
    OR              reduce using rule 77 (add_temp -> empty .)
    COMMA           reduce using rule 77 (add_temp -> empty .)
    RPAR            reduce using rule 77 (add_temp -> empty .)
    SEMICOLON       reduce using rule 77 (add_temp -> empty .)
    R_S_BRACKET     reduce using rule 77 (add_temp -> empty .)
    TO              reduce using rule 77 (add_temp -> empty .)


state 342

    (86) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 86 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 343

    (92) if_point_2 -> empty .

    ID              reduce using rule 92 (if_point_2 -> empty .)
    READ            reduce using rule 92 (if_point_2 -> empty .)
    WRITE           reduce using rule 92 (if_point_2 -> empty .)
    IF              reduce using rule 92 (if_point_2 -> empty .)
    FOR             reduce using rule 92 (if_point_2 -> empty .)
    WHILE           reduce using rule 92 (if_point_2 -> empty .)
    RETURN          reduce using rule 92 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 92 (if_point_2 -> empty .)


state 344

    (89) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98
    R_C_BRACKET     reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 348
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91
    empty                          shift and go to state 99

state 345

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98
    R_C_BRACKET     reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 349
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91
    empty                          shift and go to state 99

state 346

    (101) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 101 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 347

    (106) while_point_3 -> empty .

    ID              reduce using rule 106 (while_point_3 -> empty .)
    READ            reduce using rule 106 (while_point_3 -> empty .)
    WRITE           reduce using rule 106 (while_point_3 -> empty .)
    IF              reduce using rule 106 (while_point_3 -> empty .)
    FOR             reduce using rule 106 (while_point_3 -> empty .)
    WHILE           reduce using rule 106 (while_point_3 -> empty .)
    RETURN          reduce using rule 106 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 106 (while_point_3 -> empty .)


state 348

    (89) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (87) if_2 -> . estatuto if_2
    (88) if_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 305
    if_2                           shift and go to state 350
    empty                          shift and go to state 307
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 349

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (95) for_l_2 -> . estatuto for_l_2
    (96) for_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 351
    for_l_2                        shift and go to state 352
    empty                          shift and go to state 353
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 350

    (89) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 354


state 351

    (95) for_l_2 -> estatuto . for_l_2
    (95) for_l_2 -> . estatuto for_l_2
    (96) for_l_2 -> . empty
    (51) estatuto -> . asigna
    (52) estatuto -> . llamada
    (53) estatuto -> . llamada_void
    (54) estatuto -> . read
    (55) estatuto -> . write
    (56) estatuto -> . if_1
    (57) estatuto -> . for_l
    (58) estatuto -> . while_l
    (59) estatuto -> . return
    (60) estatuto -> . func_extra
    (157) empty -> .
    (61) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (63) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor SEMICOLON gosub add_temp
    (68) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (78) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (80) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (86) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (94) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (101) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (107) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (109) func_extra -> . empty
    (45) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 157 (empty -> .)
    ID              shift and go to state 92
    READ            shift and go to state 93
    WRITE           shift and go to state 94
    IF              shift and go to state 95
    FOR             shift and go to state 96
    WHILE           shift and go to state 97
    RETURN          shift and go to state 98

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! READ            [ reduce using rule 157 (empty -> .) ]
  ! WRITE           [ reduce using rule 157 (empty -> .) ]
  ! IF              [ reduce using rule 157 (empty -> .) ]
  ! FOR             [ reduce using rule 157 (empty -> .) ]
  ! WHILE           [ reduce using rule 157 (empty -> .) ]
  ! RETURN          [ reduce using rule 157 (empty -> .) ]

    estatuto                       shift and go to state 351
    for_l_2                        shift and go to state 355
    empty                          shift and go to state 353
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    llamada_void                   shift and go to state 83
    read                           shift and go to state 84
    write                          shift and go to state 85
    if_1                           shift and go to state 86
    for_l                          shift and go to state 87
    while_l                        shift and go to state 88
    return                         shift and go to state 89
    func_extra                     shift and go to state 90
    variable                       shift and go to state 91

state 352

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 356


state 353

    (96) for_l_2 -> empty .
    (109) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 96 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 96 (for_l_2 -> empty .)
    ID              reduce using rule 109 (func_extra -> empty .)
    READ            reduce using rule 109 (func_extra -> empty .)
    WRITE           reduce using rule 109 (func_extra -> empty .)
    IF              reduce using rule 109 (func_extra -> empty .)
    FOR             reduce using rule 109 (func_extra -> empty .)
    WHILE           reduce using rule 109 (func_extra -> empty .)
    RETURN          reduce using rule 109 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 109 (func_extra -> empty .) ]


state 354

    (89) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 89 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 355

    (95) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 95 (for_l_2 -> estatuto for_l_2 .)


state 356

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 357


state 357

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (100) for_point_4 -> . empty
    (157) empty -> .

    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    R_C_BRACKET     reduce using rule 157 (empty -> .)

    for_point_4                    shift and go to state 358
    empty                          shift and go to state 359

state 358

    (94) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 94 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 359

    (100) for_point_4 -> empty .

    ID              reduce using rule 100 (for_point_4 -> empty .)
    READ            reduce using rule 100 (for_point_4 -> empty .)
    WRITE           reduce using rule 100 (for_point_4 -> empty .)
    IF              reduce using rule 100 (for_point_4 -> empty .)
    FOR             reduce using rule 100 (for_point_4 -> empty .)
    WHILE           reduce using rule 100 (for_point_4 -> empty .)
    RETURN          reduce using rule 100 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 100 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for READ in state 70 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for READ in state 106 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for FOR in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 106 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for READ in state 273 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 273 resolved as shift
WARNING: shift/reduce conflict for IF in state 273 resolved as shift
WARNING: shift/reduce conflict for FOR in state 273 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 273 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 296 resolved as shift
WARNING: shift/reduce conflict for READ in state 296 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 296 resolved as shift
WARNING: shift/reduce conflict for IF in state 296 resolved as shift
WARNING: shift/reduce conflict for FOR in state 296 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 296 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 296 resolved as shift
WARNING: shift/reduce conflict for ID in state 299 resolved as shift
WARNING: shift/reduce conflict for READ in state 299 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 299 resolved as shift
WARNING: shift/reduce conflict for IF in state 299 resolved as shift
WARNING: shift/reduce conflict for FOR in state 299 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 299 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 299 resolved as shift
WARNING: shift/reduce conflict for ID in state 305 resolved as shift
WARNING: shift/reduce conflict for READ in state 305 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 305 resolved as shift
WARNING: shift/reduce conflict for IF in state 305 resolved as shift
WARNING: shift/reduce conflict for FOR in state 305 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 305 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 305 resolved as shift
WARNING: shift/reduce conflict for ID in state 309 resolved as shift
WARNING: shift/reduce conflict for READ in state 309 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 309 resolved as shift
WARNING: shift/reduce conflict for IF in state 309 resolved as shift
WARNING: shift/reduce conflict for FOR in state 309 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 309 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 309 resolved as shift
WARNING: shift/reduce conflict for ID in state 318 resolved as shift
WARNING: shift/reduce conflict for READ in state 318 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 318 resolved as shift
WARNING: shift/reduce conflict for IF in state 318 resolved as shift
WARNING: shift/reduce conflict for FOR in state 318 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 318 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 318 resolved as shift
WARNING: shift/reduce conflict for ID in state 344 resolved as shift
WARNING: shift/reduce conflict for READ in state 344 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 344 resolved as shift
WARNING: shift/reduce conflict for IF in state 344 resolved as shift
WARNING: shift/reduce conflict for FOR in state 344 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 344 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 344 resolved as shift
WARNING: shift/reduce conflict for ID in state 345 resolved as shift
WARNING: shift/reduce conflict for READ in state 345 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 345 resolved as shift
WARNING: shift/reduce conflict for IF in state 345 resolved as shift
WARNING: shift/reduce conflict for FOR in state 345 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 345 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 345 resolved as shift
WARNING: shift/reduce conflict for ID in state 348 resolved as shift
WARNING: shift/reduce conflict for READ in state 348 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 348 resolved as shift
WARNING: shift/reduce conflict for IF in state 348 resolved as shift
WARNING: shift/reduce conflict for FOR in state 348 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 348 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 348 resolved as shift
WARNING: shift/reduce conflict for ID in state 349 resolved as shift
WARNING: shift/reduce conflict for READ in state 349 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 349 resolved as shift
WARNING: shift/reduce conflict for IF in state 349 resolved as shift
WARNING: shift/reduce conflict for FOR in state 349 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 349 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 349 resolved as shift
WARNING: shift/reduce conflict for ID in state 351 resolved as shift
WARNING: shift/reduce conflict for READ in state 351 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 351 resolved as shift
WARNING: shift/reduce conflict for IF in state 351 resolved as shift
WARNING: shift/reduce conflict for FOR in state 351 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 351 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 351 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 50
WARNING: reduce/reduce conflict in state 108 resolved using rule (body_3 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 108
WARNING: reduce/reduce conflict in state 307 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 307
WARNING: reduce/reduce conflict in state 320 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 320
WARNING: reduce/reduce conflict in state 353 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 353
WARNING: Rule (vars_6 -> empty) is never reduced
