Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
Rule 10    main_point -> empty
Rule 11    main_final -> empty
Rule 12    body -> vars func_agrega_v estatuto body_2
Rule 13    body_2 -> estatuto body_2
Rule 14    body_2 -> empty
Rule 15    tipo_simple -> INT
Rule 16    tipo_simple -> FLOAT
Rule 17    tipo_simple -> CHAR
Rule 18    tipo_comp -> DATAFRAME
Rule 19    vars -> VAR vars_2 SEMICOLON vars_8
Rule 20    vars_2 -> tipo_comp vars_3
Rule 21    vars_2 -> tipo_simple vars_4
Rule 22    vars_3 -> ID vars_5
Rule 23    vars_4 -> vars_3
Rule 24    vars_4 -> ID vars_6
Rule 25    vars_5 -> COMMA vars_3
Rule 26    vars_5 -> empty
Rule 27    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 28    vars_6 -> empty
Rule 29    punto_id_especial -> empty
Rule 30    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 31    vars_7 -> var_array
Rule 32    var_array -> empty
Rule 33    var_mat -> empty
Rule 34    vars_8 -> vars
Rule 35    vars_8 -> empty
Rule 36    param -> tipo_simple ID punto_param param_2
Rule 37    param -> empty
Rule 38    param_2 -> COMMA param
Rule 39    param_2 -> empty
Rule 40    punto_param -> empty
Rule 41    punto_param_2 -> empty
Rule 42    variable -> ID variable_2 variable_point
Rule 43    variable_point -> empty
Rule 44    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 45    variable_2 -> empty
Rule 46    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 47    variable_3 -> empty
Rule 48    estatuto -> asigna
Rule 49    estatuto -> llamada
Rule 50    estatuto -> llamada_void
Rule 51    estatuto -> read
Rule 52    estatuto -> write
Rule 53    estatuto -> if_1
Rule 54    estatuto -> for_l
Rule 55    estatuto -> while_l
Rule 56    estatuto -> return
Rule 57    estatuto -> func_extra
Rule 58    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 59    asigna_point -> empty
Rule 60    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 61    llamada_2 -> COMMA exp llamada_2
Rule 62    llamada_2 -> empty
Rule 63    llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON
Rule 64    llamada_void_2 -> COMMA exp llamada_void_2
Rule 65    llamada_void_2 -> empty
Rule 66    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 67    read_point -> empty
Rule 68    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 69    write_2 -> exp write_point
Rule 70    write_2 -> CTE_S add_constant_s write_point
Rule 71    write_3 -> COMMA write_2 write_3
Rule 72    write_3 -> empty
Rule 73    write_point -> empty
Rule 74    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 75    if_2 -> estatuto if_2
Rule 76    if_2 -> empty
Rule 77    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 78    if_3 -> empty
Rule 79    if_point -> empty
Rule 80    if_point_2 -> empty
Rule 81    if_point_3 -> empty
Rule 82    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 83    for_l_2 -> estatuto for_l_2
Rule 84    for_l_2 -> empty
Rule 85    for_point_1 -> empty
Rule 86    for_point_2 -> empty
Rule 87    for_point_3 -> empty
Rule 88    for_point_4 -> empty
Rule 89    while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 90    while_l_2 -> estatuto while_l_2
Rule 91    while_l_2 -> empty
Rule 92    while_point -> empty
Rule 93    while_point_2 -> empty
Rule 94    while_point_3 -> empty
Rule 95    return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON
Rule 96    check_valid_func -> empty
Rule 97    func_extra -> empty
Rule 98    exp -> t_exp add_operator_4 exp_2
Rule 99    exp_2 -> OR add_operator exp
Rule 100   exp_2 -> empty
Rule 101   t_exp -> g_exp add_operator_4 t_exp_2
Rule 102   t_exp_2 -> AND add_operator t_exp
Rule 103   t_exp_2 -> empty
Rule 104   g_exp -> m_exp g_exp_2 add_operator_3
Rule 105   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 106   g_exp_2 -> LESS add_operator m_exp
Rule 107   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 108   g_exp_2 -> GREATER add_operator m_exp
Rule 109   g_exp_2 -> COMPARE add_operator m_exp
Rule 110   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 111   g_exp_2 -> empty
Rule 112   m_exp -> t add_operator_2 m_exp_2
Rule 113   m_exp_2 -> PLUS add_operator m_exp
Rule 114   m_exp_2 -> MINUS add_operator m_exp
Rule 115   m_exp_2 -> empty
Rule 116   t -> f add_operator_1 t_2
Rule 117   t_2 -> TIMES add_operator t
Rule 118   t_2 -> DIVIDE add_operator t
Rule 119   t_2 -> empty
Rule 120   f -> LPAR add_floor exp RPAR remove_floor
Rule 121   f -> variable
Rule 122   f -> llamada
Rule 123   f -> f_2
Rule 124   f_2 -> CTE_I add_constant_i
Rule 125   f_2 -> CTE_F add_constant_f
Rule 126   add_floor -> empty
Rule 127   remove_floor -> empty
Rule 128   add_operator -> empty
Rule 129   add_operator_1 -> empty
Rule 130   add_operator_2 -> empty
Rule 131   add_operator_3 -> empty
Rule 132   add_operator_4 -> empty
Rule 133   add_constant_i -> empty
Rule 134   add_constant_s -> empty
Rule 135   add_constant_f -> empty
Rule 136   function -> FUNC function_2 SEMICOLON function_4
Rule 137   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 138   function_3 -> tipo_simple
Rule 139   function_3 -> VOID
Rule 140   function_4 -> function
Rule 141   function_4 -> empty
Rule 142   function_punto1 -> empty
Rule 143   func_agrega_v -> empty
Rule 144   final_func_point -> empty
Rule 145   empty -> <empty>

Terminals, with rules where they appear

AND                  : 102
CHAR                 : 17
COLON                : 1
COMMA                : 25 38 61 64 71
COMPARE              : 109
CTE_F                : 125
CTE_I                : 27 30 124
CTE_S                : 70
DATAFRAME            : 18
DIVIDE               : 118
ELSE                 : 77
EQUAL                : 58 82
FLOAT                : 16
FOR                  : 82
FUNC                 : 136
GREATER              : 108
GREATER_EQUAL        : 107
ID                   : 1 22 24 36 42 60 63 82 137
IF                   : 74
INT                  : 15
LESS                 : 106
LESS_EQUAL           : 105
LPAR                 : 9 60 63 66 68 74 82 89 95 120 137
L_C_BRACKET          : 9 74 77 82 89 137
L_S_BRACKET          : 27 30 44 46
MAIN                 : 9
MINUS                : 114
NOT_EQUAL            : 110
OR                   : 99
PLUS                 : 113
PROGRAM              : 1
READ                 : 66
RETURN               : 95
RPAR                 : 9 60 63 66 68 74 82 89 95 120 137
R_C_BRACKET          : 9 74 77 82 89 137
R_S_BRACKET          : 27 30 44 46
SEMICOLON            : 9 19 58 60 63 66 68 74 82 89 95 136
STRING               : 
TIMES                : 117
TO                   : 82
VAR                  : 19
VOID                 : 139
WHILE                : 89
WRITE                : 68
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 125
add_constant_i       : 124
add_constant_s       : 70
add_floor            : 120
add_operator         : 58 99 102 105 106 107 108 109 110 113 114 117 118
add_operator_1       : 116
add_operator_2       : 112
add_operator_3       : 104
add_operator_4       : 98 101
asigna               : 48
asigna_point         : 58
body                 : 9 137
body_2               : 12 13
check_valid_func     : 95
empty                : 2 4 6 8 10 11 14 26 28 29 32 33 35 37 39 40 41 43 45 47 59 62 65 67 72 73 76 78 79 80 81 84 85 86 87 88 91 92 93 94 96 97 100 103 111 115 119 126 127 128 129 130 131 132 133 134 135 141 142 143 144
estatuto             : 12 13 74 75 77 82 83 89 90
exp                  : 44 46 58 60 61 63 64 69 74 82 82 89 95 99 120
exp_2                : 98
f                    : 116
f_2                  : 123
final_func_point     : 137
for_l                : 54
for_l_2              : 82 83
for_point_1          : 82
for_point_2          : 82
for_point_3          : 82
for_point_4          : 82
func_agrega_v        : 12
func_extra           : 57
function             : 7 140
function_2           : 136
function_3           : 137
function_4           : 136
function_punto1      : 137
g_exp                : 101
g_exp_2              : 104
if_1                 : 53
if_2                 : 74 75 77
if_3                 : 74
if_point             : 74
if_point_2           : 74
if_point_3           : 77
llamada              : 49 122
llamada_2            : 60 61
llamada_void         : 50
llamada_void_2       : 63 64
m_exp                : 104 105 106 107 108 109 110 113 114
m_exp_2              : 112
main                 : 1
main_final           : 9
main_point           : 9
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 38 137
param_2              : 36
program              : 0
program_point        : 1
punto_id_especial    : 27
punto_param          : 36
punto_param_2        : 137
read                 : 51
read_point           : 66
remove_floor         : 120
return               : 56
t                    : 112 117 118
t_2                  : 116
t_exp                : 98 102
t_exp_2              : 101
tipo_comp            : 20
tipo_simple          : 21 36 138
var_array            : 31
var_mat              : 30
variable             : 58 66 121
variable_2           : 42
variable_3           : 44
variable_point       : 42
vars                 : 5 12 34
vars_2               : 19
vars_3               : 20 23 25
vars_4               : 21
vars_5               : 22
vars_6               : 24
vars_7               : 27
vars_8               : 19
while_l              : 55
while_l_2            : 89 90
while_point          : 89
while_point_2        : 89
while_point_3        : 89
write                : 52
write_2              : 68 71
write_3              : 68 71
write_point          : 69 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (19) vars -> . VAR vars_2 SEMICOLON vars_8
    (145) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 145 (empty -> .)
    MAIN            reduce using rule 145 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (145) empty -> .

    FUNC            reduce using rule 145 (empty -> .)
    MAIN            reduce using rule 145 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (19) vars -> VAR . vars_2 SEMICOLON vars_8
    (20) vars_2 -> . tipo_comp vars_3
    (21) vars_2 -> . tipo_simple vars_4
    (18) tipo_comp -> . DATAFRAME
    (15) tipo_simple -> . INT
    (16) tipo_simple -> . FLOAT
    (17) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
    (10) main_point -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (136) function -> . FUNC function_2 SEMICOLON function_4
    (145) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 145 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (19) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (20) vars_2 -> tipo_comp . vars_3
    (22) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (21) vars_2 -> tipo_simple . vars_4
    (23) vars_4 -> . vars_3
    (24) vars_4 -> . ID vars_6
    (22) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (18) tipo_comp -> DATAFRAME .

    ID              reduce using rule 18 (tipo_comp -> DATAFRAME .)


state 20

    (15) tipo_simple -> INT .

    ID              reduce using rule 15 (tipo_simple -> INT .)


state 21

    (16) tipo_simple -> FLOAT .

    ID              reduce using rule 16 (tipo_simple -> FLOAT .)


state 22

    (17) tipo_simple -> CHAR .

    ID              reduce using rule 17 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    LPAR            shift and go to state 35


state 24

    (10) main_point -> empty .

    LPAR            reduce using rule 10 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 26

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 27

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 28

    (136) function -> FUNC . function_2 SEMICOLON function_4
    (137) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (138) function_3 -> . tipo_simple
    (139) function_3 -> . VOID
    (15) tipo_simple -> . INT
    (16) tipo_simple -> . FLOAT
    (17) tipo_simple -> . CHAR

    VOID            shift and go to state 39
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 36
    function_3                     shift and go to state 37
    tipo_simple                    shift and go to state 38

state 29

    (19) vars -> VAR vars_2 SEMICOLON . vars_8
    (34) vars_8 -> . vars
    (35) vars_8 -> . empty
    (19) vars -> . VAR vars_2 SEMICOLON vars_8
    (145) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 145 (empty -> .)
    MAIN            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    WRITE           reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    FOR             reduce using rule 145 (empty -> .)
    WHILE           reduce using rule 145 (empty -> .)
    RETURN          reduce using rule 145 (empty -> .)
    R_C_BRACKET     reduce using rule 145 (empty -> .)

    vars_8                         shift and go to state 40
    vars                           shift and go to state 41
    empty                          shift and go to state 42

state 30

    (20) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 20 (vars_2 -> tipo_comp vars_3 .)


state 31

    (22) vars_3 -> ID . vars_5
    (25) vars_5 -> . COMMA vars_3
    (26) vars_5 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 145 (empty -> .)

    vars_5                         shift and go to state 43
    empty                          shift and go to state 45

state 32

    (21) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 21 (vars_2 -> tipo_simple vars_4 .)


state 33

    (23) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 23 (vars_4 -> vars_3 .)


state 34

    (24) vars_4 -> ID . vars_6
    (22) vars_3 -> ID . vars_5
    (27) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (28) vars_6 -> . empty
    (25) vars_5 -> . COMMA vars_3
    (26) vars_5 -> . empty
    (29) punto_id_especial -> . empty
    (145) empty -> .

    COMMA           shift and go to state 44
    SEMICOLON       reduce using rule 145 (empty -> .)
    L_S_BRACKET     reduce using rule 145 (empty -> .)

    vars_6                         shift and go to state 46
    vars_5                         shift and go to state 43
    punto_id_especial              shift and go to state 47
    empty                          shift and go to state 48

state 35

    (9) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    RPAR            shift and go to state 49


state 36

    (136) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 50


state 37

    (137) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 51


state 38

    (138) function_3 -> tipo_simple .

    ID              reduce using rule 138 (function_3 -> tipo_simple .)


state 39

    (139) function_3 -> VOID .

    ID              reduce using rule 139 (function_3 -> VOID .)


state 40

    (19) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 19 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 41

    (34) vars_8 -> vars .

    FUNC            reduce using rule 34 (vars_8 -> vars .)
    MAIN            reduce using rule 34 (vars_8 -> vars .)
    ID              reduce using rule 34 (vars_8 -> vars .)
    READ            reduce using rule 34 (vars_8 -> vars .)
    WRITE           reduce using rule 34 (vars_8 -> vars .)
    IF              reduce using rule 34 (vars_8 -> vars .)
    FOR             reduce using rule 34 (vars_8 -> vars .)
    WHILE           reduce using rule 34 (vars_8 -> vars .)
    RETURN          reduce using rule 34 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 34 (vars_8 -> vars .)


state 42

    (35) vars_8 -> empty .

    FUNC            reduce using rule 35 (vars_8 -> empty .)
    MAIN            reduce using rule 35 (vars_8 -> empty .)
    ID              reduce using rule 35 (vars_8 -> empty .)
    READ            reduce using rule 35 (vars_8 -> empty .)
    WRITE           reduce using rule 35 (vars_8 -> empty .)
    IF              reduce using rule 35 (vars_8 -> empty .)
    FOR             reduce using rule 35 (vars_8 -> empty .)
    WHILE           reduce using rule 35 (vars_8 -> empty .)
    RETURN          reduce using rule 35 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 35 (vars_8 -> empty .)


state 43

    (22) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 22 (vars_3 -> ID vars_5 .)


state 44

    (25) vars_5 -> COMMA . vars_3
    (22) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 52

state 45

    (26) vars_5 -> empty .

    SEMICOLON       reduce using rule 26 (vars_5 -> empty .)


state 46

    (24) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 24 (vars_4 -> ID vars_6 .)


state 47

    (27) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 53


state 48

    (28) vars_6 -> empty .
    (26) vars_5 -> empty .
    (29) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 26 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 29 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 28 (vars_6 -> empty .) ]


state 49

    (9) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    L_C_BRACKET     shift and go to state 54


state 50

    (136) function -> FUNC function_2 SEMICOLON . function_4
    (140) function_4 -> . function
    (141) function_4 -> . empty
    (136) function -> . FUNC function_2 SEMICOLON function_4
    (145) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 145 (empty -> .)

    function_4                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 51

    (137) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (142) function_punto1 -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 52

    (25) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 25 (vars_5 -> COMMA vars_3 .)


state 53

    (27) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 60


state 54

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON main_final
    (12) body -> . vars func_agrega_v estatuto body_2
    (19) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 61
    vars                           shift and go to state 62

state 55

    (136) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 136 (function -> FUNC function_2 SEMICOLON function_4 .)


state 56

    (140) function_4 -> function .

    MAIN            reduce using rule 140 (function_4 -> function .)


state 57

    (141) function_4 -> empty .

    MAIN            reduce using rule 141 (function_4 -> empty .)


state 58

    (137) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 63


state 59

    (142) function_punto1 -> empty .

    LPAR            reduce using rule 142 (function_punto1 -> empty .)


state 60

    (27) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 64


state 61

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON main_final

    R_C_BRACKET     shift and go to state 65


state 62

    (12) body -> vars . func_agrega_v estatuto body_2
    (143) func_agrega_v -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    WRITE           reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    FOR             reduce using rule 145 (empty -> .)
    WHILE           reduce using rule 145 (empty -> .)
    RETURN          reduce using rule 145 (empty -> .)
    R_C_BRACKET     reduce using rule 145 (empty -> .)

    func_agrega_v                  shift and go to state 66
    empty                          shift and go to state 67

state 63

    (137) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (36) param -> . tipo_simple ID punto_param param_2
    (37) param -> . empty
    (15) tipo_simple -> . INT
    (16) tipo_simple -> . FLOAT
    (17) tipo_simple -> . CHAR
    (145) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 145 (empty -> .)

    param                          shift and go to state 68
    tipo_simple                    shift and go to state 69
    empty                          shift and go to state 70

state 64

    (27) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (30) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (31) vars_7 -> . var_array
    (32) var_array -> . empty
    (145) empty -> .

    L_S_BRACKET     shift and go to state 71
    SEMICOLON       reduce using rule 145 (empty -> .)

    vars_7                         shift and go to state 72
    var_array                      shift and go to state 73
    empty                          shift and go to state 74

state 65

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON main_final

    SEMICOLON       shift and go to state 75


state 66

    (12) body -> vars func_agrega_v . estatuto body_2
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point
    (145) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 145 (empty -> .)

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 76
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 67

    (143) func_agrega_v -> empty .

    ID              reduce using rule 143 (func_agrega_v -> empty .)
    READ            reduce using rule 143 (func_agrega_v -> empty .)
    WRITE           reduce using rule 143 (func_agrega_v -> empty .)
    IF              reduce using rule 143 (func_agrega_v -> empty .)
    FOR             reduce using rule 143 (func_agrega_v -> empty .)
    WHILE           reduce using rule 143 (func_agrega_v -> empty .)
    RETURN          reduce using rule 143 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 143 (func_agrega_v -> empty .)


state 68

    (137) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (41) punto_param_2 -> . empty
    (145) empty -> .

    RPAR            reduce using rule 145 (empty -> .)

    punto_param_2                  shift and go to state 96
    empty                          shift and go to state 97

state 69

    (36) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 98


state 70

    (37) param -> empty .

    RPAR            reduce using rule 37 (param -> empty .)


state 71

    (30) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 99


state 72

    (27) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 27 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 73

    (31) vars_7 -> var_array .

    SEMICOLON       reduce using rule 31 (vars_7 -> var_array .)


state 74

    (32) var_array -> empty .

    SEMICOLON       reduce using rule 32 (var_array -> empty .)


state 75

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON . main_final
    (11) main_final -> . empty
    (145) empty -> .

    $end            reduce using rule 145 (empty -> .)

    main_final                     shift and go to state 100
    empty                          shift and go to state 101

state 76

    (12) body -> vars func_agrega_v estatuto . body_2
    (13) body_2 -> . estatuto body_2
    (14) body_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 102
    body_2                         shift and go to state 103
    empty                          shift and go to state 104
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 77

    (48) estatuto -> asigna .

    ID              reduce using rule 48 (estatuto -> asigna .)
    READ            reduce using rule 48 (estatuto -> asigna .)
    WRITE           reduce using rule 48 (estatuto -> asigna .)
    IF              reduce using rule 48 (estatuto -> asigna .)
    FOR             reduce using rule 48 (estatuto -> asigna .)
    WHILE           reduce using rule 48 (estatuto -> asigna .)
    RETURN          reduce using rule 48 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> asigna .)


state 78

    (49) estatuto -> llamada .

    ID              reduce using rule 49 (estatuto -> llamada .)
    READ            reduce using rule 49 (estatuto -> llamada .)
    WRITE           reduce using rule 49 (estatuto -> llamada .)
    IF              reduce using rule 49 (estatuto -> llamada .)
    FOR             reduce using rule 49 (estatuto -> llamada .)
    WHILE           reduce using rule 49 (estatuto -> llamada .)
    RETURN          reduce using rule 49 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> llamada .)


state 79

    (50) estatuto -> llamada_void .

    ID              reduce using rule 50 (estatuto -> llamada_void .)
    READ            reduce using rule 50 (estatuto -> llamada_void .)
    WRITE           reduce using rule 50 (estatuto -> llamada_void .)
    IF              reduce using rule 50 (estatuto -> llamada_void .)
    FOR             reduce using rule 50 (estatuto -> llamada_void .)
    WHILE           reduce using rule 50 (estatuto -> llamada_void .)
    RETURN          reduce using rule 50 (estatuto -> llamada_void .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> llamada_void .)


state 80

    (51) estatuto -> read .

    ID              reduce using rule 51 (estatuto -> read .)
    READ            reduce using rule 51 (estatuto -> read .)
    WRITE           reduce using rule 51 (estatuto -> read .)
    IF              reduce using rule 51 (estatuto -> read .)
    FOR             reduce using rule 51 (estatuto -> read .)
    WHILE           reduce using rule 51 (estatuto -> read .)
    RETURN          reduce using rule 51 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> read .)


state 81

    (52) estatuto -> write .

    ID              reduce using rule 52 (estatuto -> write .)
    READ            reduce using rule 52 (estatuto -> write .)
    WRITE           reduce using rule 52 (estatuto -> write .)
    IF              reduce using rule 52 (estatuto -> write .)
    FOR             reduce using rule 52 (estatuto -> write .)
    WHILE           reduce using rule 52 (estatuto -> write .)
    RETURN          reduce using rule 52 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> write .)


state 82

    (53) estatuto -> if_1 .

    ID              reduce using rule 53 (estatuto -> if_1 .)
    READ            reduce using rule 53 (estatuto -> if_1 .)
    WRITE           reduce using rule 53 (estatuto -> if_1 .)
    IF              reduce using rule 53 (estatuto -> if_1 .)
    FOR             reduce using rule 53 (estatuto -> if_1 .)
    WHILE           reduce using rule 53 (estatuto -> if_1 .)
    RETURN          reduce using rule 53 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> if_1 .)


state 83

    (54) estatuto -> for_l .

    ID              reduce using rule 54 (estatuto -> for_l .)
    READ            reduce using rule 54 (estatuto -> for_l .)
    WRITE           reduce using rule 54 (estatuto -> for_l .)
    IF              reduce using rule 54 (estatuto -> for_l .)
    FOR             reduce using rule 54 (estatuto -> for_l .)
    WHILE           reduce using rule 54 (estatuto -> for_l .)
    RETURN          reduce using rule 54 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> for_l .)


state 84

    (55) estatuto -> while_l .

    ID              reduce using rule 55 (estatuto -> while_l .)
    READ            reduce using rule 55 (estatuto -> while_l .)
    WRITE           reduce using rule 55 (estatuto -> while_l .)
    IF              reduce using rule 55 (estatuto -> while_l .)
    FOR             reduce using rule 55 (estatuto -> while_l .)
    WHILE           reduce using rule 55 (estatuto -> while_l .)
    RETURN          reduce using rule 55 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> while_l .)


state 85

    (56) estatuto -> return .

    ID              reduce using rule 56 (estatuto -> return .)
    READ            reduce using rule 56 (estatuto -> return .)
    WRITE           reduce using rule 56 (estatuto -> return .)
    IF              reduce using rule 56 (estatuto -> return .)
    FOR             reduce using rule 56 (estatuto -> return .)
    WHILE           reduce using rule 56 (estatuto -> return .)
    RETURN          reduce using rule 56 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 56 (estatuto -> return .)


state 86

    (57) estatuto -> func_extra .

    ID              reduce using rule 57 (estatuto -> func_extra .)
    READ            reduce using rule 57 (estatuto -> func_extra .)
    WRITE           reduce using rule 57 (estatuto -> func_extra .)
    IF              reduce using rule 57 (estatuto -> func_extra .)
    FOR             reduce using rule 57 (estatuto -> func_extra .)
    WHILE           reduce using rule 57 (estatuto -> func_extra .)
    RETURN          reduce using rule 57 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 57 (estatuto -> func_extra .)


state 87

    (58) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 105


state 88

    (60) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> ID . LPAR exp llamada_void_2 RPAR SEMICOLON
    (42) variable -> ID . variable_2 variable_point
    (44) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (45) variable_2 -> . empty
    (145) empty -> .

    LPAR            shift and go to state 106
    L_S_BRACKET     shift and go to state 108
    EQUAL           reduce using rule 145 (empty -> .)

    variable_2                     shift and go to state 107
    empty                          shift and go to state 109

state 89

    (66) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 110


state 90

    (68) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 111


state 91

    (74) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 112


state 92

    (82) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 113


state 93

    (89) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (92) while_point -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)

    while_point                    shift and go to state 114
    empty                          shift and go to state 115

state 94

    (95) return -> RETURN . LPAR exp check_valid_func RPAR SEMICOLON

    LPAR            shift and go to state 116


state 95

    (97) func_extra -> empty .

    ID              reduce using rule 97 (func_extra -> empty .)
    READ            reduce using rule 97 (func_extra -> empty .)
    WRITE           reduce using rule 97 (func_extra -> empty .)
    IF              reduce using rule 97 (func_extra -> empty .)
    FOR             reduce using rule 97 (func_extra -> empty .)
    WHILE           reduce using rule 97 (func_extra -> empty .)
    RETURN          reduce using rule 97 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 97 (func_extra -> empty .)


state 96

    (137) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 117


state 97

    (41) punto_param_2 -> empty .

    RPAR            reduce using rule 41 (punto_param_2 -> empty .)


state 98

    (36) param -> tipo_simple ID . punto_param param_2
    (40) punto_param -> . empty
    (145) empty -> .

    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)

    punto_param                    shift and go to state 118
    empty                          shift and go to state 119

state 99

    (30) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 120


state 100

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .

    $end            reduce using rule 9 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .)


state 101

    (11) main_final -> empty .

    $end            reduce using rule 11 (main_final -> empty .)


state 102

    (13) body_2 -> estatuto . body_2
    (13) body_2 -> . estatuto body_2
    (14) body_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 102
    body_2                         shift and go to state 121
    empty                          shift and go to state 104
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 103

    (12) body -> vars func_agrega_v estatuto body_2 .

    R_C_BRACKET     reduce using rule 12 (body -> vars func_agrega_v estatuto body_2 .)


state 104

    (14) body_2 -> empty .
    (97) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 14 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 14 (body_2 -> empty .)
    ID              reduce using rule 97 (func_extra -> empty .)
    READ            reduce using rule 97 (func_extra -> empty .)
    WRITE           reduce using rule 97 (func_extra -> empty .)
    IF              reduce using rule 97 (func_extra -> empty .)
    FOR             reduce using rule 97 (func_extra -> empty .)
    WHILE           reduce using rule 97 (func_extra -> empty .)
    RETURN          reduce using rule 97 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 97 (func_extra -> empty .) ]


state 105

    (58) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 122
    empty                          shift and go to state 123

state 106

    (60) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> ID LPAR . exp llamada_void_2 RPAR SEMICOLON
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 126
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 107

    (42) variable -> ID variable_2 . variable_point
    (43) variable_point -> . empty
    (145) empty -> .

    EQUAL           reduce using rule 145 (empty -> .)
    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    variable_point                 shift and go to state 137
    empty                          shift and go to state 138

state 108

    (44) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 139
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 109

    (45) variable_2 -> empty .

    EQUAL           reduce using rule 45 (variable_2 -> empty .)
    TIMES           reduce using rule 45 (variable_2 -> empty .)
    DIVIDE          reduce using rule 45 (variable_2 -> empty .)
    PLUS            reduce using rule 45 (variable_2 -> empty .)
    MINUS           reduce using rule 45 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 45 (variable_2 -> empty .)
    LESS            reduce using rule 45 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 45 (variable_2 -> empty .)
    GREATER         reduce using rule 45 (variable_2 -> empty .)
    COMPARE         reduce using rule 45 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 45 (variable_2 -> empty .)
    AND             reduce using rule 45 (variable_2 -> empty .)
    OR              reduce using rule 45 (variable_2 -> empty .)
    COMMA           reduce using rule 45 (variable_2 -> empty .)
    RPAR            reduce using rule 45 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 45 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 45 (variable_2 -> empty .)
    TO              reduce using rule 45 (variable_2 -> empty .)


state 110

    (66) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (42) variable -> . ID variable_2 variable_point

    ID              shift and go to state 141

    variable                       shift and go to state 140

state 111

    (68) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (69) write_2 -> . exp write_point
    (70) write_2 -> . CTE_S add_constant_s write_point
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 144
    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    write_2                        shift and go to state 142
    exp                            shift and go to state 143
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 112

    (74) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 145
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 113

    (82) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 146


state 114

    (89) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 147


state 115

    (92) while_point -> empty .

    LPAR            reduce using rule 92 (while_point -> empty .)


state 116

    (95) return -> RETURN LPAR . exp check_valid_func RPAR SEMICOLON
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 148
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 117

    (137) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 149


state 118

    (36) param -> tipo_simple ID punto_param . param_2
    (38) param_2 -> . COMMA param
    (39) param_2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 151
    RPAR            reduce using rule 145 (empty -> .)

    param_2                        shift and go to state 150
    empty                          shift and go to state 152

state 119

    (40) punto_param -> empty .

    COMMA           reduce using rule 40 (punto_param -> empty .)
    RPAR            reduce using rule 40 (punto_param -> empty .)


state 120

    (30) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (33) var_mat -> . empty
    (145) empty -> .

    SEMICOLON       reduce using rule 145 (empty -> .)

    var_mat                        shift and go to state 153
    empty                          shift and go to state 154

state 121

    (13) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 13 (body_2 -> estatuto body_2 .)


state 122

    (58) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    variable                       shift and go to state 132
    exp                            shift and go to state 155
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 123

    (128) add_operator -> empty .

    LPAR            reduce using rule 128 (add_operator -> empty .)
    ID              reduce using rule 128 (add_operator -> empty .)
    CTE_I           reduce using rule 128 (add_operator -> empty .)
    CTE_F           reduce using rule 128 (add_operator -> empty .)


state 124

    (42) variable -> ID . variable_2 variable_point
    (60) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (44) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (45) variable_2 -> . empty
    (145) empty -> .

    LPAR            shift and go to state 156
    L_S_BRACKET     shift and go to state 108
    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    variable_2                     shift and go to state 107
    empty                          shift and go to state 109

state 125

    (120) f -> LPAR . add_floor exp RPAR remove_floor
    (126) add_floor -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_floor                      shift and go to state 157
    empty                          shift and go to state 158

state 126

    (60) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (63) llamada_void -> ID LPAR exp . llamada_void_2 RPAR SEMICOLON
    (61) llamada_2 -> . COMMA exp llamada_2
    (62) llamada_2 -> . empty
    (64) llamada_void_2 -> . COMMA exp llamada_void_2
    (65) llamada_void_2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 161
    RPAR            reduce using rule 145 (empty -> .)

    llamada_2                      shift and go to state 159
    llamada_void_2                 shift and go to state 160
    empty                          shift and go to state 162

state 127

    (98) exp -> t_exp . add_operator_4 exp_2
    (132) add_operator_4 -> . empty
    (145) empty -> .

    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_operator_4                 shift and go to state 163
    empty                          shift and go to state 164

state 128

    (101) t_exp -> g_exp . add_operator_4 t_exp_2
    (132) add_operator_4 -> . empty
    (145) empty -> .

    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_operator_4                 shift and go to state 165
    empty                          shift and go to state 164

state 129

    (104) g_exp -> m_exp . g_exp_2 add_operator_3
    (105) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (106) g_exp_2 -> . LESS add_operator m_exp
    (107) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (108) g_exp_2 -> . GREATER add_operator m_exp
    (109) g_exp_2 -> . COMPARE add_operator m_exp
    (110) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (111) g_exp_2 -> . empty
    (145) empty -> .

    LESS_EQUAL      shift and go to state 167
    LESS            shift and go to state 168
    GREATER_EQUAL   shift and go to state 169
    GREATER         shift and go to state 170
    COMPARE         shift and go to state 171
    NOT_EQUAL       shift and go to state 172
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    g_exp_2                        shift and go to state 166
    empty                          shift and go to state 173

state 130

    (112) m_exp -> t . add_operator_2 m_exp_2
    (130) add_operator_2 -> . empty
    (145) empty -> .

    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_operator_2                 shift and go to state 174
    empty                          shift and go to state 175

state 131

    (116) t -> f . add_operator_1 t_2
    (129) add_operator_1 -> . empty
    (145) empty -> .

    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_operator_1                 shift and go to state 176
    empty                          shift and go to state 177

state 132

    (121) f -> variable .

    TIMES           reduce using rule 121 (f -> variable .)
    DIVIDE          reduce using rule 121 (f -> variable .)
    PLUS            reduce using rule 121 (f -> variable .)
    MINUS           reduce using rule 121 (f -> variable .)
    LESS_EQUAL      reduce using rule 121 (f -> variable .)
    LESS            reduce using rule 121 (f -> variable .)
    GREATER_EQUAL   reduce using rule 121 (f -> variable .)
    GREATER         reduce using rule 121 (f -> variable .)
    COMPARE         reduce using rule 121 (f -> variable .)
    NOT_EQUAL       reduce using rule 121 (f -> variable .)
    AND             reduce using rule 121 (f -> variable .)
    OR              reduce using rule 121 (f -> variable .)
    COMMA           reduce using rule 121 (f -> variable .)
    RPAR            reduce using rule 121 (f -> variable .)
    R_S_BRACKET     reduce using rule 121 (f -> variable .)
    SEMICOLON       reduce using rule 121 (f -> variable .)
    TO              reduce using rule 121 (f -> variable .)


state 133

    (122) f -> llamada .

    TIMES           reduce using rule 122 (f -> llamada .)
    DIVIDE          reduce using rule 122 (f -> llamada .)
    PLUS            reduce using rule 122 (f -> llamada .)
    MINUS           reduce using rule 122 (f -> llamada .)
    LESS_EQUAL      reduce using rule 122 (f -> llamada .)
    LESS            reduce using rule 122 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 122 (f -> llamada .)
    GREATER         reduce using rule 122 (f -> llamada .)
    COMPARE         reduce using rule 122 (f -> llamada .)
    NOT_EQUAL       reduce using rule 122 (f -> llamada .)
    AND             reduce using rule 122 (f -> llamada .)
    OR              reduce using rule 122 (f -> llamada .)
    COMMA           reduce using rule 122 (f -> llamada .)
    RPAR            reduce using rule 122 (f -> llamada .)
    R_S_BRACKET     reduce using rule 122 (f -> llamada .)
    SEMICOLON       reduce using rule 122 (f -> llamada .)
    TO              reduce using rule 122 (f -> llamada .)


state 134

    (123) f -> f_2 .

    TIMES           reduce using rule 123 (f -> f_2 .)
    DIVIDE          reduce using rule 123 (f -> f_2 .)
    PLUS            reduce using rule 123 (f -> f_2 .)
    MINUS           reduce using rule 123 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 123 (f -> f_2 .)
    LESS            reduce using rule 123 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 123 (f -> f_2 .)
    GREATER         reduce using rule 123 (f -> f_2 .)
    COMPARE         reduce using rule 123 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 123 (f -> f_2 .)
    AND             reduce using rule 123 (f -> f_2 .)
    OR              reduce using rule 123 (f -> f_2 .)
    COMMA           reduce using rule 123 (f -> f_2 .)
    RPAR            reduce using rule 123 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 123 (f -> f_2 .)
    SEMICOLON       reduce using rule 123 (f -> f_2 .)
    TO              reduce using rule 123 (f -> f_2 .)


state 135

    (124) f_2 -> CTE_I . add_constant_i
    (133) add_constant_i -> . empty
    (145) empty -> .

    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_constant_i                 shift and go to state 178
    empty                          shift and go to state 179

state 136

    (125) f_2 -> CTE_F . add_constant_f
    (135) add_constant_f -> . empty
    (145) empty -> .

    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_constant_f                 shift and go to state 180
    empty                          shift and go to state 181

state 137

    (42) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 42 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 42 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 42 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 42 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 42 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 42 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 42 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 42 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 42 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 42 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 42 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 42 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 42 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 42 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 42 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 42 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 42 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 42 (variable -> ID variable_2 variable_point .)


state 138

    (43) variable_point -> empty .

    EQUAL           reduce using rule 43 (variable_point -> empty .)
    TIMES           reduce using rule 43 (variable_point -> empty .)
    DIVIDE          reduce using rule 43 (variable_point -> empty .)
    PLUS            reduce using rule 43 (variable_point -> empty .)
    MINUS           reduce using rule 43 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 43 (variable_point -> empty .)
    LESS            reduce using rule 43 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 43 (variable_point -> empty .)
    GREATER         reduce using rule 43 (variable_point -> empty .)
    COMPARE         reduce using rule 43 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 43 (variable_point -> empty .)
    AND             reduce using rule 43 (variable_point -> empty .)
    OR              reduce using rule 43 (variable_point -> empty .)
    COMMA           reduce using rule 43 (variable_point -> empty .)
    RPAR            reduce using rule 43 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 43 (variable_point -> empty .)
    SEMICOLON       reduce using rule 43 (variable_point -> empty .)
    TO              reduce using rule 43 (variable_point -> empty .)


state 139

    (44) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 182


state 140

    (66) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (67) read_point -> . empty
    (145) empty -> .

    RPAR            reduce using rule 145 (empty -> .)

    read_point                     shift and go to state 183
    empty                          shift and go to state 184

state 141

    (42) variable -> ID . variable_2 variable_point
    (44) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (45) variable_2 -> . empty
    (145) empty -> .

    L_S_BRACKET     shift and go to state 108
    RPAR            reduce using rule 145 (empty -> .)

    variable_2                     shift and go to state 107
    empty                          shift and go to state 109

state 142

    (68) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (71) write_3 -> . COMMA write_2 write_3
    (72) write_3 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 186
    RPAR            reduce using rule 145 (empty -> .)

    write_3                        shift and go to state 185
    empty                          shift and go to state 187

state 143

    (69) write_2 -> exp . write_point
    (73) write_point -> . empty
    (145) empty -> .

    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)

    write_point                    shift and go to state 188
    empty                          shift and go to state 189

state 144

    (70) write_2 -> CTE_S . add_constant_s write_point
    (134) add_constant_s -> . empty
    (145) empty -> .

    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)

    add_constant_s                 shift and go to state 190
    empty                          shift and go to state 191

state 145

    (74) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (79) if_point -> . empty
    (145) empty -> .

    RPAR            reduce using rule 145 (empty -> .)

    if_point                       shift and go to state 192
    empty                          shift and go to state 193

state 146

    (82) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (85) for_point_1 -> . empty
    (145) empty -> .

    EQUAL           reduce using rule 145 (empty -> .)

    for_point_1                    shift and go to state 194
    empty                          shift and go to state 195

state 147

    (89) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 196
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 148

    (95) return -> RETURN LPAR exp . check_valid_func RPAR SEMICOLON
    (96) check_valid_func -> . empty
    (145) empty -> .

    RPAR            reduce using rule 145 (empty -> .)

    check_valid_func               shift and go to state 197
    empty                          shift and go to state 198

state 149

    (137) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (12) body -> . vars func_agrega_v estatuto body_2
    (19) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 199
    vars                           shift and go to state 62

state 150

    (36) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 36 (param -> tipo_simple ID punto_param param_2 .)


state 151

    (38) param_2 -> COMMA . param
    (36) param -> . tipo_simple ID punto_param param_2
    (37) param -> . empty
    (15) tipo_simple -> . INT
    (16) tipo_simple -> . FLOAT
    (17) tipo_simple -> . CHAR
    (145) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 145 (empty -> .)

    param                          shift and go to state 200
    tipo_simple                    shift and go to state 69
    empty                          shift and go to state 70

state 152

    (39) param_2 -> empty .

    RPAR            reduce using rule 39 (param_2 -> empty .)


state 153

    (30) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 30 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 154

    (33) var_mat -> empty .

    SEMICOLON       reduce using rule 33 (var_mat -> empty .)


state 155

    (58) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (59) asigna_point -> . empty
    (145) empty -> .

    SEMICOLON       reduce using rule 145 (empty -> .)

    asigna_point                   shift and go to state 201
    empty                          shift and go to state 202

state 156

    (60) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 203
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 157

    (120) f -> LPAR add_floor . exp RPAR remove_floor
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 204
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 158

    (126) add_floor -> empty .

    LPAR            reduce using rule 126 (add_floor -> empty .)
    ID              reduce using rule 126 (add_floor -> empty .)
    CTE_I           reduce using rule 126 (add_floor -> empty .)
    CTE_F           reduce using rule 126 (add_floor -> empty .)


state 159

    (60) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 205


state 160

    (63) llamada_void -> ID LPAR exp llamada_void_2 . RPAR SEMICOLON

    RPAR            shift and go to state 206


state 161

    (61) llamada_2 -> COMMA . exp llamada_2
    (64) llamada_void_2 -> COMMA . exp llamada_void_2
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 207
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 162

    (62) llamada_2 -> empty .
    (65) llamada_void_2 -> empty .

  ! reduce/reduce conflict for RPAR resolved using rule 62 (llamada_2 -> empty .)
    RPAR            reduce using rule 62 (llamada_2 -> empty .)

  ! RPAR            [ reduce using rule 65 (llamada_void_2 -> empty .) ]


state 163

    (98) exp -> t_exp add_operator_4 . exp_2
    (99) exp_2 -> . OR add_operator exp
    (100) exp_2 -> . empty
    (145) empty -> .

    OR              shift and go to state 209
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    exp_2                          shift and go to state 208
    empty                          shift and go to state 210

state 164

    (132) add_operator_4 -> empty .

    OR              reduce using rule 132 (add_operator_4 -> empty .)
    COMMA           reduce using rule 132 (add_operator_4 -> empty .)
    RPAR            reduce using rule 132 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 132 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 132 (add_operator_4 -> empty .)
    TO              reduce using rule 132 (add_operator_4 -> empty .)
    AND             reduce using rule 132 (add_operator_4 -> empty .)


state 165

    (101) t_exp -> g_exp add_operator_4 . t_exp_2
    (102) t_exp_2 -> . AND add_operator t_exp
    (103) t_exp_2 -> . empty
    (145) empty -> .

    AND             shift and go to state 212
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    t_exp_2                        shift and go to state 211
    empty                          shift and go to state 213

state 166

    (104) g_exp -> m_exp g_exp_2 . add_operator_3
    (131) add_operator_3 -> . empty
    (145) empty -> .

    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    add_operator_3                 shift and go to state 214
    empty                          shift and go to state 215

state 167

    (105) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 216
    empty                          shift and go to state 123

state 168

    (106) g_exp_2 -> LESS . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 217
    empty                          shift and go to state 123

state 169

    (107) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 218
    empty                          shift and go to state 123

state 170

    (108) g_exp_2 -> GREATER . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 219
    empty                          shift and go to state 123

state 171

    (109) g_exp_2 -> COMPARE . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 220
    empty                          shift and go to state 123

state 172

    (110) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 221
    empty                          shift and go to state 123

state 173

    (111) g_exp_2 -> empty .

    AND             reduce using rule 111 (g_exp_2 -> empty .)
    OR              reduce using rule 111 (g_exp_2 -> empty .)
    COMMA           reduce using rule 111 (g_exp_2 -> empty .)
    RPAR            reduce using rule 111 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 111 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 111 (g_exp_2 -> empty .)
    TO              reduce using rule 111 (g_exp_2 -> empty .)


state 174

    (112) m_exp -> t add_operator_2 . m_exp_2
    (113) m_exp_2 -> . PLUS add_operator m_exp
    (114) m_exp_2 -> . MINUS add_operator m_exp
    (115) m_exp_2 -> . empty
    (145) empty -> .

    PLUS            shift and go to state 223
    MINUS           shift and go to state 224
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    m_exp_2                        shift and go to state 222
    empty                          shift and go to state 225

state 175

    (130) add_operator_2 -> empty .

    PLUS            reduce using rule 130 (add_operator_2 -> empty .)
    MINUS           reduce using rule 130 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 130 (add_operator_2 -> empty .)
    LESS            reduce using rule 130 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 130 (add_operator_2 -> empty .)
    GREATER         reduce using rule 130 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 130 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 130 (add_operator_2 -> empty .)
    AND             reduce using rule 130 (add_operator_2 -> empty .)
    OR              reduce using rule 130 (add_operator_2 -> empty .)
    COMMA           reduce using rule 130 (add_operator_2 -> empty .)
    RPAR            reduce using rule 130 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 130 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 130 (add_operator_2 -> empty .)
    TO              reduce using rule 130 (add_operator_2 -> empty .)


state 176

    (116) t -> f add_operator_1 . t_2
    (117) t_2 -> . TIMES add_operator t
    (118) t_2 -> . DIVIDE add_operator t
    (119) t_2 -> . empty
    (145) empty -> .

    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    t_2                            shift and go to state 226
    empty                          shift and go to state 229

state 177

    (129) add_operator_1 -> empty .

    TIMES           reduce using rule 129 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 129 (add_operator_1 -> empty .)
    PLUS            reduce using rule 129 (add_operator_1 -> empty .)
    MINUS           reduce using rule 129 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 129 (add_operator_1 -> empty .)
    LESS            reduce using rule 129 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 129 (add_operator_1 -> empty .)
    GREATER         reduce using rule 129 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 129 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 129 (add_operator_1 -> empty .)
    AND             reduce using rule 129 (add_operator_1 -> empty .)
    OR              reduce using rule 129 (add_operator_1 -> empty .)
    COMMA           reduce using rule 129 (add_operator_1 -> empty .)
    RPAR            reduce using rule 129 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 129 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 129 (add_operator_1 -> empty .)
    TO              reduce using rule 129 (add_operator_1 -> empty .)


state 178

    (124) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 124 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 124 (f_2 -> CTE_I add_constant_i .)


state 179

    (133) add_constant_i -> empty .

    TIMES           reduce using rule 133 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 133 (add_constant_i -> empty .)
    PLUS            reduce using rule 133 (add_constant_i -> empty .)
    MINUS           reduce using rule 133 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 133 (add_constant_i -> empty .)
    LESS            reduce using rule 133 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 133 (add_constant_i -> empty .)
    GREATER         reduce using rule 133 (add_constant_i -> empty .)
    COMPARE         reduce using rule 133 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 133 (add_constant_i -> empty .)
    AND             reduce using rule 133 (add_constant_i -> empty .)
    OR              reduce using rule 133 (add_constant_i -> empty .)
    COMMA           reduce using rule 133 (add_constant_i -> empty .)
    RPAR            reduce using rule 133 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 133 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 133 (add_constant_i -> empty .)
    TO              reduce using rule 133 (add_constant_i -> empty .)


state 180

    (125) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 125 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 125 (f_2 -> CTE_F add_constant_f .)


state 181

    (135) add_constant_f -> empty .

    TIMES           reduce using rule 135 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 135 (add_constant_f -> empty .)
    PLUS            reduce using rule 135 (add_constant_f -> empty .)
    MINUS           reduce using rule 135 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 135 (add_constant_f -> empty .)
    LESS            reduce using rule 135 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 135 (add_constant_f -> empty .)
    GREATER         reduce using rule 135 (add_constant_f -> empty .)
    COMPARE         reduce using rule 135 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 135 (add_constant_f -> empty .)
    AND             reduce using rule 135 (add_constant_f -> empty .)
    OR              reduce using rule 135 (add_constant_f -> empty .)
    COMMA           reduce using rule 135 (add_constant_f -> empty .)
    RPAR            reduce using rule 135 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 135 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 135 (add_constant_f -> empty .)
    TO              reduce using rule 135 (add_constant_f -> empty .)


state 182

    (44) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (46) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (47) variable_3 -> . empty
    (145) empty -> .

    L_S_BRACKET     shift and go to state 230
    EQUAL           reduce using rule 145 (empty -> .)
    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    variable_3                     shift and go to state 231
    empty                          shift and go to state 232

state 183

    (66) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 233


state 184

    (67) read_point -> empty .

    RPAR            reduce using rule 67 (read_point -> empty .)


state 185

    (68) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 234


state 186

    (71) write_3 -> COMMA . write_2 write_3
    (69) write_2 -> . exp write_point
    (70) write_2 -> . CTE_S add_constant_s write_point
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 144
    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    write_2                        shift and go to state 235
    exp                            shift and go to state 143
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 187

    (72) write_3 -> empty .

    RPAR            reduce using rule 72 (write_3 -> empty .)


state 188

    (69) write_2 -> exp write_point .

    COMMA           reduce using rule 69 (write_2 -> exp write_point .)
    RPAR            reduce using rule 69 (write_2 -> exp write_point .)


state 189

    (73) write_point -> empty .

    COMMA           reduce using rule 73 (write_point -> empty .)
    RPAR            reduce using rule 73 (write_point -> empty .)


state 190

    (70) write_2 -> CTE_S add_constant_s . write_point
    (73) write_point -> . empty
    (145) empty -> .

    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)

    write_point                    shift and go to state 236
    empty                          shift and go to state 189

state 191

    (134) add_constant_s -> empty .

    COMMA           reduce using rule 134 (add_constant_s -> empty .)
    RPAR            reduce using rule 134 (add_constant_s -> empty .)


state 192

    (74) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 237


state 193

    (79) if_point -> empty .

    RPAR            reduce using rule 79 (if_point -> empty .)


state 194

    (82) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 238


state 195

    (85) for_point_1 -> empty .

    EQUAL           reduce using rule 85 (for_point_1 -> empty .)


state 196

    (89) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 239


state 197

    (95) return -> RETURN LPAR exp check_valid_func . RPAR SEMICOLON

    RPAR            shift and go to state 240


state 198

    (96) check_valid_func -> empty .

    RPAR            reduce using rule 96 (check_valid_func -> empty .)


state 199

    (137) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 241


state 200

    (38) param_2 -> COMMA param .

    RPAR            reduce using rule 38 (param_2 -> COMMA param .)


state 201

    (58) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 242


state 202

    (59) asigna_point -> empty .

    SEMICOLON       reduce using rule 59 (asigna_point -> empty .)


state 203

    (60) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (61) llamada_2 -> . COMMA exp llamada_2
    (62) llamada_2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 243
    RPAR            reduce using rule 145 (empty -> .)

    llamada_2                      shift and go to state 159
    empty                          shift and go to state 244

state 204

    (120) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 245


state 205

    (60) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 246


state 206

    (63) llamada_void -> ID LPAR exp llamada_void_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 247


state 207

    (61) llamada_2 -> COMMA exp . llamada_2
    (64) llamada_void_2 -> COMMA exp . llamada_void_2
    (61) llamada_2 -> . COMMA exp llamada_2
    (62) llamada_2 -> . empty
    (64) llamada_void_2 -> . COMMA exp llamada_void_2
    (65) llamada_void_2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 161
    RPAR            reduce using rule 145 (empty -> .)

    llamada_2                      shift and go to state 248
    llamada_void_2                 shift and go to state 249
    empty                          shift and go to state 162

state 208

    (98) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 98 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 98 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 98 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 98 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 98 (exp -> t_exp add_operator_4 exp_2 .)


state 209

    (99) exp_2 -> OR . add_operator exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 250
    empty                          shift and go to state 123

state 210

    (100) exp_2 -> empty .

    COMMA           reduce using rule 100 (exp_2 -> empty .)
    RPAR            reduce using rule 100 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 100 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 100 (exp_2 -> empty .)
    TO              reduce using rule 100 (exp_2 -> empty .)


state 211

    (101) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 101 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 101 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 101 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 101 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 101 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 101 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 212

    (102) t_exp_2 -> AND . add_operator t_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 251
    empty                          shift and go to state 123

state 213

    (103) t_exp_2 -> empty .

    OR              reduce using rule 103 (t_exp_2 -> empty .)
    COMMA           reduce using rule 103 (t_exp_2 -> empty .)
    RPAR            reduce using rule 103 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 103 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 103 (t_exp_2 -> empty .)
    TO              reduce using rule 103 (t_exp_2 -> empty .)


state 214

    (104) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 104 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 215

    (131) add_operator_3 -> empty .

    AND             reduce using rule 131 (add_operator_3 -> empty .)
    OR              reduce using rule 131 (add_operator_3 -> empty .)
    COMMA           reduce using rule 131 (add_operator_3 -> empty .)
    RPAR            reduce using rule 131 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 131 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 131 (add_operator_3 -> empty .)
    TO              reduce using rule 131 (add_operator_3 -> empty .)


state 216

    (105) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 252
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 217

    (106) g_exp_2 -> LESS add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 253
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 218

    (107) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 254
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 219

    (108) g_exp_2 -> GREATER add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 255
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 220

    (109) g_exp_2 -> COMPARE add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 256
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 221

    (110) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 257
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 222

    (112) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 112 (m_exp -> t add_operator_2 m_exp_2 .)


state 223

    (113) m_exp_2 -> PLUS . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 258
    empty                          shift and go to state 123

state 224

    (114) m_exp_2 -> MINUS . add_operator m_exp
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 259
    empty                          shift and go to state 123

state 225

    (115) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 115 (m_exp_2 -> empty .)
    LESS            reduce using rule 115 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 115 (m_exp_2 -> empty .)
    GREATER         reduce using rule 115 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 115 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 115 (m_exp_2 -> empty .)
    AND             reduce using rule 115 (m_exp_2 -> empty .)
    OR              reduce using rule 115 (m_exp_2 -> empty .)
    COMMA           reduce using rule 115 (m_exp_2 -> empty .)
    RPAR            reduce using rule 115 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 115 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 115 (m_exp_2 -> empty .)
    TO              reduce using rule 115 (m_exp_2 -> empty .)


state 226

    (116) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 116 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 116 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 116 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 116 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 116 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 116 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 116 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 116 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 116 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 116 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 116 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 116 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 116 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 116 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 116 (t -> f add_operator_1 t_2 .)


state 227

    (117) t_2 -> TIMES . add_operator t
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 260
    empty                          shift and go to state 123

state 228

    (118) t_2 -> DIVIDE . add_operator t
    (128) add_operator -> . empty
    (145) empty -> .

    LPAR            reduce using rule 145 (empty -> .)
    ID              reduce using rule 145 (empty -> .)
    CTE_I           reduce using rule 145 (empty -> .)
    CTE_F           reduce using rule 145 (empty -> .)

    add_operator                   shift and go to state 261
    empty                          shift and go to state 123

state 229

    (119) t_2 -> empty .

    PLUS            reduce using rule 119 (t_2 -> empty .)
    MINUS           reduce using rule 119 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 119 (t_2 -> empty .)
    LESS            reduce using rule 119 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 119 (t_2 -> empty .)
    GREATER         reduce using rule 119 (t_2 -> empty .)
    COMPARE         reduce using rule 119 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 119 (t_2 -> empty .)
    AND             reduce using rule 119 (t_2 -> empty .)
    OR              reduce using rule 119 (t_2 -> empty .)
    COMMA           reduce using rule 119 (t_2 -> empty .)
    RPAR            reduce using rule 119 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 119 (t_2 -> empty .)
    SEMICOLON       reduce using rule 119 (t_2 -> empty .)
    TO              reduce using rule 119 (t_2 -> empty .)


state 230

    (46) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 262
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 231

    (44) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 44 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 232

    (47) variable_3 -> empty .

    EQUAL           reduce using rule 47 (variable_3 -> empty .)
    TIMES           reduce using rule 47 (variable_3 -> empty .)
    DIVIDE          reduce using rule 47 (variable_3 -> empty .)
    PLUS            reduce using rule 47 (variable_3 -> empty .)
    MINUS           reduce using rule 47 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 47 (variable_3 -> empty .)
    LESS            reduce using rule 47 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 47 (variable_3 -> empty .)
    GREATER         reduce using rule 47 (variable_3 -> empty .)
    COMPARE         reduce using rule 47 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 47 (variable_3 -> empty .)
    AND             reduce using rule 47 (variable_3 -> empty .)
    OR              reduce using rule 47 (variable_3 -> empty .)
    COMMA           reduce using rule 47 (variable_3 -> empty .)
    RPAR            reduce using rule 47 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 47 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 47 (variable_3 -> empty .)
    TO              reduce using rule 47 (variable_3 -> empty .)


state 233

    (66) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 263


state 234

    (68) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 264


state 235

    (71) write_3 -> COMMA write_2 . write_3
    (71) write_3 -> . COMMA write_2 write_3
    (72) write_3 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 186
    RPAR            reduce using rule 145 (empty -> .)

    write_3                        shift and go to state 265
    empty                          shift and go to state 187

state 236

    (70) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 70 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 70 (write_2 -> CTE_S add_constant_s write_point .)


state 237

    (74) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 266


state 238

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 267
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 239

    (89) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (93) while_point_2 -> . empty
    (145) empty -> .

    L_C_BRACKET     reduce using rule 145 (empty -> .)

    while_point_2                  shift and go to state 268
    empty                          shift and go to state 269

state 240

    (95) return -> RETURN LPAR exp check_valid_func RPAR . SEMICOLON

    SEMICOLON       shift and go to state 270


state 241

    (137) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (144) final_func_point -> . empty
    (145) empty -> .

    SEMICOLON       reduce using rule 145 (empty -> .)

    final_func_point               shift and go to state 271
    empty                          shift and go to state 272

state 242

    (58) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 58 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 243

    (61) llamada_2 -> COMMA . exp llamada_2
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 273
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 244

    (62) llamada_2 -> empty .

    RPAR            reduce using rule 62 (llamada_2 -> empty .)


state 245

    (120) f -> LPAR add_floor exp RPAR . remove_floor
    (127) remove_floor -> . empty
    (145) empty -> .

    TIMES           reduce using rule 145 (empty -> .)
    DIVIDE          reduce using rule 145 (empty -> .)
    PLUS            reduce using rule 145 (empty -> .)
    MINUS           reduce using rule 145 (empty -> .)
    LESS_EQUAL      reduce using rule 145 (empty -> .)
    LESS            reduce using rule 145 (empty -> .)
    GREATER_EQUAL   reduce using rule 145 (empty -> .)
    GREATER         reduce using rule 145 (empty -> .)
    COMPARE         reduce using rule 145 (empty -> .)
    NOT_EQUAL       reduce using rule 145 (empty -> .)
    AND             reduce using rule 145 (empty -> .)
    OR              reduce using rule 145 (empty -> .)
    COMMA           reduce using rule 145 (empty -> .)
    RPAR            reduce using rule 145 (empty -> .)
    R_S_BRACKET     reduce using rule 145 (empty -> .)
    SEMICOLON       reduce using rule 145 (empty -> .)
    TO              reduce using rule 145 (empty -> .)

    remove_floor                   shift and go to state 274
    empty                          shift and go to state 275

state 246

    (60) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 60 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 247

    (63) llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .

    ID              reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    READ            reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    IF              reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    FOR             reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 63 (llamada_void -> ID LPAR exp llamada_void_2 RPAR SEMICOLON .)


state 248

    (61) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 61 (llamada_2 -> COMMA exp llamada_2 .)


state 249

    (64) llamada_void_2 -> COMMA exp llamada_void_2 .

    RPAR            reduce using rule 64 (llamada_void_2 -> COMMA exp llamada_void_2 .)


state 250

    (99) exp_2 -> OR add_operator . exp
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 276
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 251

    (102) t_exp_2 -> AND add_operator . t_exp
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    t_exp                          shift and go to state 277
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 252

    (105) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 105 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 253

    (106) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 106 (g_exp_2 -> LESS add_operator m_exp .)


state 254

    (107) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 107 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 255

    (108) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 108 (g_exp_2 -> GREATER add_operator m_exp .)


state 256

    (109) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 109 (g_exp_2 -> COMPARE add_operator m_exp .)


state 257

    (110) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 110 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 258

    (113) m_exp_2 -> PLUS add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 278
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 259

    (114) m_exp_2 -> MINUS add_operator . m_exp
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 279
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 260

    (117) t_2 -> TIMES add_operator . t
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    t                              shift and go to state 280
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 261

    (118) t_2 -> DIVIDE add_operator . t
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    t                              shift and go to state 281
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 262

    (46) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 282


state 263

    (66) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 66 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 264

    (68) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 68 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 265

    (71) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 71 (write_3 -> COMMA write_2 write_3 .)


state 266

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point
    (145) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 145 (empty -> .)

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 283
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 267

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (86) for_point_2 -> . empty
    (145) empty -> .

    TO              reduce using rule 145 (empty -> .)

    for_point_2                    shift and go to state 284
    empty                          shift and go to state 285

state 268

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 286


state 269

    (93) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 93 (while_point_2 -> empty .)


state 270

    (95) return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .

    ID              reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    READ            reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WRITE           reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    IF              reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    FOR             reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WHILE           reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    RETURN          reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 95 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)


state 271

    (137) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 137 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 272

    (144) final_func_point -> empty .

    SEMICOLON       reduce using rule 144 (final_func_point -> empty .)


state 273

    (61) llamada_2 -> COMMA exp . llamada_2
    (61) llamada_2 -> . COMMA exp llamada_2
    (62) llamada_2 -> . empty
    (145) empty -> .

    COMMA           shift and go to state 243
    RPAR            reduce using rule 145 (empty -> .)

    llamada_2                      shift and go to state 248
    empty                          shift and go to state 244

state 274

    (120) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 120 (f -> LPAR add_floor exp RPAR remove_floor .)


state 275

    (127) remove_floor -> empty .

    TIMES           reduce using rule 127 (remove_floor -> empty .)
    DIVIDE          reduce using rule 127 (remove_floor -> empty .)
    PLUS            reduce using rule 127 (remove_floor -> empty .)
    MINUS           reduce using rule 127 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 127 (remove_floor -> empty .)
    LESS            reduce using rule 127 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 127 (remove_floor -> empty .)
    GREATER         reduce using rule 127 (remove_floor -> empty .)
    COMPARE         reduce using rule 127 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 127 (remove_floor -> empty .)
    AND             reduce using rule 127 (remove_floor -> empty .)
    OR              reduce using rule 127 (remove_floor -> empty .)
    COMMA           reduce using rule 127 (remove_floor -> empty .)
    RPAR            reduce using rule 127 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 127 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 127 (remove_floor -> empty .)
    TO              reduce using rule 127 (remove_floor -> empty .)


state 276

    (99) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 99 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 99 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 99 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 99 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 99 (exp_2 -> OR add_operator exp .)


state 277

    (102) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 102 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 102 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 102 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 102 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 102 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 102 (t_exp_2 -> AND add_operator t_exp .)


state 278

    (113) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 113 (m_exp_2 -> PLUS add_operator m_exp .)


state 279

    (114) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 114 (m_exp_2 -> MINUS add_operator m_exp .)


state 280

    (117) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 117 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 117 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 117 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 117 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 117 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 117 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 117 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 117 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 117 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 117 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 117 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 117 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 117 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 117 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 117 (t_2 -> TIMES add_operator t .)


state 281

    (118) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 118 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 118 (t_2 -> DIVIDE add_operator t .)


state 282

    (46) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 46 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 283

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) if_2 -> . estatuto if_2
    (76) if_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 287
    if_2                           shift and go to state 288
    empty                          shift and go to state 289
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 284

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 290


state 285

    (86) for_point_2 -> empty .

    TO              reduce using rule 86 (for_point_2 -> empty .)


state 286

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point
    (145) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 145 (empty -> .)

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 291
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 287

    (75) if_2 -> estatuto . if_2
    (75) if_2 -> . estatuto if_2
    (76) if_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 287
    if_2                           shift and go to state 292
    empty                          shift and go to state 289
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 288

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 293


state 289

    (76) if_2 -> empty .
    (97) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 76 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 76 (if_2 -> empty .)
    ID              reduce using rule 97 (func_extra -> empty .)
    READ            reduce using rule 97 (func_extra -> empty .)
    WRITE           reduce using rule 97 (func_extra -> empty .)
    IF              reduce using rule 97 (func_extra -> empty .)
    FOR             reduce using rule 97 (func_extra -> empty .)
    WHILE           reduce using rule 97 (func_extra -> empty .)
    RETURN          reduce using rule 97 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 97 (func_extra -> empty .) ]


state 290

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (98) exp -> . t_exp add_operator_4 exp_2
    (101) t_exp -> . g_exp add_operator_4 t_exp_2
    (104) g_exp -> . m_exp g_exp_2 add_operator_3
    (112) m_exp -> . t add_operator_2 m_exp_2
    (116) t -> . f add_operator_1 t_2
    (120) f -> . LPAR add_floor exp RPAR remove_floor
    (121) f -> . variable
    (122) f -> . llamada
    (123) f -> . f_2
    (42) variable -> . ID variable_2 variable_point
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (124) f_2 -> . CTE_I add_constant_i
    (125) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 294
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 291

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) while_l_2 -> . estatuto while_l_2
    (91) while_l_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 295
    while_l_2                      shift and go to state 296
    empty                          shift and go to state 297
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 292

    (75) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 75 (if_2 -> estatuto if_2 .)


state 293

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (77) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (78) if_3 -> . empty
    (145) empty -> .

    ELSE            shift and go to state 299
    SEMICOLON       reduce using rule 145 (empty -> .)

    if_3                           shift and go to state 298
    empty                          shift and go to state 300

state 294

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (87) for_point_3 -> . empty
    (145) empty -> .

    RPAR            reduce using rule 145 (empty -> .)

    for_point_3                    shift and go to state 301
    empty                          shift and go to state 302

state 295

    (90) while_l_2 -> estatuto . while_l_2
    (90) while_l_2 -> . estatuto while_l_2
    (91) while_l_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 295
    while_l_2                      shift and go to state 303
    empty                          shift and go to state 297
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 296

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 304


state 297

    (91) while_l_2 -> empty .
    (97) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 91 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 91 (while_l_2 -> empty .)
    ID              reduce using rule 97 (func_extra -> empty .)
    READ            reduce using rule 97 (func_extra -> empty .)
    WRITE           reduce using rule 97 (func_extra -> empty .)
    IF              reduce using rule 97 (func_extra -> empty .)
    FOR             reduce using rule 97 (func_extra -> empty .)
    WHILE           reduce using rule 97 (func_extra -> empty .)
    RETURN          reduce using rule 97 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 97 (func_extra -> empty .) ]


state 298

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 305


state 299

    (77) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (81) if_point_3 -> . empty
    (145) empty -> .

    L_C_BRACKET     reduce using rule 145 (empty -> .)

    if_point_3                     shift and go to state 306
    empty                          shift and go to state 307

state 300

    (78) if_3 -> empty .

    SEMICOLON       reduce using rule 78 (if_3 -> empty .)


state 301

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 308


state 302

    (87) for_point_3 -> empty .

    RPAR            reduce using rule 87 (for_point_3 -> empty .)


state 303

    (90) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 90 (while_l_2 -> estatuto while_l_2 .)


state 304

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 309


state 305

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (80) if_point_2 -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    WRITE           reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    FOR             reduce using rule 145 (empty -> .)
    WHILE           reduce using rule 145 (empty -> .)
    RETURN          reduce using rule 145 (empty -> .)
    R_C_BRACKET     reduce using rule 145 (empty -> .)

    if_point_2                     shift and go to state 310
    empty                          shift and go to state 311

state 306

    (77) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 312


state 307

    (81) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 81 (if_point_3 -> empty .)


state 308

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 313


state 309

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (94) while_point_3 -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    WRITE           reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    FOR             reduce using rule 145 (empty -> .)
    WHILE           reduce using rule 145 (empty -> .)
    RETURN          reduce using rule 145 (empty -> .)
    R_C_BRACKET     reduce using rule 145 (empty -> .)

    while_point_3                  shift and go to state 314
    empty                          shift and go to state 315

state 310

    (74) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 74 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 311

    (80) if_point_2 -> empty .

    ID              reduce using rule 80 (if_point_2 -> empty .)
    READ            reduce using rule 80 (if_point_2 -> empty .)
    WRITE           reduce using rule 80 (if_point_2 -> empty .)
    IF              reduce using rule 80 (if_point_2 -> empty .)
    FOR             reduce using rule 80 (if_point_2 -> empty .)
    WHILE           reduce using rule 80 (if_point_2 -> empty .)
    RETURN          reduce using rule 80 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 80 (if_point_2 -> empty .)


state 312

    (77) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point
    (145) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 145 (empty -> .)

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 316
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 313

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point
    (145) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94
    R_C_BRACKET     reduce using rule 145 (empty -> .)

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 317
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87
    empty                          shift and go to state 95

state 314

    (89) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 89 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 315

    (94) while_point_3 -> empty .

    ID              reduce using rule 94 (while_point_3 -> empty .)
    READ            reduce using rule 94 (while_point_3 -> empty .)
    WRITE           reduce using rule 94 (while_point_3 -> empty .)
    IF              reduce using rule 94 (while_point_3 -> empty .)
    FOR             reduce using rule 94 (while_point_3 -> empty .)
    WHILE           reduce using rule 94 (while_point_3 -> empty .)
    RETURN          reduce using rule 94 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 94 (while_point_3 -> empty .)


state 316

    (77) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (75) if_2 -> . estatuto if_2
    (76) if_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 287
    if_2                           shift and go to state 318
    empty                          shift and go to state 289
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 317

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) for_l_2 -> . estatuto for_l_2
    (84) for_l_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 319
    for_l_2                        shift and go to state 320
    empty                          shift and go to state 321
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 318

    (77) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 322


state 319

    (83) for_l_2 -> estatuto . for_l_2
    (83) for_l_2 -> . estatuto for_l_2
    (84) for_l_2 -> . empty
    (48) estatuto -> . asigna
    (49) estatuto -> . llamada
    (50) estatuto -> . llamada_void
    (51) estatuto -> . read
    (52) estatuto -> . write
    (53) estatuto -> . if_1
    (54) estatuto -> . for_l
    (55) estatuto -> . while_l
    (56) estatuto -> . return
    (57) estatuto -> . func_extra
    (145) empty -> .
    (58) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (60) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (63) llamada_void -> . ID LPAR exp llamada_void_2 RPAR SEMICOLON
    (66) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (68) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (74) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (82) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (89) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (95) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (97) func_extra -> . empty
    (42) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    R_C_BRACKET     reduce using rule 145 (empty -> .)
    ID              shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    FOR             shift and go to state 92
    WHILE           shift and go to state 93
    RETURN          shift and go to state 94

  ! ID              [ reduce using rule 145 (empty -> .) ]
  ! READ            [ reduce using rule 145 (empty -> .) ]
  ! WRITE           [ reduce using rule 145 (empty -> .) ]
  ! IF              [ reduce using rule 145 (empty -> .) ]
  ! FOR             [ reduce using rule 145 (empty -> .) ]
  ! WHILE           [ reduce using rule 145 (empty -> .) ]
  ! RETURN          [ reduce using rule 145 (empty -> .) ]

    estatuto                       shift and go to state 319
    for_l_2                        shift and go to state 323
    empty                          shift and go to state 321
    asigna                         shift and go to state 77
    llamada                        shift and go to state 78
    llamada_void                   shift and go to state 79
    read                           shift and go to state 80
    write                          shift and go to state 81
    if_1                           shift and go to state 82
    for_l                          shift and go to state 83
    while_l                        shift and go to state 84
    return                         shift and go to state 85
    func_extra                     shift and go to state 86
    variable                       shift and go to state 87

state 320

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 324


state 321

    (84) for_l_2 -> empty .
    (97) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 84 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 84 (for_l_2 -> empty .)
    ID              reduce using rule 97 (func_extra -> empty .)
    READ            reduce using rule 97 (func_extra -> empty .)
    WRITE           reduce using rule 97 (func_extra -> empty .)
    IF              reduce using rule 97 (func_extra -> empty .)
    FOR             reduce using rule 97 (func_extra -> empty .)
    WHILE           reduce using rule 97 (func_extra -> empty .)
    RETURN          reduce using rule 97 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 97 (func_extra -> empty .) ]


state 322

    (77) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 77 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 323

    (83) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 83 (for_l_2 -> estatuto for_l_2 .)


state 324

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 325


state 325

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (88) for_point_4 -> . empty
    (145) empty -> .

    ID              reduce using rule 145 (empty -> .)
    READ            reduce using rule 145 (empty -> .)
    WRITE           reduce using rule 145 (empty -> .)
    IF              reduce using rule 145 (empty -> .)
    FOR             reduce using rule 145 (empty -> .)
    WHILE           reduce using rule 145 (empty -> .)
    RETURN          reduce using rule 145 (empty -> .)
    R_C_BRACKET     reduce using rule 145 (empty -> .)

    for_point_4                    shift and go to state 326
    empty                          shift and go to state 327

state 326

    (82) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 82 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 327

    (88) for_point_4 -> empty .

    ID              reduce using rule 88 (for_point_4 -> empty .)
    READ            reduce using rule 88 (for_point_4 -> empty .)
    WRITE           reduce using rule 88 (for_point_4 -> empty .)
    IF              reduce using rule 88 (for_point_4 -> empty .)
    FOR             reduce using rule 88 (for_point_4 -> empty .)
    WHILE           reduce using rule 88 (for_point_4 -> empty .)
    RETURN          reduce using rule 88 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 88 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 66 resolved as shift
WARNING: shift/reduce conflict for READ in state 66 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 66 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for READ in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 266 resolved as shift
WARNING: shift/reduce conflict for READ in state 266 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 266 resolved as shift
WARNING: shift/reduce conflict for IF in state 266 resolved as shift
WARNING: shift/reduce conflict for FOR in state 266 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 266 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 266 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
WARNING: shift/reduce conflict for READ in state 283 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 283 resolved as shift
WARNING: shift/reduce conflict for IF in state 283 resolved as shift
WARNING: shift/reduce conflict for FOR in state 283 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 283 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 283 resolved as shift
WARNING: shift/reduce conflict for ID in state 286 resolved as shift
WARNING: shift/reduce conflict for READ in state 286 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 286 resolved as shift
WARNING: shift/reduce conflict for IF in state 286 resolved as shift
WARNING: shift/reduce conflict for FOR in state 286 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 286 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 286 resolved as shift
WARNING: shift/reduce conflict for ID in state 287 resolved as shift
WARNING: shift/reduce conflict for READ in state 287 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 287 resolved as shift
WARNING: shift/reduce conflict for IF in state 287 resolved as shift
WARNING: shift/reduce conflict for FOR in state 287 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 287 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 287 resolved as shift
WARNING: shift/reduce conflict for ID in state 291 resolved as shift
WARNING: shift/reduce conflict for READ in state 291 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 291 resolved as shift
WARNING: shift/reduce conflict for IF in state 291 resolved as shift
WARNING: shift/reduce conflict for FOR in state 291 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 291 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 291 resolved as shift
WARNING: shift/reduce conflict for ID in state 295 resolved as shift
WARNING: shift/reduce conflict for READ in state 295 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 295 resolved as shift
WARNING: shift/reduce conflict for IF in state 295 resolved as shift
WARNING: shift/reduce conflict for FOR in state 295 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 295 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 295 resolved as shift
WARNING: shift/reduce conflict for ID in state 312 resolved as shift
WARNING: shift/reduce conflict for READ in state 312 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 312 resolved as shift
WARNING: shift/reduce conflict for IF in state 312 resolved as shift
WARNING: shift/reduce conflict for FOR in state 312 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 312 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 312 resolved as shift
WARNING: shift/reduce conflict for ID in state 313 resolved as shift
WARNING: shift/reduce conflict for READ in state 313 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 313 resolved as shift
WARNING: shift/reduce conflict for IF in state 313 resolved as shift
WARNING: shift/reduce conflict for FOR in state 313 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 313 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 313 resolved as shift
WARNING: shift/reduce conflict for ID in state 316 resolved as shift
WARNING: shift/reduce conflict for READ in state 316 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 316 resolved as shift
WARNING: shift/reduce conflict for IF in state 316 resolved as shift
WARNING: shift/reduce conflict for FOR in state 316 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 316 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 316 resolved as shift
WARNING: shift/reduce conflict for ID in state 317 resolved as shift
WARNING: shift/reduce conflict for READ in state 317 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 317 resolved as shift
WARNING: shift/reduce conflict for IF in state 317 resolved as shift
WARNING: shift/reduce conflict for FOR in state 317 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 317 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 317 resolved as shift
WARNING: shift/reduce conflict for ID in state 319 resolved as shift
WARNING: shift/reduce conflict for READ in state 319 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 319 resolved as shift
WARNING: shift/reduce conflict for IF in state 319 resolved as shift
WARNING: shift/reduce conflict for FOR in state 319 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 319 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 319 resolved as shift
WARNING: reduce/reduce conflict in state 48 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 48
WARNING: reduce/reduce conflict in state 104 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 104
WARNING: reduce/reduce conflict in state 162 resolved using rule (llamada_2 -> empty)
WARNING: rejected rule (llamada_void_2 -> empty) in state 162
WARNING: reduce/reduce conflict in state 289 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 289
WARNING: reduce/reduce conflict in state 297 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 297
WARNING: reduce/reduce conflict in state 321 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 321
WARNING: Rule (vars_6 -> empty) is never reduced
WARNING: Rule (llamada_void_2 -> empty) is never reduced
