Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3 count_global_vars
Rule 4     modules_point -> empty
Rule 5     count_global_vars -> empty
Rule 6     modules_2 -> vars
Rule 7     modules_2 -> empty
Rule 8     modules_3 -> function
Rule 9     modules_3 -> empty
Rule 10    main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
Rule 11    main_point -> empty
Rule 12    main_final -> empty
Rule 13    body -> body_2 func_agrega_v estatuto body_3
Rule 14    body_2 -> vars
Rule 15    body_2 -> empty
Rule 16    body_3 -> estatuto body_3
Rule 17    body_3 -> empty
Rule 18    tipo_simple -> INT
Rule 19    tipo_simple -> FLOAT
Rule 20    tipo_comp -> DATAFRAME
Rule 21    vars -> VAR vars_2 SEMICOLON vars_8
Rule 22    vars_2 -> tipo_comp vars_3
Rule 23    vars_2 -> tipo_simple vars_4
Rule 24    vars_3 -> ID vars_5
Rule 25    vars_4 -> vars_3
Rule 26    vars_4 -> ID vars_6
Rule 27    vars_5 -> COMMA vars_3
Rule 28    vars_5 -> empty
Rule 29    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 30    vars_6 -> empty
Rule 31    punto_id_especial -> empty
Rule 32    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 33    vars_7 -> var_array
Rule 34    var_array -> empty
Rule 35    var_mat -> empty
Rule 36    vars_8 -> vars
Rule 37    vars_8 -> empty
Rule 38    param -> tipo_simple ID punto_param param_2
Rule 39    param -> empty
Rule 40    param_2 -> COMMA param
Rule 41    param_2 -> empty
Rule 42    punto_param -> empty
Rule 43    punto_param_2 -> empty
Rule 44    variable -> ID variable_2 variable_point
Rule 45    variable_point -> empty
Rule 46    variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
Rule 47    variable_2 -> empty
Rule 48    variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor
Rule 49    variable_3 -> empty
Rule 50    estatuto -> asigna
Rule 51    estatuto -> llamada
Rule 52    estatuto -> llamada_void
Rule 53    estatuto -> read
Rule 54    estatuto -> write
Rule 55    estatuto -> if_1
Rule 56    estatuto -> for_l
Rule 57    estatuto -> while_l
Rule 58    estatuto -> return
Rule 59    estatuto -> funciones_especiales
Rule 60    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 61    asigna_point -> empty
Rule 62    llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
Rule 63    llamada_2 -> exp verify_parameter
Rule 64    llamada_2 -> empty
Rule 65    llamada_3 -> COMMA exp verify_parameter llamada_3
Rule 66    llamada_3 -> empty
Rule 67    llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
Rule 68    llamada_void_2 -> exp verify_parameter
Rule 69    llamada_void_2 -> empty
Rule 70    llamada_void_3 -> COMMA exp verify_parameter llamada_void_3
Rule 71    llamada_void_3 -> empty
Rule 72    not_void -> empty
Rule 73    verify_func -> empty
Rule 74    verify_parameter -> empty
Rule 75    gosub -> empty
Rule 76    add_temp -> empty
Rule 77    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 78    read_point -> empty
Rule 79    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 80    write_2 -> exp write_point
Rule 81    write_2 -> CTE_S add_constant_s write_point
Rule 82    write_3 -> COMMA write_2 write_3
Rule 83    write_3 -> empty
Rule 84    write_point -> empty
Rule 85    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 86    if_2 -> estatuto if_2
Rule 87    if_2 -> empty
Rule 88    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 89    if_3 -> empty
Rule 90    if_point -> empty
Rule 91    if_point_2 -> empty
Rule 92    if_point_3 -> empty
Rule 93    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 94    for_l_2 -> estatuto for_l_2
Rule 95    for_l_2 -> empty
Rule 96    for_point_1 -> empty
Rule 97    for_point_2 -> empty
Rule 98    for_point_3 -> empty
Rule 99    for_point_4 -> empty
Rule 100   while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 101   while_l_2 -> estatuto while_l_2
Rule 102   while_l_2 -> empty
Rule 103   while_point -> empty
Rule 104   while_point_2 -> empty
Rule 105   while_point_3 -> empty
Rule 106   return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON
Rule 107   check_valid_func -> empty
Rule 108   exp -> t_exp add_operator_4 exp_2
Rule 109   exp_2 -> OR add_operator exp
Rule 110   exp_2 -> empty
Rule 111   t_exp -> g_exp add_operator_4 t_exp_2
Rule 112   t_exp_2 -> AND add_operator t_exp
Rule 113   t_exp_2 -> empty
Rule 114   g_exp -> m_exp g_exp_2 add_operator_3
Rule 115   g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 116   g_exp_2 -> LESS add_operator m_exp
Rule 117   g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 118   g_exp_2 -> GREATER add_operator m_exp
Rule 119   g_exp_2 -> COMPARE add_operator m_exp
Rule 120   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 121   g_exp_2 -> empty
Rule 122   m_exp -> t add_operator_2 m_exp_2
Rule 123   m_exp_2 -> PLUS add_operator m_exp
Rule 124   m_exp_2 -> MINUS add_operator m_exp
Rule 125   m_exp_2 -> empty
Rule 126   t -> f add_operator_1 t_2
Rule 127   t_2 -> TIMES add_operator t
Rule 128   t_2 -> DIVIDE add_operator t
Rule 129   t_2 -> empty
Rule 130   f -> LPAR add_floor exp RPAR remove_floor
Rule 131   f -> variable
Rule 132   f -> llamada
Rule 133   f -> f_2
Rule 134   f_2 -> CTE_I add_constant_i
Rule 135   f_2 -> CTE_F add_constant_f
Rule 136   add_floor -> empty
Rule 137   remove_floor -> empty
Rule 138   add_operator -> empty
Rule 139   add_operator_1 -> empty
Rule 140   add_operator_2 -> empty
Rule 141   add_operator_3 -> empty
Rule 142   add_operator_4 -> empty
Rule 143   add_constant_i -> empty
Rule 144   add_constant_s -> empty
Rule 145   add_constant_f -> empty
Rule 146   function -> FUNC function_2 SEMICOLON function_4
Rule 147   function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 148   function_3 -> tipo_simple
Rule 149   function_3 -> VOID
Rule 150   function_4 -> function
Rule 151   function_4 -> empty
Rule 152   function_punto1 -> empty
Rule 153   func_agrega_v -> empty
Rule 154   final_func_point -> empty
Rule 155   funciones_especiales -> read_csv
Rule 156   funciones_especiales -> mean_func
Rule 157   funciones_especiales -> mode_func
Rule 158   funciones_especiales -> median_func
Rule 159   funciones_especiales -> linear_reg_func
Rule 160   funciones_especiales -> box_plt
Rule 161   funciones_especiales -> histogram_plt
Rule 162   check_df -> empty
Rule 163   read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
Rule 164   add_quad_readCSV -> empty
Rule 165   mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
Rule 166   add_quad_mean -> empty
Rule 167   mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
Rule 168   add_quad_mode -> empty
Rule 169   median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
Rule 170   add_quad_median -> empty
Rule 171   linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
Rule 172   add_quad_linearR -> empty
Rule 173   box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
Rule 174   add_quad_box -> empty
Rule 175   histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON
Rule 176   add_quad_hist -> empty
Rule 177   check_name -> empty
Rule 178   empty -> <empty>

Terminals, with rules where they appear

AND                  : 112
BOX_PLOT             : 173
COLON                : 1
COMMA                : 27 40 65 70 82
COMMENT              : 
COMPARE              : 119
CSV_READ             : 163
CTE_F                : 135
CTE_I                : 29 32 134
CTE_S                : 81 163
DATAFRAME            : 20
DIVIDE               : 128
ELSE                 : 88
EQUAL                : 60 93 163 165 167 169
FLOAT                : 19
FOR                  : 93
FUNC                 : 146
GREATER              : 118
GREATER_EQUAL        : 117
HISTOGRAM            : 175
ID                   : 1 24 26 38 44 62 67 93 147
IF                   : 85
INT                  : 18
LESS                 : 116
LESS_EQUAL           : 115
LINEAR_REG           : 171
LPAR                 : 10 62 67 77 79 85 93 100 106 130 147 163 165 167 169 171 173 175
L_C_BRACKET          : 10 85 88 93 100 147
L_S_BRACKET          : 29 32 46 48
MAIN                 : 10
MEAN                 : 165
MEDIAN               : 169
MINUS                : 124
MODE                 : 167
NOT_EQUAL            : 120
OR                   : 109
PLUS                 : 123
PROGRAM              : 1
READ                 : 77
RETURN               : 106
RPAR                 : 10 62 67 77 79 85 93 100 106 130 147 163 165 167 169 171 173 175
R_C_BRACKET          : 10 85 88 93 100 147
R_S_BRACKET          : 29 32 46 48
SEMICOLON            : 10 21 60 67 77 79 85 93 100 106 146 163 165 167 169 171 173 175
STRING               : 
TIMES                : 127
TO                   : 93
VAR                  : 21
VOID                 : 149
WHILE                : 100
WRITE                : 79
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 135
add_constant_i       : 134
add_constant_s       : 81 163
add_floor            : 46 48 62 67 130
add_operator         : 60 109 112 115 116 117 118 119 120 123 124 127 128
add_operator_1       : 126
add_operator_2       : 122
add_operator_3       : 114
add_operator_4       : 108 111
add_quad_box         : 173
add_quad_hist        : 175
add_quad_linearR     : 171
add_quad_mean        : 165
add_quad_median      : 169
add_quad_mode        : 167
add_quad_readCSV     : 163
add_temp             : 62
asigna               : 50
asigna_point         : 60
body                 : 10 147
body_2               : 13
body_3               : 13 16
box_plt              : 160
check_df             : 163 165 165 167 167 169 169 171 173 175
check_name           : 163
check_valid_func     : 106
count_global_vars    : 3
empty                : 2 4 5 7 9 11 12 15 17 28 30 31 34 35 37 39 41 42 43 45 47 49 61 64 66 69 71 72 73 74 75 76 78 83 84 87 89 90 91 92 95 96 97 98 99 102 103 104 105 107 110 113 121 125 129 136 137 138 139 140 141 142 143 144 145 151 152 153 154 162 164 166 168 170 172 174 176 177
estatuto             : 13 16 85 86 88 93 94 100 101
exp                  : 46 48 60 63 65 68 70 80 85 93 93 100 106 109 130
exp_2                : 108
f                    : 126
f_2                  : 133
final_func_point     : 147
for_l                : 56
for_l_2              : 93 94
for_point_1          : 93
for_point_2          : 93
for_point_3          : 93
for_point_4          : 93
func_agrega_v        : 13
funciones_especiales : 59
function             : 8 150
function_2           : 146
function_3           : 147
function_4           : 146
function_punto1      : 147
g_exp                : 111
g_exp_2              : 114
gosub                : 62 67
histogram_plt        : 161
if_1                 : 55
if_2                 : 85 86 88
if_3                 : 85
if_point             : 85
if_point_2           : 85
if_point_3           : 88
linear_reg_func      : 159
llamada              : 51 132
llamada_2            : 62
llamada_3            : 62 65
llamada_void         : 52
llamada_void_2       : 67
llamada_void_3       : 67 70
m_exp                : 114 115 116 117 118 119 120 123 124
m_exp_2              : 122
main                 : 1
main_final           : 10
main_point           : 10
mean_func            : 156
median_func          : 158
mode_func            : 157
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
not_void             : 62
param                : 40 147
param_2              : 38
program              : 0
program_point        : 1
punto_id_especial    : 29
punto_param          : 38
punto_param_2        : 147
read                 : 53
read_csv             : 155
read_point           : 77
remove_floor         : 46 48 62 67 130
return               : 58
t                    : 122 127 128
t_2                  : 126
t_exp                : 108 112
t_exp_2              : 111
tipo_comp            : 22
tipo_simple          : 23 38 148
var_array            : 33
var_mat              : 32
variable             : 60 77 131 163 165 165 167 167 169 169 171 173 175
variable_2           : 44
variable_3           : 46
variable_point       : 44
vars                 : 6 14 36
vars_2               : 21
vars_3               : 22 25 27
vars_4               : 23
vars_5               : 24
vars_6               : 26
vars_7               : 29
vars_8               : 21
verify_func          : 62 67
verify_parameter     : 63 65 68 70
while_l              : 57
while_l_2            : 100 101
while_point          : 100
while_point_2        : 100
while_point_3        : 100
write                : 54
write_2              : 79 82
write_3              : 79 82
write_point          : 80 81

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3 count_global_vars
    (6) modules_2 -> . vars
    (7) modules_2 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (178) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 178 (empty -> .)
    MAIN            reduce using rule 178 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (10) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3 count_global_vars
    (4) modules_point -> . empty
    (178) empty -> .

    FUNC            reduce using rule 178 (empty -> .)
    MAIN            reduce using rule 178 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (6) modules_2 -> vars .

    FUNC            reduce using rule 6 (modules_2 -> vars .)
    MAIN            reduce using rule 6 (modules_2 -> vars .)


state 10

    (7) modules_2 -> empty .

    FUNC            reduce using rule 7 (modules_2 -> empty .)
    MAIN            reduce using rule 7 (modules_2 -> empty .)


state 11

    (21) vars -> VAR . vars_2 SEMICOLON vars_8
    (22) vars_2 -> . tipo_comp vars_3
    (23) vars_2 -> . tipo_simple vars_4
    (20) tipo_comp -> . DATAFRAME
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (10) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final
    (11) main_point -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)

    main_point                     shift and go to state 22
    empty                          shift and go to state 23

state 14

    (3) modules -> modules_2 modules_point . modules_3 count_global_vars
    (8) modules_3 -> . function
    (9) modules_3 -> . empty
    (146) function -> . FUNC function_2 SEMICOLON function_4
    (178) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 178 (empty -> .)

    modules_3                      shift and go to state 24
    function                       shift and go to state 25
    empty                          shift and go to state 26

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (21) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 28


state 17

    (22) vars_2 -> tipo_comp . vars_3
    (24) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 29

state 18

    (23) vars_2 -> tipo_simple . vars_4
    (25) vars_4 -> . vars_3
    (26) vars_4 -> . ID vars_6
    (24) vars_3 -> . ID vars_5

    ID              shift and go to state 33

    vars_4                         shift and go to state 31
    vars_3                         shift and go to state 32

state 19

    (20) tipo_comp -> DATAFRAME .

    ID              reduce using rule 20 (tipo_comp -> DATAFRAME .)


state 20

    (18) tipo_simple -> INT .

    ID              reduce using rule 18 (tipo_simple -> INT .)


state 21

    (19) tipo_simple -> FLOAT .

    ID              reduce using rule 19 (tipo_simple -> FLOAT .)


state 22

    (10) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    LPAR            shift and go to state 34


state 23

    (11) main_point -> empty .

    LPAR            reduce using rule 11 (main_point -> empty .)


state 24

    (3) modules -> modules_2 modules_point modules_3 . count_global_vars
    (5) count_global_vars -> . empty
    (178) empty -> .

    MAIN            reduce using rule 178 (empty -> .)

    count_global_vars              shift and go to state 35
    empty                          shift and go to state 36

state 25

    (8) modules_3 -> function .

    MAIN            reduce using rule 8 (modules_3 -> function .)


state 26

    (9) modules_3 -> empty .

    MAIN            reduce using rule 9 (modules_3 -> empty .)


state 27

    (146) function -> FUNC . function_2 SEMICOLON function_4
    (147) function_2 -> . function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (148) function_3 -> . tipo_simple
    (149) function_3 -> . VOID
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT

    VOID            shift and go to state 40
    INT             shift and go to state 20
    FLOAT           shift and go to state 21

    function_2                     shift and go to state 37
    function_3                     shift and go to state 38
    tipo_simple                    shift and go to state 39

state 28

    (21) vars -> VAR vars_2 SEMICOLON . vars_8
    (36) vars_8 -> . vars
    (37) vars_8 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (178) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 178 (empty -> .)
    MAIN            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)

    vars_8                         shift and go to state 41
    vars                           shift and go to state 42
    empty                          shift and go to state 43

state 29

    (22) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 22 (vars_2 -> tipo_comp vars_3 .)


state 30

    (24) vars_3 -> ID . vars_5
    (27) vars_5 -> . COMMA vars_3
    (28) vars_5 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 45
    SEMICOLON       reduce using rule 178 (empty -> .)

    vars_5                         shift and go to state 44
    empty                          shift and go to state 46

state 31

    (23) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 23 (vars_2 -> tipo_simple vars_4 .)


state 32

    (25) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 25 (vars_4 -> vars_3 .)


state 33

    (26) vars_4 -> ID . vars_6
    (24) vars_3 -> ID . vars_5
    (29) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (30) vars_6 -> . empty
    (27) vars_5 -> . COMMA vars_3
    (28) vars_5 -> . empty
    (31) punto_id_especial -> . empty
    (178) empty -> .

    COMMA           shift and go to state 45
    SEMICOLON       reduce using rule 178 (empty -> .)
    L_S_BRACKET     reduce using rule 178 (empty -> .)

    vars_6                         shift and go to state 47
    vars_5                         shift and go to state 44
    punto_id_especial              shift and go to state 48
    empty                          shift and go to state 49

state 34

    (10) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    RPAR            shift and go to state 50


state 35

    (3) modules -> modules_2 modules_point modules_3 count_global_vars .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 count_global_vars .)


state 36

    (5) count_global_vars -> empty .

    MAIN            reduce using rule 5 (count_global_vars -> empty .)


state 37

    (146) function -> FUNC function_2 . SEMICOLON function_4

    SEMICOLON       shift and go to state 51


state 38

    (147) function_2 -> function_3 . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 52


state 39

    (148) function_3 -> tipo_simple .

    ID              reduce using rule 148 (function_3 -> tipo_simple .)


state 40

    (149) function_3 -> VOID .

    ID              reduce using rule 149 (function_3 -> VOID .)


state 41

    (21) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    LINEAR_REG      reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    BOX_PLOT        reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    HISTOGRAM       reduce using rule 21 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 42

    (36) vars_8 -> vars .

    FUNC            reduce using rule 36 (vars_8 -> vars .)
    MAIN            reduce using rule 36 (vars_8 -> vars .)
    ID              reduce using rule 36 (vars_8 -> vars .)
    READ            reduce using rule 36 (vars_8 -> vars .)
    WRITE           reduce using rule 36 (vars_8 -> vars .)
    IF              reduce using rule 36 (vars_8 -> vars .)
    FOR             reduce using rule 36 (vars_8 -> vars .)
    WHILE           reduce using rule 36 (vars_8 -> vars .)
    RETURN          reduce using rule 36 (vars_8 -> vars .)
    LINEAR_REG      reduce using rule 36 (vars_8 -> vars .)
    BOX_PLOT        reduce using rule 36 (vars_8 -> vars .)
    HISTOGRAM       reduce using rule 36 (vars_8 -> vars .)


state 43

    (37) vars_8 -> empty .

    FUNC            reduce using rule 37 (vars_8 -> empty .)
    MAIN            reduce using rule 37 (vars_8 -> empty .)
    ID              reduce using rule 37 (vars_8 -> empty .)
    READ            reduce using rule 37 (vars_8 -> empty .)
    WRITE           reduce using rule 37 (vars_8 -> empty .)
    IF              reduce using rule 37 (vars_8 -> empty .)
    FOR             reduce using rule 37 (vars_8 -> empty .)
    WHILE           reduce using rule 37 (vars_8 -> empty .)
    RETURN          reduce using rule 37 (vars_8 -> empty .)
    LINEAR_REG      reduce using rule 37 (vars_8 -> empty .)
    BOX_PLOT        reduce using rule 37 (vars_8 -> empty .)
    HISTOGRAM       reduce using rule 37 (vars_8 -> empty .)


state 44

    (24) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 24 (vars_3 -> ID vars_5 .)


state 45

    (27) vars_5 -> COMMA . vars_3
    (24) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 53

state 46

    (28) vars_5 -> empty .

    SEMICOLON       reduce using rule 28 (vars_5 -> empty .)


state 47

    (26) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 26 (vars_4 -> ID vars_6 .)


state 48

    (29) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 54


state 49

    (30) vars_6 -> empty .
    (28) vars_5 -> empty .
    (31) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 28 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 31 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 30 (vars_6 -> empty .) ]


state 50

    (10) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON main_final

    L_C_BRACKET     shift and go to state 55


state 51

    (146) function -> FUNC function_2 SEMICOLON . function_4
    (150) function_4 -> . function
    (151) function_4 -> . empty
    (146) function -> . FUNC function_2 SEMICOLON function_4
    (178) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 178 (empty -> .)

    function_4                     shift and go to state 56
    function                       shift and go to state 57
    empty                          shift and go to state 58

state 52

    (147) function_2 -> function_3 ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (152) function_punto1 -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)

    function_punto1                shift and go to state 59
    empty                          shift and go to state 60

state 53

    (27) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 27 (vars_5 -> COMMA vars_3 .)


state 54

    (29) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 61


state 55

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON main_final
    (13) body -> . body_2 func_agrega_v estatuto body_3
    (14) body_2 -> . vars
    (15) body_2 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (178) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)

    body                           shift and go to state 62
    body_2                         shift and go to state 63
    vars                           shift and go to state 64
    empty                          shift and go to state 65

state 56

    (146) function -> FUNC function_2 SEMICOLON function_4 .

    MAIN            reduce using rule 146 (function -> FUNC function_2 SEMICOLON function_4 .)


state 57

    (150) function_4 -> function .

    MAIN            reduce using rule 150 (function_4 -> function .)


state 58

    (151) function_4 -> empty .

    MAIN            reduce using rule 151 (function_4 -> empty .)


state 59

    (147) function_2 -> function_3 ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 66


state 60

    (152) function_punto1 -> empty .

    LPAR            reduce using rule 152 (function_punto1 -> empty .)


state 61

    (29) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 67


state 62

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON main_final

    R_C_BRACKET     shift and go to state 68


state 63

    (13) body -> body_2 . func_agrega_v estatuto body_3
    (153) func_agrega_v -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)

    func_agrega_v                  shift and go to state 69
    empty                          shift and go to state 70

state 64

    (14) body_2 -> vars .

    ID              reduce using rule 14 (body_2 -> vars .)
    READ            reduce using rule 14 (body_2 -> vars .)
    WRITE           reduce using rule 14 (body_2 -> vars .)
    IF              reduce using rule 14 (body_2 -> vars .)
    FOR             reduce using rule 14 (body_2 -> vars .)
    WHILE           reduce using rule 14 (body_2 -> vars .)
    RETURN          reduce using rule 14 (body_2 -> vars .)
    LINEAR_REG      reduce using rule 14 (body_2 -> vars .)
    BOX_PLOT        reduce using rule 14 (body_2 -> vars .)
    HISTOGRAM       reduce using rule 14 (body_2 -> vars .)


state 65

    (15) body_2 -> empty .

    ID              reduce using rule 15 (body_2 -> empty .)
    READ            reduce using rule 15 (body_2 -> empty .)
    WRITE           reduce using rule 15 (body_2 -> empty .)
    IF              reduce using rule 15 (body_2 -> empty .)
    FOR             reduce using rule 15 (body_2 -> empty .)
    WHILE           reduce using rule 15 (body_2 -> empty .)
    RETURN          reduce using rule 15 (body_2 -> empty .)
    LINEAR_REG      reduce using rule 15 (body_2 -> empty .)
    BOX_PLOT        reduce using rule 15 (body_2 -> empty .)
    HISTOGRAM       reduce using rule 15 (body_2 -> empty .)


state 66

    (147) function_2 -> function_3 ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (38) param -> . tipo_simple ID punto_param param_2
    (39) param -> . empty
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (178) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    RPAR            reduce using rule 178 (empty -> .)

    param                          shift and go to state 71
    tipo_simple                    shift and go to state 72
    empty                          shift and go to state 73

state 67

    (29) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (32) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (33) vars_7 -> . var_array
    (34) var_array -> . empty
    (178) empty -> .

    L_S_BRACKET     shift and go to state 74
    SEMICOLON       reduce using rule 178 (empty -> .)

    vars_7                         shift and go to state 75
    var_array                      shift and go to state 76
    empty                          shift and go to state 77

state 68

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON main_final

    SEMICOLON       shift and go to state 78


state 69

    (13) body -> body_2 func_agrega_v . estatuto body_3
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 79
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 70

    (153) func_agrega_v -> empty .

    ID              reduce using rule 153 (func_agrega_v -> empty .)
    READ            reduce using rule 153 (func_agrega_v -> empty .)
    WRITE           reduce using rule 153 (func_agrega_v -> empty .)
    IF              reduce using rule 153 (func_agrega_v -> empty .)
    FOR             reduce using rule 153 (func_agrega_v -> empty .)
    WHILE           reduce using rule 153 (func_agrega_v -> empty .)
    RETURN          reduce using rule 153 (func_agrega_v -> empty .)
    LINEAR_REG      reduce using rule 153 (func_agrega_v -> empty .)
    BOX_PLOT        reduce using rule 153 (func_agrega_v -> empty .)
    HISTOGRAM       reduce using rule 153 (func_agrega_v -> empty .)


state 71

    (147) function_2 -> function_3 ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (43) punto_param_2 -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    punto_param_2                  shift and go to state 108
    empty                          shift and go to state 109

state 72

    (38) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 110


state 73

    (39) param -> empty .

    RPAR            reduce using rule 39 (param -> empty .)


state 74

    (32) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 111


state 75

    (29) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 29 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 76

    (33) vars_7 -> var_array .

    SEMICOLON       reduce using rule 33 (vars_7 -> var_array .)


state 77

    (34) var_array -> empty .

    SEMICOLON       reduce using rule 34 (var_array -> empty .)


state 78

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON . main_final
    (12) main_final -> . empty
    (178) empty -> .

    $end            reduce using rule 178 (empty -> .)

    main_final                     shift and go to state 112
    empty                          shift and go to state 113

state 79

    (13) body -> body_2 func_agrega_v estatuto . body_3
    (16) body_3 -> . estatuto body_3
    (17) body_3 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 114
    body_3                         shift and go to state 115
    empty                          shift and go to state 116
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 80

    (50) estatuto -> asigna .

    ID              reduce using rule 50 (estatuto -> asigna .)
    READ            reduce using rule 50 (estatuto -> asigna .)
    WRITE           reduce using rule 50 (estatuto -> asigna .)
    IF              reduce using rule 50 (estatuto -> asigna .)
    FOR             reduce using rule 50 (estatuto -> asigna .)
    WHILE           reduce using rule 50 (estatuto -> asigna .)
    RETURN          reduce using rule 50 (estatuto -> asigna .)
    LINEAR_REG      reduce using rule 50 (estatuto -> asigna .)
    BOX_PLOT        reduce using rule 50 (estatuto -> asigna .)
    HISTOGRAM       reduce using rule 50 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> asigna .)


state 81

    (51) estatuto -> llamada .

    ID              reduce using rule 51 (estatuto -> llamada .)
    READ            reduce using rule 51 (estatuto -> llamada .)
    WRITE           reduce using rule 51 (estatuto -> llamada .)
    IF              reduce using rule 51 (estatuto -> llamada .)
    FOR             reduce using rule 51 (estatuto -> llamada .)
    WHILE           reduce using rule 51 (estatuto -> llamada .)
    RETURN          reduce using rule 51 (estatuto -> llamada .)
    LINEAR_REG      reduce using rule 51 (estatuto -> llamada .)
    BOX_PLOT        reduce using rule 51 (estatuto -> llamada .)
    HISTOGRAM       reduce using rule 51 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> llamada .)


state 82

    (52) estatuto -> llamada_void .

    ID              reduce using rule 52 (estatuto -> llamada_void .)
    READ            reduce using rule 52 (estatuto -> llamada_void .)
    WRITE           reduce using rule 52 (estatuto -> llamada_void .)
    IF              reduce using rule 52 (estatuto -> llamada_void .)
    FOR             reduce using rule 52 (estatuto -> llamada_void .)
    WHILE           reduce using rule 52 (estatuto -> llamada_void .)
    RETURN          reduce using rule 52 (estatuto -> llamada_void .)
    LINEAR_REG      reduce using rule 52 (estatuto -> llamada_void .)
    BOX_PLOT        reduce using rule 52 (estatuto -> llamada_void .)
    HISTOGRAM       reduce using rule 52 (estatuto -> llamada_void .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> llamada_void .)


state 83

    (53) estatuto -> read .

    ID              reduce using rule 53 (estatuto -> read .)
    READ            reduce using rule 53 (estatuto -> read .)
    WRITE           reduce using rule 53 (estatuto -> read .)
    IF              reduce using rule 53 (estatuto -> read .)
    FOR             reduce using rule 53 (estatuto -> read .)
    WHILE           reduce using rule 53 (estatuto -> read .)
    RETURN          reduce using rule 53 (estatuto -> read .)
    LINEAR_REG      reduce using rule 53 (estatuto -> read .)
    BOX_PLOT        reduce using rule 53 (estatuto -> read .)
    HISTOGRAM       reduce using rule 53 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> read .)


state 84

    (54) estatuto -> write .

    ID              reduce using rule 54 (estatuto -> write .)
    READ            reduce using rule 54 (estatuto -> write .)
    WRITE           reduce using rule 54 (estatuto -> write .)
    IF              reduce using rule 54 (estatuto -> write .)
    FOR             reduce using rule 54 (estatuto -> write .)
    WHILE           reduce using rule 54 (estatuto -> write .)
    RETURN          reduce using rule 54 (estatuto -> write .)
    LINEAR_REG      reduce using rule 54 (estatuto -> write .)
    BOX_PLOT        reduce using rule 54 (estatuto -> write .)
    HISTOGRAM       reduce using rule 54 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> write .)


state 85

    (55) estatuto -> if_1 .

    ID              reduce using rule 55 (estatuto -> if_1 .)
    READ            reduce using rule 55 (estatuto -> if_1 .)
    WRITE           reduce using rule 55 (estatuto -> if_1 .)
    IF              reduce using rule 55 (estatuto -> if_1 .)
    FOR             reduce using rule 55 (estatuto -> if_1 .)
    WHILE           reduce using rule 55 (estatuto -> if_1 .)
    RETURN          reduce using rule 55 (estatuto -> if_1 .)
    LINEAR_REG      reduce using rule 55 (estatuto -> if_1 .)
    BOX_PLOT        reduce using rule 55 (estatuto -> if_1 .)
    HISTOGRAM       reduce using rule 55 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 55 (estatuto -> if_1 .)


state 86

    (56) estatuto -> for_l .

    ID              reduce using rule 56 (estatuto -> for_l .)
    READ            reduce using rule 56 (estatuto -> for_l .)
    WRITE           reduce using rule 56 (estatuto -> for_l .)
    IF              reduce using rule 56 (estatuto -> for_l .)
    FOR             reduce using rule 56 (estatuto -> for_l .)
    WHILE           reduce using rule 56 (estatuto -> for_l .)
    RETURN          reduce using rule 56 (estatuto -> for_l .)
    LINEAR_REG      reduce using rule 56 (estatuto -> for_l .)
    BOX_PLOT        reduce using rule 56 (estatuto -> for_l .)
    HISTOGRAM       reduce using rule 56 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 56 (estatuto -> for_l .)


state 87

    (57) estatuto -> while_l .

    ID              reduce using rule 57 (estatuto -> while_l .)
    READ            reduce using rule 57 (estatuto -> while_l .)
    WRITE           reduce using rule 57 (estatuto -> while_l .)
    IF              reduce using rule 57 (estatuto -> while_l .)
    FOR             reduce using rule 57 (estatuto -> while_l .)
    WHILE           reduce using rule 57 (estatuto -> while_l .)
    RETURN          reduce using rule 57 (estatuto -> while_l .)
    LINEAR_REG      reduce using rule 57 (estatuto -> while_l .)
    BOX_PLOT        reduce using rule 57 (estatuto -> while_l .)
    HISTOGRAM       reduce using rule 57 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 57 (estatuto -> while_l .)


state 88

    (58) estatuto -> return .

    ID              reduce using rule 58 (estatuto -> return .)
    READ            reduce using rule 58 (estatuto -> return .)
    WRITE           reduce using rule 58 (estatuto -> return .)
    IF              reduce using rule 58 (estatuto -> return .)
    FOR             reduce using rule 58 (estatuto -> return .)
    WHILE           reduce using rule 58 (estatuto -> return .)
    RETURN          reduce using rule 58 (estatuto -> return .)
    LINEAR_REG      reduce using rule 58 (estatuto -> return .)
    BOX_PLOT        reduce using rule 58 (estatuto -> return .)
    HISTOGRAM       reduce using rule 58 (estatuto -> return .)
    R_C_BRACKET     reduce using rule 58 (estatuto -> return .)


state 89

    (59) estatuto -> funciones_especiales .

    ID              reduce using rule 59 (estatuto -> funciones_especiales .)
    READ            reduce using rule 59 (estatuto -> funciones_especiales .)
    WRITE           reduce using rule 59 (estatuto -> funciones_especiales .)
    IF              reduce using rule 59 (estatuto -> funciones_especiales .)
    FOR             reduce using rule 59 (estatuto -> funciones_especiales .)
    WHILE           reduce using rule 59 (estatuto -> funciones_especiales .)
    RETURN          reduce using rule 59 (estatuto -> funciones_especiales .)
    LINEAR_REG      reduce using rule 59 (estatuto -> funciones_especiales .)
    BOX_PLOT        reduce using rule 59 (estatuto -> funciones_especiales .)
    HISTOGRAM       reduce using rule 59 (estatuto -> funciones_especiales .)
    R_C_BRACKET     reduce using rule 59 (estatuto -> funciones_especiales .)


state 90

    (60) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON
    (163) read_csv -> variable . EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> variable . EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> variable . EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> variable . EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON

    EQUAL           shift and go to state 117


state 91

    (62) llamada -> ID . verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> ID . verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (44) variable -> ID . variable_2 variable_point
    (73) verify_func -> . empty
    (46) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (47) variable_2 -> . empty
    (178) empty -> .

    L_S_BRACKET     shift and go to state 121
    LPAR            reduce using rule 178 (empty -> .)
    EQUAL           reduce using rule 178 (empty -> .)

    verify_func                    shift and go to state 118
    variable_2                     shift and go to state 119
    empty                          shift and go to state 120

state 92

    (77) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 122


state 93

    (79) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 123


state 94

    (85) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 124


state 95

    (93) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 125


state 96

    (100) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (103) while_point -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)

    while_point                    shift and go to state 126
    empty                          shift and go to state 127

state 97

    (106) return -> RETURN . LPAR exp check_valid_func RPAR SEMICOLON

    LPAR            shift and go to state 128


state 98

    (155) funciones_especiales -> read_csv .

    ID              reduce using rule 155 (funciones_especiales -> read_csv .)
    READ            reduce using rule 155 (funciones_especiales -> read_csv .)
    WRITE           reduce using rule 155 (funciones_especiales -> read_csv .)
    IF              reduce using rule 155 (funciones_especiales -> read_csv .)
    FOR             reduce using rule 155 (funciones_especiales -> read_csv .)
    WHILE           reduce using rule 155 (funciones_especiales -> read_csv .)
    RETURN          reduce using rule 155 (funciones_especiales -> read_csv .)
    LINEAR_REG      reduce using rule 155 (funciones_especiales -> read_csv .)
    BOX_PLOT        reduce using rule 155 (funciones_especiales -> read_csv .)
    HISTOGRAM       reduce using rule 155 (funciones_especiales -> read_csv .)
    R_C_BRACKET     reduce using rule 155 (funciones_especiales -> read_csv .)


state 99

    (156) funciones_especiales -> mean_func .

    ID              reduce using rule 156 (funciones_especiales -> mean_func .)
    READ            reduce using rule 156 (funciones_especiales -> mean_func .)
    WRITE           reduce using rule 156 (funciones_especiales -> mean_func .)
    IF              reduce using rule 156 (funciones_especiales -> mean_func .)
    FOR             reduce using rule 156 (funciones_especiales -> mean_func .)
    WHILE           reduce using rule 156 (funciones_especiales -> mean_func .)
    RETURN          reduce using rule 156 (funciones_especiales -> mean_func .)
    LINEAR_REG      reduce using rule 156 (funciones_especiales -> mean_func .)
    BOX_PLOT        reduce using rule 156 (funciones_especiales -> mean_func .)
    HISTOGRAM       reduce using rule 156 (funciones_especiales -> mean_func .)
    R_C_BRACKET     reduce using rule 156 (funciones_especiales -> mean_func .)


state 100

    (157) funciones_especiales -> mode_func .

    ID              reduce using rule 157 (funciones_especiales -> mode_func .)
    READ            reduce using rule 157 (funciones_especiales -> mode_func .)
    WRITE           reduce using rule 157 (funciones_especiales -> mode_func .)
    IF              reduce using rule 157 (funciones_especiales -> mode_func .)
    FOR             reduce using rule 157 (funciones_especiales -> mode_func .)
    WHILE           reduce using rule 157 (funciones_especiales -> mode_func .)
    RETURN          reduce using rule 157 (funciones_especiales -> mode_func .)
    LINEAR_REG      reduce using rule 157 (funciones_especiales -> mode_func .)
    BOX_PLOT        reduce using rule 157 (funciones_especiales -> mode_func .)
    HISTOGRAM       reduce using rule 157 (funciones_especiales -> mode_func .)
    R_C_BRACKET     reduce using rule 157 (funciones_especiales -> mode_func .)


state 101

    (158) funciones_especiales -> median_func .

    ID              reduce using rule 158 (funciones_especiales -> median_func .)
    READ            reduce using rule 158 (funciones_especiales -> median_func .)
    WRITE           reduce using rule 158 (funciones_especiales -> median_func .)
    IF              reduce using rule 158 (funciones_especiales -> median_func .)
    FOR             reduce using rule 158 (funciones_especiales -> median_func .)
    WHILE           reduce using rule 158 (funciones_especiales -> median_func .)
    RETURN          reduce using rule 158 (funciones_especiales -> median_func .)
    LINEAR_REG      reduce using rule 158 (funciones_especiales -> median_func .)
    BOX_PLOT        reduce using rule 158 (funciones_especiales -> median_func .)
    HISTOGRAM       reduce using rule 158 (funciones_especiales -> median_func .)
    R_C_BRACKET     reduce using rule 158 (funciones_especiales -> median_func .)


state 102

    (159) funciones_especiales -> linear_reg_func .

    ID              reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    READ            reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    WRITE           reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    IF              reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    FOR             reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    WHILE           reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    RETURN          reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    LINEAR_REG      reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    BOX_PLOT        reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    HISTOGRAM       reduce using rule 159 (funciones_especiales -> linear_reg_func .)
    R_C_BRACKET     reduce using rule 159 (funciones_especiales -> linear_reg_func .)


state 103

    (160) funciones_especiales -> box_plt .

    ID              reduce using rule 160 (funciones_especiales -> box_plt .)
    READ            reduce using rule 160 (funciones_especiales -> box_plt .)
    WRITE           reduce using rule 160 (funciones_especiales -> box_plt .)
    IF              reduce using rule 160 (funciones_especiales -> box_plt .)
    FOR             reduce using rule 160 (funciones_especiales -> box_plt .)
    WHILE           reduce using rule 160 (funciones_especiales -> box_plt .)
    RETURN          reduce using rule 160 (funciones_especiales -> box_plt .)
    LINEAR_REG      reduce using rule 160 (funciones_especiales -> box_plt .)
    BOX_PLOT        reduce using rule 160 (funciones_especiales -> box_plt .)
    HISTOGRAM       reduce using rule 160 (funciones_especiales -> box_plt .)
    R_C_BRACKET     reduce using rule 160 (funciones_especiales -> box_plt .)


state 104

    (161) funciones_especiales -> histogram_plt .

    ID              reduce using rule 161 (funciones_especiales -> histogram_plt .)
    READ            reduce using rule 161 (funciones_especiales -> histogram_plt .)
    WRITE           reduce using rule 161 (funciones_especiales -> histogram_plt .)
    IF              reduce using rule 161 (funciones_especiales -> histogram_plt .)
    FOR             reduce using rule 161 (funciones_especiales -> histogram_plt .)
    WHILE           reduce using rule 161 (funciones_especiales -> histogram_plt .)
    RETURN          reduce using rule 161 (funciones_especiales -> histogram_plt .)
    LINEAR_REG      reduce using rule 161 (funciones_especiales -> histogram_plt .)
    BOX_PLOT        reduce using rule 161 (funciones_especiales -> histogram_plt .)
    HISTOGRAM       reduce using rule 161 (funciones_especiales -> histogram_plt .)
    R_C_BRACKET     reduce using rule 161 (funciones_especiales -> histogram_plt .)


state 105

    (171) linear_reg_func -> LINEAR_REG . LPAR variable check_df add_quad_linearR RPAR SEMICOLON

    LPAR            shift and go to state 129


state 106

    (173) box_plt -> BOX_PLOT . LPAR variable check_df add_quad_box RPAR SEMICOLON

    LPAR            shift and go to state 130


state 107

    (175) histogram_plt -> HISTOGRAM . LPAR variable check_df add_quad_hist RPAR SEMICOLON

    LPAR            shift and go to state 131


state 108

    (147) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 132


state 109

    (43) punto_param_2 -> empty .

    RPAR            reduce using rule 43 (punto_param_2 -> empty .)


state 110

    (38) param -> tipo_simple ID . punto_param param_2
    (42) punto_param -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    punto_param                    shift and go to state 133
    empty                          shift and go to state 134

state 111

    (32) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 135


state 112

    (10) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .

    $end            reduce using rule 10 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON main_final .)


state 113

    (12) main_final -> empty .

    $end            reduce using rule 12 (main_final -> empty .)


state 114

    (16) body_3 -> estatuto . body_3
    (16) body_3 -> . estatuto body_3
    (17) body_3 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 114
    body_3                         shift and go to state 136
    empty                          shift and go to state 116
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 115

    (13) body -> body_2 func_agrega_v estatuto body_3 .

    R_C_BRACKET     reduce using rule 13 (body -> body_2 func_agrega_v estatuto body_3 .)


state 116

    (17) body_3 -> empty .

    R_C_BRACKET     reduce using rule 17 (body_3 -> empty .)


state 117

    (60) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (163) read_csv -> variable EQUAL . check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> variable EQUAL . check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> variable EQUAL . check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> variable EQUAL . check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (138) add_operator -> . empty
    (162) check_df -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)
    CSV_READ        reduce using rule 178 (empty -> .)
    MEAN            reduce using rule 178 (empty -> .)
    MODE            reduce using rule 178 (empty -> .)
    MEDIAN          reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 137
    check_df                       shift and go to state 138
    empty                          shift and go to state 139

state 118

    (62) llamada -> ID verify_func . not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> ID verify_func . LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (72) not_void -> . empty
    (178) empty -> .

  ! shift/reduce conflict for LPAR resolved as shift
    LPAR            shift and go to state 141

  ! LPAR            [ reduce using rule 178 (empty -> .) ]

    not_void                       shift and go to state 140
    empty                          shift and go to state 142

state 119

    (44) variable -> ID variable_2 . variable_point
    (45) variable_point -> . empty
    (178) empty -> .

    EQUAL           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    variable_point                 shift and go to state 143
    empty                          shift and go to state 144

state 120

    (73) verify_func -> empty .
    (47) variable_2 -> empty .

    LPAR            reduce using rule 73 (verify_func -> empty .)
    EQUAL           reduce using rule 47 (variable_2 -> empty .)


state 121

    (46) variable_2 -> L_S_BRACKET . add_floor exp R_S_BRACKET remove_floor variable_3
    (136) add_floor -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_floor                      shift and go to state 145
    empty                          shift and go to state 146

state 122

    (77) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 147

state 123

    (79) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (80) write_2 -> . exp write_point
    (81) write_2 -> . CTE_S add_constant_s write_point
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 152
    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    write_2                        shift and go to state 150
    exp                            shift and go to state 151
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 124

    (85) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 164
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 125

    (93) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 165


state 126

    (100) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 166


state 127

    (103) while_point -> empty .

    LPAR            reduce using rule 103 (while_point -> empty .)


state 128

    (106) return -> RETURN LPAR . exp check_valid_func RPAR SEMICOLON
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 167
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 129

    (171) linear_reg_func -> LINEAR_REG LPAR . variable check_df add_quad_linearR RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 168

state 130

    (173) box_plt -> BOX_PLOT LPAR . variable check_df add_quad_box RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 169

state 131

    (175) histogram_plt -> HISTOGRAM LPAR . variable check_df add_quad_hist RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 170

state 132

    (147) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 171


state 133

    (38) param -> tipo_simple ID punto_param . param_2
    (40) param_2 -> . COMMA param
    (41) param_2 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 173
    RPAR            reduce using rule 178 (empty -> .)

    param_2                        shift and go to state 172
    empty                          shift and go to state 174

state 134

    (42) punto_param -> empty .

    COMMA           reduce using rule 42 (punto_param -> empty .)
    RPAR            reduce using rule 42 (punto_param -> empty .)


state 135

    (32) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (35) var_mat -> . empty
    (178) empty -> .

    SEMICOLON       reduce using rule 178 (empty -> .)

    var_mat                        shift and go to state 175
    empty                          shift and go to state 176

state 136

    (16) body_3 -> estatuto body_3 .

    R_C_BRACKET     reduce using rule 16 (body_3 -> estatuto body_3 .)


state 137

    (60) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    variable                       shift and go to state 158
    exp                            shift and go to state 177
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 138

    (163) read_csv -> variable EQUAL check_df . CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> variable EQUAL check_df . MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> variable EQUAL check_df . MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> variable EQUAL check_df . MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON

    CSV_READ        shift and go to state 178
    MEAN            shift and go to state 179
    MODE            shift and go to state 180
    MEDIAN          shift and go to state 181


state 139

    (138) add_operator -> empty .
    (162) check_df -> empty .

    LPAR            reduce using rule 138 (add_operator -> empty .)
    ID              reduce using rule 138 (add_operator -> empty .)
    CTE_I           reduce using rule 138 (add_operator -> empty .)
    CTE_F           reduce using rule 138 (add_operator -> empty .)
    CSV_READ        reduce using rule 162 (check_df -> empty .)
    MEAN            reduce using rule 162 (check_df -> empty .)
    MODE            reduce using rule 162 (check_df -> empty .)
    MEDIAN          reduce using rule 162 (check_df -> empty .)


state 140

    (62) llamada -> ID verify_func not_void . LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp

    LPAR            shift and go to state 182


state 141

    (67) llamada_void -> ID verify_func LPAR . add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (136) add_floor -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    add_floor                      shift and go to state 183
    empty                          shift and go to state 146

state 142

    (72) not_void -> empty .

    LPAR            reduce using rule 72 (not_void -> empty .)


state 143

    (44) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 44 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 44 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 44 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 44 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 44 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 44 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 44 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 44 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 44 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 44 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 44 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 44 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 44 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 44 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 44 (variable -> ID variable_2 variable_point .)


state 144

    (45) variable_point -> empty .

    EQUAL           reduce using rule 45 (variable_point -> empty .)
    RPAR            reduce using rule 45 (variable_point -> empty .)
    TIMES           reduce using rule 45 (variable_point -> empty .)
    DIVIDE          reduce using rule 45 (variable_point -> empty .)
    PLUS            reduce using rule 45 (variable_point -> empty .)
    MINUS           reduce using rule 45 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 45 (variable_point -> empty .)
    LESS            reduce using rule 45 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 45 (variable_point -> empty .)
    GREATER         reduce using rule 45 (variable_point -> empty .)
    COMPARE         reduce using rule 45 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 45 (variable_point -> empty .)
    AND             reduce using rule 45 (variable_point -> empty .)
    OR              reduce using rule 45 (variable_point -> empty .)
    COMMA           reduce using rule 45 (variable_point -> empty .)
    SEMICOLON       reduce using rule 45 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 45 (variable_point -> empty .)
    TO              reduce using rule 45 (variable_point -> empty .)


state 145

    (46) variable_2 -> L_S_BRACKET add_floor . exp R_S_BRACKET remove_floor variable_3
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 184
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 146

    (136) add_floor -> empty .

    LPAR            reduce using rule 136 (add_floor -> empty .)
    ID              reduce using rule 136 (add_floor -> empty .)
    CTE_I           reduce using rule 136 (add_floor -> empty .)
    CTE_F           reduce using rule 136 (add_floor -> empty .)
    COMMA           reduce using rule 136 (add_floor -> empty .)
    RPAR            reduce using rule 136 (add_floor -> empty .)


state 147

    (77) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (78) read_point -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    read_point                     shift and go to state 185
    empty                          shift and go to state 186

state 148

    (44) variable -> ID . variable_2 variable_point
    (46) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (47) variable_2 -> . empty
    (178) empty -> .

    L_S_BRACKET     shift and go to state 121
    RPAR            reduce using rule 178 (empty -> .)

    variable_2                     shift and go to state 119
    empty                          shift and go to state 187

state 149

    (130) f -> LPAR . add_floor exp RPAR remove_floor
    (136) add_floor -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_floor                      shift and go to state 188
    empty                          shift and go to state 146

state 150

    (79) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (82) write_3 -> . COMMA write_2 write_3
    (83) write_3 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 190
    RPAR            reduce using rule 178 (empty -> .)

    write_3                        shift and go to state 189
    empty                          shift and go to state 191

state 151

    (80) write_2 -> exp . write_point
    (84) write_point -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    write_point                    shift and go to state 192
    empty                          shift and go to state 193

state 152

    (81) write_2 -> CTE_S . add_constant_s write_point
    (144) add_constant_s -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    add_constant_s                 shift and go to state 194
    empty                          shift and go to state 195

state 153

    (108) exp -> t_exp . add_operator_4 exp_2
    (142) add_operator_4 -> . empty
    (178) empty -> .

    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_operator_4                 shift and go to state 196
    empty                          shift and go to state 197

state 154

    (111) t_exp -> g_exp . add_operator_4 t_exp_2
    (142) add_operator_4 -> . empty
    (178) empty -> .

    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_operator_4                 shift and go to state 198
    empty                          shift and go to state 197

state 155

    (114) g_exp -> m_exp . g_exp_2 add_operator_3
    (115) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (116) g_exp_2 -> . LESS add_operator m_exp
    (117) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (118) g_exp_2 -> . GREATER add_operator m_exp
    (119) g_exp_2 -> . COMPARE add_operator m_exp
    (120) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (121) g_exp_2 -> . empty
    (178) empty -> .

    LESS_EQUAL      shift and go to state 200
    LESS            shift and go to state 201
    GREATER_EQUAL   shift and go to state 202
    GREATER         shift and go to state 203
    COMPARE         shift and go to state 204
    NOT_EQUAL       shift and go to state 205
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    g_exp_2                        shift and go to state 199
    empty                          shift and go to state 206

state 156

    (122) m_exp -> t . add_operator_2 m_exp_2
    (140) add_operator_2 -> . empty
    (178) empty -> .

    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_operator_2                 shift and go to state 207
    empty                          shift and go to state 208

state 157

    (126) t -> f . add_operator_1 t_2
    (139) add_operator_1 -> . empty
    (178) empty -> .

    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_operator_1                 shift and go to state 209
    empty                          shift and go to state 210

state 158

    (131) f -> variable .

    TIMES           reduce using rule 131 (f -> variable .)
    DIVIDE          reduce using rule 131 (f -> variable .)
    PLUS            reduce using rule 131 (f -> variable .)
    MINUS           reduce using rule 131 (f -> variable .)
    LESS_EQUAL      reduce using rule 131 (f -> variable .)
    LESS            reduce using rule 131 (f -> variable .)
    GREATER_EQUAL   reduce using rule 131 (f -> variable .)
    GREATER         reduce using rule 131 (f -> variable .)
    COMPARE         reduce using rule 131 (f -> variable .)
    NOT_EQUAL       reduce using rule 131 (f -> variable .)
    AND             reduce using rule 131 (f -> variable .)
    OR              reduce using rule 131 (f -> variable .)
    COMMA           reduce using rule 131 (f -> variable .)
    RPAR            reduce using rule 131 (f -> variable .)
    SEMICOLON       reduce using rule 131 (f -> variable .)
    R_S_BRACKET     reduce using rule 131 (f -> variable .)
    TO              reduce using rule 131 (f -> variable .)


state 159

    (132) f -> llamada .

    TIMES           reduce using rule 132 (f -> llamada .)
    DIVIDE          reduce using rule 132 (f -> llamada .)
    PLUS            reduce using rule 132 (f -> llamada .)
    MINUS           reduce using rule 132 (f -> llamada .)
    LESS_EQUAL      reduce using rule 132 (f -> llamada .)
    LESS            reduce using rule 132 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 132 (f -> llamada .)
    GREATER         reduce using rule 132 (f -> llamada .)
    COMPARE         reduce using rule 132 (f -> llamada .)
    NOT_EQUAL       reduce using rule 132 (f -> llamada .)
    AND             reduce using rule 132 (f -> llamada .)
    OR              reduce using rule 132 (f -> llamada .)
    COMMA           reduce using rule 132 (f -> llamada .)
    RPAR            reduce using rule 132 (f -> llamada .)
    SEMICOLON       reduce using rule 132 (f -> llamada .)
    R_S_BRACKET     reduce using rule 132 (f -> llamada .)
    TO              reduce using rule 132 (f -> llamada .)


state 160

    (133) f -> f_2 .

    TIMES           reduce using rule 133 (f -> f_2 .)
    DIVIDE          reduce using rule 133 (f -> f_2 .)
    PLUS            reduce using rule 133 (f -> f_2 .)
    MINUS           reduce using rule 133 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 133 (f -> f_2 .)
    LESS            reduce using rule 133 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 133 (f -> f_2 .)
    GREATER         reduce using rule 133 (f -> f_2 .)
    COMPARE         reduce using rule 133 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 133 (f -> f_2 .)
    AND             reduce using rule 133 (f -> f_2 .)
    OR              reduce using rule 133 (f -> f_2 .)
    COMMA           reduce using rule 133 (f -> f_2 .)
    RPAR            reduce using rule 133 (f -> f_2 .)
    SEMICOLON       reduce using rule 133 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 133 (f -> f_2 .)
    TO              reduce using rule 133 (f -> f_2 .)


state 161

    (44) variable -> ID . variable_2 variable_point
    (62) llamada -> ID . verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (46) variable_2 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3
    (47) variable_2 -> . empty
    (73) verify_func -> . empty
    (178) empty -> .

    L_S_BRACKET     shift and go to state 121
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)
    LPAR            reduce using rule 178 (empty -> .)

    variable_2                     shift and go to state 119
    verify_func                    shift and go to state 211
    empty                          shift and go to state 212

state 162

    (134) f_2 -> CTE_I . add_constant_i
    (143) add_constant_i -> . empty
    (178) empty -> .

    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_constant_i                 shift and go to state 213
    empty                          shift and go to state 214

state 163

    (135) f_2 -> CTE_F . add_constant_f
    (145) add_constant_f -> . empty
    (178) empty -> .

    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_constant_f                 shift and go to state 215
    empty                          shift and go to state 216

state 164

    (85) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (90) if_point -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    if_point                       shift and go to state 217
    empty                          shift and go to state 218

state 165

    (93) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (96) for_point_1 -> . empty
    (178) empty -> .

    EQUAL           reduce using rule 178 (empty -> .)

    for_point_1                    shift and go to state 219
    empty                          shift and go to state 220

state 166

    (100) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 221
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 167

    (106) return -> RETURN LPAR exp . check_valid_func RPAR SEMICOLON
    (107) check_valid_func -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_valid_func               shift and go to state 222
    empty                          shift and go to state 223

state 168

    (171) linear_reg_func -> LINEAR_REG LPAR variable . check_df add_quad_linearR RPAR SEMICOLON
    (162) check_df -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_df                       shift and go to state 224
    empty                          shift and go to state 225

state 169

    (173) box_plt -> BOX_PLOT LPAR variable . check_df add_quad_box RPAR SEMICOLON
    (162) check_df -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_df                       shift and go to state 226
    empty                          shift and go to state 225

state 170

    (175) histogram_plt -> HISTOGRAM LPAR variable . check_df add_quad_hist RPAR SEMICOLON
    (162) check_df -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_df                       shift and go to state 227
    empty                          shift and go to state 225

state 171

    (147) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (13) body -> . body_2 func_agrega_v estatuto body_3
    (14) body_2 -> . vars
    (15) body_2 -> . empty
    (21) vars -> . VAR vars_2 SEMICOLON vars_8
    (178) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)

    body                           shift and go to state 228
    body_2                         shift and go to state 63
    vars                           shift and go to state 64
    empty                          shift and go to state 65

state 172

    (38) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 38 (param -> tipo_simple ID punto_param param_2 .)


state 173

    (40) param_2 -> COMMA . param
    (38) param -> . tipo_simple ID punto_param param_2
    (39) param -> . empty
    (18) tipo_simple -> . INT
    (19) tipo_simple -> . FLOAT
    (178) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    RPAR            reduce using rule 178 (empty -> .)

    param                          shift and go to state 229
    tipo_simple                    shift and go to state 72
    empty                          shift and go to state 73

state 174

    (41) param_2 -> empty .

    RPAR            reduce using rule 41 (param_2 -> empty .)


state 175

    (32) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 32 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 176

    (35) var_mat -> empty .

    SEMICOLON       reduce using rule 35 (var_mat -> empty .)


state 177

    (60) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (61) asigna_point -> . empty
    (178) empty -> .

    SEMICOLON       reduce using rule 178 (empty -> .)

    asigna_point                   shift and go to state 230
    empty                          shift and go to state 231

state 178

    (163) read_csv -> variable EQUAL check_df CSV_READ . LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON

    LPAR            shift and go to state 232


state 179

    (165) mean_func -> variable EQUAL check_df MEAN . LPAR variable check_df add_quad_mean RPAR SEMICOLON

    LPAR            shift and go to state 233


state 180

    (167) mode_func -> variable EQUAL check_df MODE . LPAR variable check_df add_quad_mode RPAR SEMICOLON

    LPAR            shift and go to state 234


state 181

    (169) median_func -> variable EQUAL check_df MEDIAN . LPAR variable check_df add_quad_median RPAR SEMICOLON

    LPAR            shift and go to state 235


state 182

    (62) llamada -> ID verify_func not_void LPAR . add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (136) add_floor -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    add_floor                      shift and go to state 236
    empty                          shift and go to state 146

state 183

    (67) llamada_void -> ID verify_func LPAR add_floor . llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (68) llamada_void_2 -> . exp verify_parameter
    (69) llamada_void_2 -> . empty
    (108) exp -> . t_exp add_operator_4 exp_2
    (178) empty -> .
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    llamada_void_2                 shift and go to state 237
    exp                            shift and go to state 238
    empty                          shift and go to state 239
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 184

    (46) variable_2 -> L_S_BRACKET add_floor exp . R_S_BRACKET remove_floor variable_3

    R_S_BRACKET     shift and go to state 240


state 185

    (77) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 241


state 186

    (78) read_point -> empty .

    RPAR            reduce using rule 78 (read_point -> empty .)


state 187

    (47) variable_2 -> empty .

    RPAR            reduce using rule 47 (variable_2 -> empty .)


state 188

    (130) f -> LPAR add_floor . exp RPAR remove_floor
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 242
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 189

    (79) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 243


state 190

    (82) write_3 -> COMMA . write_2 write_3
    (80) write_2 -> . exp write_point
    (81) write_2 -> . CTE_S add_constant_s write_point
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 152
    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    write_2                        shift and go to state 244
    exp                            shift and go to state 151
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 191

    (83) write_3 -> empty .

    RPAR            reduce using rule 83 (write_3 -> empty .)


state 192

    (80) write_2 -> exp write_point .

    COMMA           reduce using rule 80 (write_2 -> exp write_point .)
    RPAR            reduce using rule 80 (write_2 -> exp write_point .)


state 193

    (84) write_point -> empty .

    COMMA           reduce using rule 84 (write_point -> empty .)
    RPAR            reduce using rule 84 (write_point -> empty .)


state 194

    (81) write_2 -> CTE_S add_constant_s . write_point
    (84) write_point -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    write_point                    shift and go to state 245
    empty                          shift and go to state 193

state 195

    (144) add_constant_s -> empty .

    COMMA           reduce using rule 144 (add_constant_s -> empty .)
    RPAR            reduce using rule 144 (add_constant_s -> empty .)


state 196

    (108) exp -> t_exp add_operator_4 . exp_2
    (109) exp_2 -> . OR add_operator exp
    (110) exp_2 -> . empty
    (178) empty -> .

    OR              shift and go to state 247
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    exp_2                          shift and go to state 246
    empty                          shift and go to state 248

state 197

    (142) add_operator_4 -> empty .

    OR              reduce using rule 142 (add_operator_4 -> empty .)
    COMMA           reduce using rule 142 (add_operator_4 -> empty .)
    RPAR            reduce using rule 142 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 142 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 142 (add_operator_4 -> empty .)
    TO              reduce using rule 142 (add_operator_4 -> empty .)
    AND             reduce using rule 142 (add_operator_4 -> empty .)


state 198

    (111) t_exp -> g_exp add_operator_4 . t_exp_2
    (112) t_exp_2 -> . AND add_operator t_exp
    (113) t_exp_2 -> . empty
    (178) empty -> .

    AND             shift and go to state 250
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    t_exp_2                        shift and go to state 249
    empty                          shift and go to state 251

state 199

    (114) g_exp -> m_exp g_exp_2 . add_operator_3
    (141) add_operator_3 -> . empty
    (178) empty -> .

    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_operator_3                 shift and go to state 252
    empty                          shift and go to state 253

state 200

    (115) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 254
    empty                          shift and go to state 255

state 201

    (116) g_exp_2 -> LESS . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 256
    empty                          shift and go to state 255

state 202

    (117) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 257
    empty                          shift and go to state 255

state 203

    (118) g_exp_2 -> GREATER . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 258
    empty                          shift and go to state 255

state 204

    (119) g_exp_2 -> COMPARE . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 259
    empty                          shift and go to state 255

state 205

    (120) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 260
    empty                          shift and go to state 255

state 206

    (121) g_exp_2 -> empty .

    AND             reduce using rule 121 (g_exp_2 -> empty .)
    OR              reduce using rule 121 (g_exp_2 -> empty .)
    COMMA           reduce using rule 121 (g_exp_2 -> empty .)
    RPAR            reduce using rule 121 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 121 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 121 (g_exp_2 -> empty .)
    TO              reduce using rule 121 (g_exp_2 -> empty .)


state 207

    (122) m_exp -> t add_operator_2 . m_exp_2
    (123) m_exp_2 -> . PLUS add_operator m_exp
    (124) m_exp_2 -> . MINUS add_operator m_exp
    (125) m_exp_2 -> . empty
    (178) empty -> .

    PLUS            shift and go to state 262
    MINUS           shift and go to state 263
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    m_exp_2                        shift and go to state 261
    empty                          shift and go to state 264

state 208

    (140) add_operator_2 -> empty .

    PLUS            reduce using rule 140 (add_operator_2 -> empty .)
    MINUS           reduce using rule 140 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 140 (add_operator_2 -> empty .)
    LESS            reduce using rule 140 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 140 (add_operator_2 -> empty .)
    GREATER         reduce using rule 140 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 140 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 140 (add_operator_2 -> empty .)
    AND             reduce using rule 140 (add_operator_2 -> empty .)
    OR              reduce using rule 140 (add_operator_2 -> empty .)
    COMMA           reduce using rule 140 (add_operator_2 -> empty .)
    RPAR            reduce using rule 140 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 140 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 140 (add_operator_2 -> empty .)
    TO              reduce using rule 140 (add_operator_2 -> empty .)


state 209

    (126) t -> f add_operator_1 . t_2
    (127) t_2 -> . TIMES add_operator t
    (128) t_2 -> . DIVIDE add_operator t
    (129) t_2 -> . empty
    (178) empty -> .

    TIMES           shift and go to state 266
    DIVIDE          shift and go to state 267
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    t_2                            shift and go to state 265
    empty                          shift and go to state 268

state 210

    (139) add_operator_1 -> empty .

    TIMES           reduce using rule 139 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 139 (add_operator_1 -> empty .)
    PLUS            reduce using rule 139 (add_operator_1 -> empty .)
    MINUS           reduce using rule 139 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 139 (add_operator_1 -> empty .)
    LESS            reduce using rule 139 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 139 (add_operator_1 -> empty .)
    GREATER         reduce using rule 139 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 139 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 139 (add_operator_1 -> empty .)
    AND             reduce using rule 139 (add_operator_1 -> empty .)
    OR              reduce using rule 139 (add_operator_1 -> empty .)
    COMMA           reduce using rule 139 (add_operator_1 -> empty .)
    RPAR            reduce using rule 139 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 139 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 139 (add_operator_1 -> empty .)
    TO              reduce using rule 139 (add_operator_1 -> empty .)


state 211

    (62) llamada -> ID verify_func . not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (72) not_void -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)

    not_void                       shift and go to state 140
    empty                          shift and go to state 142

state 212

    (47) variable_2 -> empty .
    (73) verify_func -> empty .

    TIMES           reduce using rule 47 (variable_2 -> empty .)
    DIVIDE          reduce using rule 47 (variable_2 -> empty .)
    PLUS            reduce using rule 47 (variable_2 -> empty .)
    MINUS           reduce using rule 47 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 47 (variable_2 -> empty .)
    LESS            reduce using rule 47 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 47 (variable_2 -> empty .)
    GREATER         reduce using rule 47 (variable_2 -> empty .)
    COMPARE         reduce using rule 47 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 47 (variable_2 -> empty .)
    AND             reduce using rule 47 (variable_2 -> empty .)
    OR              reduce using rule 47 (variable_2 -> empty .)
    COMMA           reduce using rule 47 (variable_2 -> empty .)
    RPAR            reduce using rule 47 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 47 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 47 (variable_2 -> empty .)
    TO              reduce using rule 47 (variable_2 -> empty .)
    LPAR            reduce using rule 73 (verify_func -> empty .)


state 213

    (134) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 134 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 134 (f_2 -> CTE_I add_constant_i .)


state 214

    (143) add_constant_i -> empty .

    TIMES           reduce using rule 143 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 143 (add_constant_i -> empty .)
    PLUS            reduce using rule 143 (add_constant_i -> empty .)
    MINUS           reduce using rule 143 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 143 (add_constant_i -> empty .)
    LESS            reduce using rule 143 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 143 (add_constant_i -> empty .)
    GREATER         reduce using rule 143 (add_constant_i -> empty .)
    COMPARE         reduce using rule 143 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 143 (add_constant_i -> empty .)
    AND             reduce using rule 143 (add_constant_i -> empty .)
    OR              reduce using rule 143 (add_constant_i -> empty .)
    COMMA           reduce using rule 143 (add_constant_i -> empty .)
    RPAR            reduce using rule 143 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 143 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 143 (add_constant_i -> empty .)
    TO              reduce using rule 143 (add_constant_i -> empty .)


state 215

    (135) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 135 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 135 (f_2 -> CTE_F add_constant_f .)


state 216

    (145) add_constant_f -> empty .

    TIMES           reduce using rule 145 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 145 (add_constant_f -> empty .)
    PLUS            reduce using rule 145 (add_constant_f -> empty .)
    MINUS           reduce using rule 145 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 145 (add_constant_f -> empty .)
    LESS            reduce using rule 145 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 145 (add_constant_f -> empty .)
    GREATER         reduce using rule 145 (add_constant_f -> empty .)
    COMPARE         reduce using rule 145 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 145 (add_constant_f -> empty .)
    AND             reduce using rule 145 (add_constant_f -> empty .)
    OR              reduce using rule 145 (add_constant_f -> empty .)
    COMMA           reduce using rule 145 (add_constant_f -> empty .)
    RPAR            reduce using rule 145 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 145 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 145 (add_constant_f -> empty .)
    TO              reduce using rule 145 (add_constant_f -> empty .)


state 217

    (85) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 269


state 218

    (90) if_point -> empty .

    RPAR            reduce using rule 90 (if_point -> empty .)


state 219

    (93) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 270


state 220

    (96) for_point_1 -> empty .

    EQUAL           reduce using rule 96 (for_point_1 -> empty .)


state 221

    (100) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 271


state 222

    (106) return -> RETURN LPAR exp check_valid_func . RPAR SEMICOLON

    RPAR            shift and go to state 272


state 223

    (107) check_valid_func -> empty .

    RPAR            reduce using rule 107 (check_valid_func -> empty .)


state 224

    (171) linear_reg_func -> LINEAR_REG LPAR variable check_df . add_quad_linearR RPAR SEMICOLON
    (172) add_quad_linearR -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_linearR               shift and go to state 273
    empty                          shift and go to state 274

state 225

    (162) check_df -> empty .

    RPAR            reduce using rule 162 (check_df -> empty .)


state 226

    (173) box_plt -> BOX_PLOT LPAR variable check_df . add_quad_box RPAR SEMICOLON
    (174) add_quad_box -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_box                   shift and go to state 275
    empty                          shift and go to state 276

state 227

    (175) histogram_plt -> HISTOGRAM LPAR variable check_df . add_quad_hist RPAR SEMICOLON
    (176) add_quad_hist -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_hist                  shift and go to state 277
    empty                          shift and go to state 278

state 228

    (147) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 279


state 229

    (40) param_2 -> COMMA param .

    RPAR            reduce using rule 40 (param_2 -> COMMA param .)


state 230

    (60) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 280


state 231

    (61) asigna_point -> empty .

    SEMICOLON       reduce using rule 61 (asigna_point -> empty .)


state 232

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR . CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON

    CTE_S           shift and go to state 281


state 233

    (165) mean_func -> variable EQUAL check_df MEAN LPAR . variable check_df add_quad_mean RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 282

state 234

    (167) mode_func -> variable EQUAL check_df MODE LPAR . variable check_df add_quad_mode RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 283

state 235

    (169) median_func -> variable EQUAL check_df MEDIAN LPAR . variable check_df add_quad_median RPAR SEMICOLON
    (44) variable -> . ID variable_2 variable_point

    ID              shift and go to state 148

    variable                       shift and go to state 284

state 236

    (62) llamada -> ID verify_func not_void LPAR add_floor . llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (63) llamada_2 -> . exp verify_parameter
    (64) llamada_2 -> . empty
    (108) exp -> . t_exp add_operator_4 exp_2
    (178) empty -> .
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    llamada_2                      shift and go to state 285
    exp                            shift and go to state 286
    empty                          shift and go to state 287
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 237

    (67) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 . llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (70) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (71) llamada_void_3 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 289
    RPAR            reduce using rule 178 (empty -> .)

    llamada_void_3                 shift and go to state 288
    empty                          shift and go to state 290

state 238

    (68) llamada_void_2 -> exp . verify_parameter
    (74) verify_parameter -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    verify_parameter               shift and go to state 291
    empty                          shift and go to state 292

state 239

    (69) llamada_void_2 -> empty .

    COMMA           reduce using rule 69 (llamada_void_2 -> empty .)
    RPAR            reduce using rule 69 (llamada_void_2 -> empty .)


state 240

    (46) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET . remove_floor variable_3
    (137) remove_floor -> . empty
    (178) empty -> .

    L_S_BRACKET     reduce using rule 178 (empty -> .)
    EQUAL           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    remove_floor                   shift and go to state 293
    empty                          shift and go to state 294

state 241

    (77) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 295


state 242

    (130) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 296


state 243

    (79) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 297


state 244

    (82) write_3 -> COMMA write_2 . write_3
    (82) write_3 -> . COMMA write_2 write_3
    (83) write_3 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 190
    RPAR            reduce using rule 178 (empty -> .)

    write_3                        shift and go to state 298
    empty                          shift and go to state 191

state 245

    (81) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 81 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 81 (write_2 -> CTE_S add_constant_s write_point .)


state 246

    (108) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 108 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 108 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 108 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 108 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 108 (exp -> t_exp add_operator_4 exp_2 .)


state 247

    (109) exp_2 -> OR . add_operator exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 299
    empty                          shift and go to state 255

state 248

    (110) exp_2 -> empty .

    COMMA           reduce using rule 110 (exp_2 -> empty .)
    RPAR            reduce using rule 110 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 110 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 110 (exp_2 -> empty .)
    TO              reduce using rule 110 (exp_2 -> empty .)


state 249

    (111) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 111 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 111 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 111 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 111 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 111 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 111 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 250

    (112) t_exp_2 -> AND . add_operator t_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 300
    empty                          shift and go to state 255

state 251

    (113) t_exp_2 -> empty .

    OR              reduce using rule 113 (t_exp_2 -> empty .)
    COMMA           reduce using rule 113 (t_exp_2 -> empty .)
    RPAR            reduce using rule 113 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 113 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 113 (t_exp_2 -> empty .)
    TO              reduce using rule 113 (t_exp_2 -> empty .)


state 252

    (114) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 114 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 253

    (141) add_operator_3 -> empty .

    AND             reduce using rule 141 (add_operator_3 -> empty .)
    OR              reduce using rule 141 (add_operator_3 -> empty .)
    COMMA           reduce using rule 141 (add_operator_3 -> empty .)
    RPAR            reduce using rule 141 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 141 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 141 (add_operator_3 -> empty .)
    TO              reduce using rule 141 (add_operator_3 -> empty .)


state 254

    (115) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 301
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 255

    (138) add_operator -> empty .

    LPAR            reduce using rule 138 (add_operator -> empty .)
    ID              reduce using rule 138 (add_operator -> empty .)
    CTE_I           reduce using rule 138 (add_operator -> empty .)
    CTE_F           reduce using rule 138 (add_operator -> empty .)


state 256

    (116) g_exp_2 -> LESS add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 302
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 257

    (117) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 303
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 258

    (118) g_exp_2 -> GREATER add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 304
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 259

    (119) g_exp_2 -> COMPARE add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 305
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 260

    (120) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 306
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 261

    (122) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 122 (m_exp -> t add_operator_2 m_exp_2 .)


state 262

    (123) m_exp_2 -> PLUS . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 307
    empty                          shift and go to state 255

state 263

    (124) m_exp_2 -> MINUS . add_operator m_exp
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 308
    empty                          shift and go to state 255

state 264

    (125) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 125 (m_exp_2 -> empty .)
    LESS            reduce using rule 125 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 125 (m_exp_2 -> empty .)
    GREATER         reduce using rule 125 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 125 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 125 (m_exp_2 -> empty .)
    AND             reduce using rule 125 (m_exp_2 -> empty .)
    OR              reduce using rule 125 (m_exp_2 -> empty .)
    COMMA           reduce using rule 125 (m_exp_2 -> empty .)
    RPAR            reduce using rule 125 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 125 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 125 (m_exp_2 -> empty .)
    TO              reduce using rule 125 (m_exp_2 -> empty .)


state 265

    (126) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 126 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 126 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 126 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 126 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 126 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 126 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 126 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 126 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 126 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 126 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 126 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 126 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 126 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 126 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 126 (t -> f add_operator_1 t_2 .)


state 266

    (127) t_2 -> TIMES . add_operator t
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 309
    empty                          shift and go to state 255

state 267

    (128) t_2 -> DIVIDE . add_operator t
    (138) add_operator -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_operator                   shift and go to state 310
    empty                          shift and go to state 255

state 268

    (129) t_2 -> empty .

    PLUS            reduce using rule 129 (t_2 -> empty .)
    MINUS           reduce using rule 129 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 129 (t_2 -> empty .)
    LESS            reduce using rule 129 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 129 (t_2 -> empty .)
    GREATER         reduce using rule 129 (t_2 -> empty .)
    COMPARE         reduce using rule 129 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 129 (t_2 -> empty .)
    AND             reduce using rule 129 (t_2 -> empty .)
    OR              reduce using rule 129 (t_2 -> empty .)
    COMMA           reduce using rule 129 (t_2 -> empty .)
    RPAR            reduce using rule 129 (t_2 -> empty .)
    SEMICOLON       reduce using rule 129 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 129 (t_2 -> empty .)
    TO              reduce using rule 129 (t_2 -> empty .)


state 269

    (85) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 311


state 270

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 312
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 271

    (100) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (104) while_point_2 -> . empty
    (178) empty -> .

    L_C_BRACKET     reduce using rule 178 (empty -> .)

    while_point_2                  shift and go to state 313
    empty                          shift and go to state 314

state 272

    (106) return -> RETURN LPAR exp check_valid_func RPAR . SEMICOLON

    SEMICOLON       shift and go to state 315


state 273

    (171) linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR . RPAR SEMICOLON

    RPAR            shift and go to state 316


state 274

    (172) add_quad_linearR -> empty .

    RPAR            reduce using rule 172 (add_quad_linearR -> empty .)


state 275

    (173) box_plt -> BOX_PLOT LPAR variable check_df add_quad_box . RPAR SEMICOLON

    RPAR            shift and go to state 317


state 276

    (174) add_quad_box -> empty .

    RPAR            reduce using rule 174 (add_quad_box -> empty .)


state 277

    (175) histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist . RPAR SEMICOLON

    RPAR            shift and go to state 318


state 278

    (176) add_quad_hist -> empty .

    RPAR            reduce using rule 176 (add_quad_hist -> empty .)


state 279

    (147) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (154) final_func_point -> . empty
    (178) empty -> .

    SEMICOLON       reduce using rule 178 (empty -> .)

    final_func_point               shift and go to state 319
    empty                          shift and go to state 320

state 280

    (60) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    LINEAR_REG      reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    BOX_PLOT        reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    HISTOGRAM       reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 60 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 281

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S . check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (177) check_name -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_name                     shift and go to state 321
    empty                          shift and go to state 322

state 282

    (165) mean_func -> variable EQUAL check_df MEAN LPAR variable . check_df add_quad_mean RPAR SEMICOLON
    (162) check_df -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_df                       shift and go to state 323
    empty                          shift and go to state 225

state 283

    (167) mode_func -> variable EQUAL check_df MODE LPAR variable . check_df add_quad_mode RPAR SEMICOLON
    (162) check_df -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_df                       shift and go to state 324
    empty                          shift and go to state 225

state 284

    (169) median_func -> variable EQUAL check_df MEDIAN LPAR variable . check_df add_quad_median RPAR SEMICOLON
    (162) check_df -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    check_df                       shift and go to state 325
    empty                          shift and go to state 225

state 285

    (62) llamada -> ID verify_func not_void LPAR add_floor llamada_2 . llamada_3 RPAR remove_floor gosub add_temp
    (65) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (66) llamada_3 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 327
    RPAR            reduce using rule 178 (empty -> .)

    llamada_3                      shift and go to state 326
    empty                          shift and go to state 328

state 286

    (63) llamada_2 -> exp . verify_parameter
    (74) verify_parameter -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    verify_parameter               shift and go to state 329
    empty                          shift and go to state 292

state 287

    (64) llamada_2 -> empty .

    COMMA           reduce using rule 64 (llamada_2 -> empty .)
    RPAR            reduce using rule 64 (llamada_2 -> empty .)


state 288

    (67) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 . RPAR remove_floor SEMICOLON gosub

    RPAR            shift and go to state 330


state 289

    (70) llamada_void_3 -> COMMA . exp verify_parameter llamada_void_3
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 331
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 290

    (71) llamada_void_3 -> empty .

    RPAR            reduce using rule 71 (llamada_void_3 -> empty .)


state 291

    (68) llamada_void_2 -> exp verify_parameter .

    COMMA           reduce using rule 68 (llamada_void_2 -> exp verify_parameter .)
    RPAR            reduce using rule 68 (llamada_void_2 -> exp verify_parameter .)


state 292

    (74) verify_parameter -> empty .

    COMMA           reduce using rule 74 (verify_parameter -> empty .)
    RPAR            reduce using rule 74 (verify_parameter -> empty .)


state 293

    (46) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor . variable_3
    (48) variable_3 -> . L_S_BRACKET add_floor exp R_S_BRACKET remove_floor
    (49) variable_3 -> . empty
    (178) empty -> .

    L_S_BRACKET     shift and go to state 332
    EQUAL           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    variable_3                     shift and go to state 333
    empty                          shift and go to state 334

state 294

    (137) remove_floor -> empty .

    L_S_BRACKET     reduce using rule 137 (remove_floor -> empty .)
    EQUAL           reduce using rule 137 (remove_floor -> empty .)
    RPAR            reduce using rule 137 (remove_floor -> empty .)
    TIMES           reduce using rule 137 (remove_floor -> empty .)
    DIVIDE          reduce using rule 137 (remove_floor -> empty .)
    PLUS            reduce using rule 137 (remove_floor -> empty .)
    MINUS           reduce using rule 137 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 137 (remove_floor -> empty .)
    LESS            reduce using rule 137 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 137 (remove_floor -> empty .)
    GREATER         reduce using rule 137 (remove_floor -> empty .)
    COMPARE         reduce using rule 137 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 137 (remove_floor -> empty .)
    AND             reduce using rule 137 (remove_floor -> empty .)
    OR              reduce using rule 137 (remove_floor -> empty .)
    COMMA           reduce using rule 137 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 137 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 137 (remove_floor -> empty .)
    TO              reduce using rule 137 (remove_floor -> empty .)
    ID              reduce using rule 137 (remove_floor -> empty .)
    READ            reduce using rule 137 (remove_floor -> empty .)
    WRITE           reduce using rule 137 (remove_floor -> empty .)
    IF              reduce using rule 137 (remove_floor -> empty .)
    FOR             reduce using rule 137 (remove_floor -> empty .)
    WHILE           reduce using rule 137 (remove_floor -> empty .)
    RETURN          reduce using rule 137 (remove_floor -> empty .)
    LINEAR_REG      reduce using rule 137 (remove_floor -> empty .)
    BOX_PLOT        reduce using rule 137 (remove_floor -> empty .)
    HISTOGRAM       reduce using rule 137 (remove_floor -> empty .)
    R_C_BRACKET     reduce using rule 137 (remove_floor -> empty .)


state 295

    (77) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 77 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 296

    (130) f -> LPAR add_floor exp RPAR . remove_floor
    (137) remove_floor -> . empty
    (178) empty -> .

    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    remove_floor                   shift and go to state 335
    empty                          shift and go to state 294

state 297

    (79) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 79 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 298

    (82) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 82 (write_3 -> COMMA write_2 write_3 .)


state 299

    (109) exp_2 -> OR add_operator . exp
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 336
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 300

    (112) t_exp_2 -> AND add_operator . t_exp
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    t_exp                          shift and go to state 337
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 301

    (115) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 115 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 302

    (116) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 116 (g_exp_2 -> LESS add_operator m_exp .)


state 303

    (117) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 117 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 304

    (118) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 118 (g_exp_2 -> GREATER add_operator m_exp .)


state 305

    (119) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 119 (g_exp_2 -> COMPARE add_operator m_exp .)


state 306

    (120) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 120 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 307

    (123) m_exp_2 -> PLUS add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 338
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 308

    (124) m_exp_2 -> MINUS add_operator . m_exp
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    m_exp                          shift and go to state 339
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 309

    (127) t_2 -> TIMES add_operator . t
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    t                              shift and go to state 340
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 310

    (128) t_2 -> DIVIDE add_operator . t
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    t                              shift and go to state 341
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 311

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 342
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 312

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (97) for_point_2 -> . empty
    (178) empty -> .

    TO              reduce using rule 178 (empty -> .)

    for_point_2                    shift and go to state 343
    empty                          shift and go to state 344

state 313

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 345


state 314

    (104) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 104 (while_point_2 -> empty .)


state 315

    (106) return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .

    ID              reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    READ            reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WRITE           reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    IF              reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    FOR             reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    WHILE           reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    RETURN          reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 106 (return -> RETURN LPAR exp check_valid_func RPAR SEMICOLON .)


state 316

    (171) linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR . SEMICOLON

    SEMICOLON       shift and go to state 346


state 317

    (173) box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR . SEMICOLON

    SEMICOLON       shift and go to state 347


state 318

    (175) histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR . SEMICOLON

    SEMICOLON       shift and go to state 348


state 319

    (147) function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 147 (function_2 -> function_3 ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 320

    (154) final_func_point -> empty .

    SEMICOLON       reduce using rule 154 (final_func_point -> empty .)


state 321

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name . add_constant_s add_quad_readCSV RPAR SEMICOLON
    (144) add_constant_s -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_constant_s                 shift and go to state 349
    empty                          shift and go to state 195

state 322

    (177) check_name -> empty .

    RPAR            reduce using rule 177 (check_name -> empty .)


state 323

    (165) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df . add_quad_mean RPAR SEMICOLON
    (166) add_quad_mean -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_mean                  shift and go to state 350
    empty                          shift and go to state 351

state 324

    (167) mode_func -> variable EQUAL check_df MODE LPAR variable check_df . add_quad_mode RPAR SEMICOLON
    (168) add_quad_mode -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_mode                  shift and go to state 352
    empty                          shift and go to state 353

state 325

    (169) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df . add_quad_median RPAR SEMICOLON
    (170) add_quad_median -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_median                shift and go to state 354
    empty                          shift and go to state 355

state 326

    (62) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 . RPAR remove_floor gosub add_temp

    RPAR            shift and go to state 356


state 327

    (65) llamada_3 -> COMMA . exp verify_parameter llamada_3
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 357
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 328

    (66) llamada_3 -> empty .

    RPAR            reduce using rule 66 (llamada_3 -> empty .)


state 329

    (63) llamada_2 -> exp verify_parameter .

    COMMA           reduce using rule 63 (llamada_2 -> exp verify_parameter .)
    RPAR            reduce using rule 63 (llamada_2 -> exp verify_parameter .)


state 330

    (67) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR . remove_floor SEMICOLON gosub
    (137) remove_floor -> . empty
    (178) empty -> .

    SEMICOLON       reduce using rule 178 (empty -> .)

    remove_floor                   shift and go to state 358
    empty                          shift and go to state 294

state 331

    (70) llamada_void_3 -> COMMA exp . verify_parameter llamada_void_3
    (74) verify_parameter -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    verify_parameter               shift and go to state 359
    empty                          shift and go to state 292

state 332

    (48) variable_3 -> L_S_BRACKET . add_floor exp R_S_BRACKET remove_floor
    (136) add_floor -> . empty
    (178) empty -> .

    LPAR            reduce using rule 178 (empty -> .)
    ID              reduce using rule 178 (empty -> .)
    CTE_I           reduce using rule 178 (empty -> .)
    CTE_F           reduce using rule 178 (empty -> .)

    add_floor                      shift and go to state 360
    empty                          shift and go to state 146

state 333

    (46) variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .

    EQUAL           reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    RPAR            reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    TIMES           reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    DIVIDE          reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    PLUS            reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    MINUS           reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    LESS_EQUAL      reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    LESS            reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    GREATER_EQUAL   reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    GREATER         reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    COMPARE         reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    NOT_EQUAL       reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    AND             reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    OR              reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    COMMA           reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    SEMICOLON       reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    R_S_BRACKET     reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)
    TO              reduce using rule 46 (variable_2 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor variable_3 .)


state 334

    (49) variable_3 -> empty .

    EQUAL           reduce using rule 49 (variable_3 -> empty .)
    RPAR            reduce using rule 49 (variable_3 -> empty .)
    TIMES           reduce using rule 49 (variable_3 -> empty .)
    DIVIDE          reduce using rule 49 (variable_3 -> empty .)
    PLUS            reduce using rule 49 (variable_3 -> empty .)
    MINUS           reduce using rule 49 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 49 (variable_3 -> empty .)
    LESS            reduce using rule 49 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 49 (variable_3 -> empty .)
    GREATER         reduce using rule 49 (variable_3 -> empty .)
    COMPARE         reduce using rule 49 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 49 (variable_3 -> empty .)
    AND             reduce using rule 49 (variable_3 -> empty .)
    OR              reduce using rule 49 (variable_3 -> empty .)
    COMMA           reduce using rule 49 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 49 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 49 (variable_3 -> empty .)
    TO              reduce using rule 49 (variable_3 -> empty .)


state 335

    (130) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 130 (f -> LPAR add_floor exp RPAR remove_floor .)


state 336

    (109) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 109 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 109 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 109 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 109 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 109 (exp_2 -> OR add_operator exp .)


state 337

    (112) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 112 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 112 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 112 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 112 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 112 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 112 (t_exp_2 -> AND add_operator t_exp .)


state 338

    (123) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 123 (m_exp_2 -> PLUS add_operator m_exp .)


state 339

    (124) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 124 (m_exp_2 -> MINUS add_operator m_exp .)


state 340

    (127) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 127 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 127 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 127 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 127 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 127 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 127 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 127 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 127 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 127 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 127 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 127 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 127 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 127 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 127 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 127 (t_2 -> TIMES add_operator t .)


state 341

    (128) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 128 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 128 (t_2 -> DIVIDE add_operator t .)


state 342

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (86) if_2 -> . estatuto if_2
    (87) if_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 361
    if_2                           shift and go to state 362
    empty                          shift and go to state 363
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 343

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 364


state 344

    (97) for_point_2 -> empty .

    TO              reduce using rule 97 (for_point_2 -> empty .)


state 345

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 365
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 346

    (171) linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .

    ID              reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    READ            reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    WRITE           reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    IF              reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    FOR             reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    WHILE           reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    RETURN          reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 171 (linear_reg_func -> LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON .)


state 347

    (173) box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .

    ID              reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    READ            reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    WRITE           reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    IF              reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    FOR             reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    WHILE           reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    RETURN          reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 173 (box_plt -> BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON .)


state 348

    (175) histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .

    ID              reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    READ            reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    WRITE           reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    IF              reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    FOR             reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    WHILE           reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    RETURN          reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 175 (histogram_plt -> HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON .)


state 349

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s . add_quad_readCSV RPAR SEMICOLON
    (164) add_quad_readCSV -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    add_quad_readCSV               shift and go to state 366
    empty                          shift and go to state 367

state 350

    (165) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean . RPAR SEMICOLON

    RPAR            shift and go to state 368


state 351

    (166) add_quad_mean -> empty .

    RPAR            reduce using rule 166 (add_quad_mean -> empty .)


state 352

    (167) mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode . RPAR SEMICOLON

    RPAR            shift and go to state 369


state 353

    (168) add_quad_mode -> empty .

    RPAR            reduce using rule 168 (add_quad_mode -> empty .)


state 354

    (169) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median . RPAR SEMICOLON

    RPAR            shift and go to state 370


state 355

    (170) add_quad_median -> empty .

    RPAR            reduce using rule 170 (add_quad_median -> empty .)


state 356

    (62) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR . remove_floor gosub add_temp
    (137) remove_floor -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    remove_floor                   shift and go to state 371
    empty                          shift and go to state 294

state 357

    (65) llamada_3 -> COMMA exp . verify_parameter llamada_3
    (74) verify_parameter -> . empty
    (178) empty -> .

    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)

    verify_parameter               shift and go to state 372
    empty                          shift and go to state 292

state 358

    (67) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor . SEMICOLON gosub

    SEMICOLON       shift and go to state 373


state 359

    (70) llamada_void_3 -> COMMA exp verify_parameter . llamada_void_3
    (70) llamada_void_3 -> . COMMA exp verify_parameter llamada_void_3
    (71) llamada_void_3 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 289
    RPAR            reduce using rule 178 (empty -> .)

    llamada_void_3                 shift and go to state 374
    empty                          shift and go to state 290

state 360

    (48) variable_3 -> L_S_BRACKET add_floor . exp R_S_BRACKET remove_floor
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 375
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 361

    (86) if_2 -> estatuto . if_2
    (86) if_2 -> . estatuto if_2
    (87) if_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 361
    if_2                           shift and go to state 376
    empty                          shift and go to state 363
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 362

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 377


state 363

    (87) if_2 -> empty .

    R_C_BRACKET     reduce using rule 87 (if_2 -> empty .)


state 364

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (108) exp -> . t_exp add_operator_4 exp_2
    (111) t_exp -> . g_exp add_operator_4 t_exp_2
    (114) g_exp -> . m_exp g_exp_2 add_operator_3
    (122) m_exp -> . t add_operator_2 m_exp_2
    (126) t -> . f add_operator_1 t_2
    (130) f -> . LPAR add_floor exp RPAR remove_floor
    (131) f -> . variable
    (132) f -> . llamada
    (133) f -> . f_2
    (44) variable -> . ID variable_2 variable_point
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (134) f_2 -> . CTE_I add_constant_i
    (135) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 149
    ID              shift and go to state 161
    CTE_I           shift and go to state 162
    CTE_F           shift and go to state 163

    exp                            shift and go to state 378
    t_exp                          shift and go to state 153
    g_exp                          shift and go to state 154
    m_exp                          shift and go to state 155
    t                              shift and go to state 156
    f                              shift and go to state 157
    variable                       shift and go to state 158
    llamada                        shift and go to state 159
    f_2                            shift and go to state 160

state 365

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (101) while_l_2 -> . estatuto while_l_2
    (102) while_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 379
    while_l_2                      shift and go to state 380
    empty                          shift and go to state 381
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 366

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV . RPAR SEMICOLON

    RPAR            shift and go to state 382


state 367

    (164) add_quad_readCSV -> empty .

    RPAR            reduce using rule 164 (add_quad_readCSV -> empty .)


state 368

    (165) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR . SEMICOLON

    SEMICOLON       shift and go to state 383


state 369

    (167) mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR . SEMICOLON

    SEMICOLON       shift and go to state 384


state 370

    (169) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR . SEMICOLON

    SEMICOLON       shift and go to state 385


state 371

    (62) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor . gosub add_temp
    (75) gosub -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    gosub                          shift and go to state 386
    empty                          shift and go to state 387

state 372

    (65) llamada_3 -> COMMA exp verify_parameter . llamada_3
    (65) llamada_3 -> . COMMA exp verify_parameter llamada_3
    (66) llamada_3 -> . empty
    (178) empty -> .

    COMMA           shift and go to state 327
    RPAR            reduce using rule 178 (empty -> .)

    llamada_3                      shift and go to state 388
    empty                          shift and go to state 328

state 373

    (67) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON . gosub
    (75) gosub -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)

    gosub                          shift and go to state 389
    empty                          shift and go to state 387

state 374

    (70) llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .

    RPAR            reduce using rule 70 (llamada_void_3 -> COMMA exp verify_parameter llamada_void_3 .)


state 375

    (48) variable_3 -> L_S_BRACKET add_floor exp . R_S_BRACKET remove_floor

    R_S_BRACKET     shift and go to state 390


state 376

    (86) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 86 (if_2 -> estatuto if_2 .)


state 377

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (88) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (89) if_3 -> . empty
    (178) empty -> .

    ELSE            shift and go to state 392
    SEMICOLON       reduce using rule 178 (empty -> .)

    if_3                           shift and go to state 391
    empty                          shift and go to state 393

state 378

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (98) for_point_3 -> . empty
    (178) empty -> .

    RPAR            reduce using rule 178 (empty -> .)

    for_point_3                    shift and go to state 394
    empty                          shift and go to state 395

state 379

    (101) while_l_2 -> estatuto . while_l_2
    (101) while_l_2 -> . estatuto while_l_2
    (102) while_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 379
    while_l_2                      shift and go to state 396
    empty                          shift and go to state 381
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 380

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 397


state 381

    (102) while_l_2 -> empty .

    R_C_BRACKET     reduce using rule 102 (while_l_2 -> empty .)


state 382

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR . SEMICOLON

    SEMICOLON       shift and go to state 398


state 383

    (165) mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .

    ID              reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    READ            reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    WRITE           reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    IF              reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    FOR             reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    WHILE           reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    RETURN          reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 165 (mean_func -> variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON .)


state 384

    (167) mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .

    ID              reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    READ            reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    WRITE           reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    IF              reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    FOR             reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    WHILE           reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    RETURN          reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 167 (mode_func -> variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON .)


state 385

    (169) median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .

    ID              reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    READ            reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    WRITE           reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    IF              reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    FOR             reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    WHILE           reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    RETURN          reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 169 (median_func -> variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON .)


state 386

    (62) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub . add_temp
    (76) add_temp -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    add_temp                       shift and go to state 399
    empty                          shift and go to state 400

state 387

    (75) gosub -> empty .

    ID              reduce using rule 75 (gosub -> empty .)
    READ            reduce using rule 75 (gosub -> empty .)
    WRITE           reduce using rule 75 (gosub -> empty .)
    IF              reduce using rule 75 (gosub -> empty .)
    FOR             reduce using rule 75 (gosub -> empty .)
    WHILE           reduce using rule 75 (gosub -> empty .)
    RETURN          reduce using rule 75 (gosub -> empty .)
    LINEAR_REG      reduce using rule 75 (gosub -> empty .)
    BOX_PLOT        reduce using rule 75 (gosub -> empty .)
    HISTOGRAM       reduce using rule 75 (gosub -> empty .)
    R_C_BRACKET     reduce using rule 75 (gosub -> empty .)
    TIMES           reduce using rule 75 (gosub -> empty .)
    DIVIDE          reduce using rule 75 (gosub -> empty .)
    PLUS            reduce using rule 75 (gosub -> empty .)
    MINUS           reduce using rule 75 (gosub -> empty .)
    LESS_EQUAL      reduce using rule 75 (gosub -> empty .)
    LESS            reduce using rule 75 (gosub -> empty .)
    GREATER_EQUAL   reduce using rule 75 (gosub -> empty .)
    GREATER         reduce using rule 75 (gosub -> empty .)
    COMPARE         reduce using rule 75 (gosub -> empty .)
    NOT_EQUAL       reduce using rule 75 (gosub -> empty .)
    AND             reduce using rule 75 (gosub -> empty .)
    OR              reduce using rule 75 (gosub -> empty .)
    COMMA           reduce using rule 75 (gosub -> empty .)
    RPAR            reduce using rule 75 (gosub -> empty .)
    SEMICOLON       reduce using rule 75 (gosub -> empty .)
    R_S_BRACKET     reduce using rule 75 (gosub -> empty .)
    TO              reduce using rule 75 (gosub -> empty .)


state 388

    (65) llamada_3 -> COMMA exp verify_parameter llamada_3 .

    RPAR            reduce using rule 65 (llamada_3 -> COMMA exp verify_parameter llamada_3 .)


state 389

    (67) llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .

    ID              reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    READ            reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    WRITE           reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    IF              reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    FOR             reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    WHILE           reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    RETURN          reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    LINEAR_REG      reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    BOX_PLOT        reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    HISTOGRAM       reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)
    R_C_BRACKET     reduce using rule 67 (llamada_void -> ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub .)


state 390

    (48) variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET . remove_floor
    (137) remove_floor -> . empty
    (178) empty -> .

    EQUAL           reduce using rule 178 (empty -> .)
    RPAR            reduce using rule 178 (empty -> .)
    TIMES           reduce using rule 178 (empty -> .)
    DIVIDE          reduce using rule 178 (empty -> .)
    PLUS            reduce using rule 178 (empty -> .)
    MINUS           reduce using rule 178 (empty -> .)
    LESS_EQUAL      reduce using rule 178 (empty -> .)
    LESS            reduce using rule 178 (empty -> .)
    GREATER_EQUAL   reduce using rule 178 (empty -> .)
    GREATER         reduce using rule 178 (empty -> .)
    COMPARE         reduce using rule 178 (empty -> .)
    NOT_EQUAL       reduce using rule 178 (empty -> .)
    AND             reduce using rule 178 (empty -> .)
    OR              reduce using rule 178 (empty -> .)
    COMMA           reduce using rule 178 (empty -> .)
    SEMICOLON       reduce using rule 178 (empty -> .)
    R_S_BRACKET     reduce using rule 178 (empty -> .)
    TO              reduce using rule 178 (empty -> .)

    remove_floor                   shift and go to state 401
    empty                          shift and go to state 294

state 391

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 402


state 392

    (88) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (92) if_point_3 -> . empty
    (178) empty -> .

    L_C_BRACKET     reduce using rule 178 (empty -> .)

    if_point_3                     shift and go to state 403
    empty                          shift and go to state 404

state 393

    (89) if_3 -> empty .

    SEMICOLON       reduce using rule 89 (if_3 -> empty .)


state 394

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 405


state 395

    (98) for_point_3 -> empty .

    RPAR            reduce using rule 98 (for_point_3 -> empty .)


state 396

    (101) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 101 (while_l_2 -> estatuto while_l_2 .)


state 397

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 406


state 398

    (163) read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .

    ID              reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    READ            reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    WRITE           reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    IF              reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    FOR             reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    WHILE           reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    RETURN          reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    LINEAR_REG      reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    BOX_PLOT        reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    HISTOGRAM       reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 163 (read_csv -> variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON .)


state 399

    (62) llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .

    ID              reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    READ            reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    WRITE           reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    IF              reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    FOR             reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    WHILE           reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    RETURN          reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    LINEAR_REG      reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    BOX_PLOT        reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    HISTOGRAM       reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    R_C_BRACKET     reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    TIMES           reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    DIVIDE          reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    PLUS            reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    MINUS           reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    LESS_EQUAL      reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    LESS            reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    GREATER_EQUAL   reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    GREATER         reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    COMPARE         reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    NOT_EQUAL       reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    AND             reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    OR              reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    COMMA           reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    RPAR            reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    SEMICOLON       reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    R_S_BRACKET     reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)
    TO              reduce using rule 62 (llamada -> ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp .)


state 400

    (76) add_temp -> empty .

    ID              reduce using rule 76 (add_temp -> empty .)
    READ            reduce using rule 76 (add_temp -> empty .)
    WRITE           reduce using rule 76 (add_temp -> empty .)
    IF              reduce using rule 76 (add_temp -> empty .)
    FOR             reduce using rule 76 (add_temp -> empty .)
    WHILE           reduce using rule 76 (add_temp -> empty .)
    RETURN          reduce using rule 76 (add_temp -> empty .)
    LINEAR_REG      reduce using rule 76 (add_temp -> empty .)
    BOX_PLOT        reduce using rule 76 (add_temp -> empty .)
    HISTOGRAM       reduce using rule 76 (add_temp -> empty .)
    R_C_BRACKET     reduce using rule 76 (add_temp -> empty .)
    TIMES           reduce using rule 76 (add_temp -> empty .)
    DIVIDE          reduce using rule 76 (add_temp -> empty .)
    PLUS            reduce using rule 76 (add_temp -> empty .)
    MINUS           reduce using rule 76 (add_temp -> empty .)
    LESS_EQUAL      reduce using rule 76 (add_temp -> empty .)
    LESS            reduce using rule 76 (add_temp -> empty .)
    GREATER_EQUAL   reduce using rule 76 (add_temp -> empty .)
    GREATER         reduce using rule 76 (add_temp -> empty .)
    COMPARE         reduce using rule 76 (add_temp -> empty .)
    NOT_EQUAL       reduce using rule 76 (add_temp -> empty .)
    AND             reduce using rule 76 (add_temp -> empty .)
    OR              reduce using rule 76 (add_temp -> empty .)
    COMMA           reduce using rule 76 (add_temp -> empty .)
    RPAR            reduce using rule 76 (add_temp -> empty .)
    SEMICOLON       reduce using rule 76 (add_temp -> empty .)
    R_S_BRACKET     reduce using rule 76 (add_temp -> empty .)
    TO              reduce using rule 76 (add_temp -> empty .)


state 401

    (48) variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .

    EQUAL           reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    RPAR            reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    TIMES           reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    DIVIDE          reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    PLUS            reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    MINUS           reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    LESS_EQUAL      reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    LESS            reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    GREATER_EQUAL   reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    GREATER         reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    COMPARE         reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    NOT_EQUAL       reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    AND             reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    OR              reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    COMMA           reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    SEMICOLON       reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    R_S_BRACKET     reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)
    TO              reduce using rule 48 (variable_3 -> L_S_BRACKET add_floor exp R_S_BRACKET remove_floor .)


state 402

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (91) if_point_2 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)

    if_point_2                     shift and go to state 407
    empty                          shift and go to state 408

state 403

    (88) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 409


state 404

    (92) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 92 (if_point_3 -> empty .)


state 405

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 410


state 406

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (105) while_point_3 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)

    while_point_3                  shift and go to state 411
    empty                          shift and go to state 412

state 407

    (85) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    LINEAR_REG      reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    BOX_PLOT        reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    HISTOGRAM       reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 85 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 408

    (91) if_point_2 -> empty .

    ID              reduce using rule 91 (if_point_2 -> empty .)
    READ            reduce using rule 91 (if_point_2 -> empty .)
    WRITE           reduce using rule 91 (if_point_2 -> empty .)
    IF              reduce using rule 91 (if_point_2 -> empty .)
    FOR             reduce using rule 91 (if_point_2 -> empty .)
    WHILE           reduce using rule 91 (if_point_2 -> empty .)
    RETURN          reduce using rule 91 (if_point_2 -> empty .)
    LINEAR_REG      reduce using rule 91 (if_point_2 -> empty .)
    BOX_PLOT        reduce using rule 91 (if_point_2 -> empty .)
    HISTOGRAM       reduce using rule 91 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 91 (if_point_2 -> empty .)


state 409

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 413
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 410

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 414
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 411

    (100) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    LINEAR_REG      reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    BOX_PLOT        reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    HISTOGRAM       reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 100 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 412

    (105) while_point_3 -> empty .

    ID              reduce using rule 105 (while_point_3 -> empty .)
    READ            reduce using rule 105 (while_point_3 -> empty .)
    WRITE           reduce using rule 105 (while_point_3 -> empty .)
    IF              reduce using rule 105 (while_point_3 -> empty .)
    FOR             reduce using rule 105 (while_point_3 -> empty .)
    WHILE           reduce using rule 105 (while_point_3 -> empty .)
    RETURN          reduce using rule 105 (while_point_3 -> empty .)
    LINEAR_REG      reduce using rule 105 (while_point_3 -> empty .)
    BOX_PLOT        reduce using rule 105 (while_point_3 -> empty .)
    HISTOGRAM       reduce using rule 105 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 105 (while_point_3 -> empty .)


state 413

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (86) if_2 -> . estatuto if_2
    (87) if_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 361
    if_2                           shift and go to state 415
    empty                          shift and go to state 363
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 414

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (94) for_l_2 -> . estatuto for_l_2
    (95) for_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 416
    for_l_2                        shift and go to state 417
    empty                          shift and go to state 418
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 415

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 419


state 416

    (94) for_l_2 -> estatuto . for_l_2
    (94) for_l_2 -> . estatuto for_l_2
    (95) for_l_2 -> . empty
    (50) estatuto -> . asigna
    (51) estatuto -> . llamada
    (52) estatuto -> . llamada_void
    (53) estatuto -> . read
    (54) estatuto -> . write
    (55) estatuto -> . if_1
    (56) estatuto -> . for_l
    (57) estatuto -> . while_l
    (58) estatuto -> . return
    (59) estatuto -> . funciones_especiales
    (178) empty -> .
    (60) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (62) llamada -> . ID verify_func not_void LPAR add_floor llamada_2 llamada_3 RPAR remove_floor gosub add_temp
    (67) llamada_void -> . ID verify_func LPAR add_floor llamada_void_2 llamada_void_3 RPAR remove_floor SEMICOLON gosub
    (77) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (79) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (85) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (93) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (100) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (106) return -> . RETURN LPAR exp check_valid_func RPAR SEMICOLON
    (155) funciones_especiales -> . read_csv
    (156) funciones_especiales -> . mean_func
    (157) funciones_especiales -> . mode_func
    (158) funciones_especiales -> . median_func
    (159) funciones_especiales -> . linear_reg_func
    (160) funciones_especiales -> . box_plt
    (161) funciones_especiales -> . histogram_plt
    (44) variable -> . ID variable_2 variable_point
    (163) read_csv -> . variable EQUAL check_df CSV_READ LPAR CTE_S check_name add_constant_s add_quad_readCSV RPAR SEMICOLON
    (165) mean_func -> . variable EQUAL check_df MEAN LPAR variable check_df add_quad_mean RPAR SEMICOLON
    (167) mode_func -> . variable EQUAL check_df MODE LPAR variable check_df add_quad_mode RPAR SEMICOLON
    (169) median_func -> . variable EQUAL check_df MEDIAN LPAR variable check_df add_quad_median RPAR SEMICOLON
    (171) linear_reg_func -> . LINEAR_REG LPAR variable check_df add_quad_linearR RPAR SEMICOLON
    (173) box_plt -> . BOX_PLOT LPAR variable check_df add_quad_box RPAR SEMICOLON
    (175) histogram_plt -> . HISTOGRAM LPAR variable check_df add_quad_hist RPAR SEMICOLON

    R_C_BRACKET     reduce using rule 178 (empty -> .)
    ID              shift and go to state 91
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    IF              shift and go to state 94
    FOR             shift and go to state 95
    WHILE           shift and go to state 96
    RETURN          shift and go to state 97
    LINEAR_REG      shift and go to state 105
    BOX_PLOT        shift and go to state 106
    HISTOGRAM       shift and go to state 107

    estatuto                       shift and go to state 416
    for_l_2                        shift and go to state 420
    empty                          shift and go to state 418
    asigna                         shift and go to state 80
    llamada                        shift and go to state 81
    llamada_void                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    return                         shift and go to state 88
    funciones_especiales           shift and go to state 89
    variable                       shift and go to state 90
    read_csv                       shift and go to state 98
    mean_func                      shift and go to state 99
    mode_func                      shift and go to state 100
    median_func                    shift and go to state 101
    linear_reg_func                shift and go to state 102
    box_plt                        shift and go to state 103
    histogram_plt                  shift and go to state 104

state 417

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 421


state 418

    (95) for_l_2 -> empty .

    R_C_BRACKET     reduce using rule 95 (for_l_2 -> empty .)


state 419

    (88) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 88 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 420

    (94) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 94 (for_l_2 -> estatuto for_l_2 .)


state 421

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 422


state 422

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (99) for_point_4 -> . empty
    (178) empty -> .

    ID              reduce using rule 178 (empty -> .)
    READ            reduce using rule 178 (empty -> .)
    WRITE           reduce using rule 178 (empty -> .)
    IF              reduce using rule 178 (empty -> .)
    FOR             reduce using rule 178 (empty -> .)
    WHILE           reduce using rule 178 (empty -> .)
    RETURN          reduce using rule 178 (empty -> .)
    LINEAR_REG      reduce using rule 178 (empty -> .)
    BOX_PLOT        reduce using rule 178 (empty -> .)
    HISTOGRAM       reduce using rule 178 (empty -> .)
    R_C_BRACKET     reduce using rule 178 (empty -> .)

    for_point_4                    shift and go to state 423
    empty                          shift and go to state 424

state 423

    (93) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    LINEAR_REG      reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    BOX_PLOT        reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    HISTOGRAM       reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 93 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 424

    (99) for_point_4 -> empty .

    ID              reduce using rule 99 (for_point_4 -> empty .)
    READ            reduce using rule 99 (for_point_4 -> empty .)
    WRITE           reduce using rule 99 (for_point_4 -> empty .)
    IF              reduce using rule 99 (for_point_4 -> empty .)
    FOR             reduce using rule 99 (for_point_4 -> empty .)
    WHILE           reduce using rule 99 (for_point_4 -> empty .)
    RETURN          reduce using rule 99 (for_point_4 -> empty .)
    LINEAR_REG      reduce using rule 99 (for_point_4 -> empty .)
    BOX_PLOT        reduce using rule 99 (for_point_4 -> empty .)
    HISTOGRAM       reduce using rule 99 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 99 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAR in state 118 resolved as shift
WARNING: reduce/reduce conflict in state 49 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 49
WARNING: Rule (vars_6 -> empty) is never reduced
