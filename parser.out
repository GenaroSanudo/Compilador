Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    main_point -> empty
Rule 11    body -> vars func_agrega_v estatuto body_2
Rule 12    body_2 -> estatuto body_2
Rule 13    body_2 -> empty
Rule 14    tipo_simple -> INT
Rule 15    tipo_simple -> FLOAT
Rule 16    tipo_simple -> CHAR
Rule 17    tipo_comp -> DATAFRAME
Rule 18    vars -> VAR vars_2 SEMICOLON vars_8
Rule 19    vars_2 -> tipo_comp vars_3
Rule 20    vars_2 -> tipo_simple vars_4
Rule 21    vars_3 -> ID vars_5
Rule 22    vars_4 -> vars_3
Rule 23    vars_4 -> ID vars_6
Rule 24    vars_5 -> COMMA vars_3
Rule 25    vars_5 -> empty
Rule 26    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 27    vars_6 -> empty
Rule 28    punto_id_especial -> empty
Rule 29    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 30    vars_7 -> var_array
Rule 31    var_array -> empty
Rule 32    var_mat -> empty
Rule 33    vars_8 -> vars
Rule 34    vars_8 -> empty
Rule 35    param -> tipo_simple ID punto_param param_2
Rule 36    param -> empty
Rule 37    param_2 -> COMMA param
Rule 38    param_2 -> empty
Rule 39    punto_param -> empty
Rule 40    variable -> ID variable_2 variable_point
Rule 41    variable_point -> empty
Rule 42    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 43    variable_2 -> empty
Rule 44    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 45    variable_3 -> empty
Rule 46    estatuto -> asigna
Rule 47    estatuto -> llamada
Rule 48    estatuto -> read
Rule 49    estatuto -> write
Rule 50    estatuto -> if_1
Rule 51    estatuto -> for_l
Rule 52    estatuto -> while_l
Rule 53    estatuto -> func_extra
Rule 54    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 55    asigna_point -> empty
Rule 56    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 57    llamada_2 -> COMMA exp llamada_2
Rule 58    llamada_2 -> empty
Rule 59    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 60    read_point -> empty
Rule 61    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 62    write_2 -> exp write_point
Rule 63    write_2 -> CTE_S add_constant_s write_point
Rule 64    write_3 -> COMMA write_2 write_3
Rule 65    write_3 -> empty
Rule 66    write_point -> empty
Rule 67    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 68    if_2 -> estatuto if_2
Rule 69    if_2 -> empty
Rule 70    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 71    if_3 -> empty
Rule 72    if_point -> empty
Rule 73    if_point_2 -> empty
Rule 74    if_point_3 -> empty
Rule 75    for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
Rule 76    for_l_2 -> estatuto for_l_2
Rule 77    for_l_2 -> empty
Rule 78    while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 79    while_l_2 -> estatuto while_l_2
Rule 80    while_l_2 -> empty
Rule 81    while_point -> empty
Rule 82    while_point_2 -> empty
Rule 83    while_point_3 -> empty
Rule 84    func_extra -> empty
Rule 85    exp -> t_exp add_operator_4 exp_2
Rule 86    exp_2 -> OR add_operator exp
Rule 87    exp_2 -> empty
Rule 88    t_exp -> g_exp add_operator_4 t_exp_2
Rule 89    t_exp_2 -> AND add_operator t_exp
Rule 90    t_exp_2 -> empty
Rule 91    g_exp -> m_exp g_exp_2 add_operator_3
Rule 92    g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 93    g_exp_2 -> LESS add_operator m_exp
Rule 94    g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 95    g_exp_2 -> GREATER add_operator m_exp
Rule 96    g_exp_2 -> COMPARE add_operator m_exp
Rule 97    g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 98    g_exp_2 -> empty
Rule 99    m_exp -> t add_operator_2 m_exp_2
Rule 100   m_exp_2 -> PLUS add_operator m_exp
Rule 101   m_exp_2 -> MINUS add_operator m_exp
Rule 102   m_exp_2 -> empty
Rule 103   t -> f add_operator_1 t_2
Rule 104   t_2 -> TIMES add_operator t
Rule 105   t_2 -> DIVIDE add_operator t
Rule 106   t_2 -> empty
Rule 107   f -> LPAR add_floor exp RPAR remove_floor
Rule 108   f -> variable
Rule 109   f -> llamada
Rule 110   f -> f_2
Rule 111   f_2 -> CTE_I add_constant_i
Rule 112   f_2 -> CTE_F add_constant_f
Rule 113   add_floor -> empty
Rule 114   remove_floor -> empty
Rule 115   add_operator -> empty
Rule 116   add_operator_1 -> empty
Rule 117   add_operator_2 -> empty
Rule 118   add_operator_3 -> empty
Rule 119   add_operator_4 -> empty
Rule 120   add_constant_i -> empty
Rule 121   add_constant_s -> empty
Rule 122   add_constant_f -> empty
Rule 123   function -> FUNC function_2 SEMICOLON function_3
Rule 124   function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
Rule 125   function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET
Rule 126   function_3 -> function
Rule 127   function_3 -> empty
Rule 128   function_punto1 -> empty
Rule 129   function_punto2 -> empty
Rule 130   func_agrega_v -> empty
Rule 131   empty -> <empty>

Terminals, with rules where they appear

AND                  : 89
CHAR                 : 16
COLON                : 1
COMMA                : 24 37 57 64
COMPARE              : 96
CTE_F                : 112
CTE_I                : 26 29 111
CTE_S                : 63
DATAFRAME            : 17
DIVIDE               : 105
ELSE                 : 70
EQUAL                : 54 75
FLOAT                : 15
FOR                  : 75
FUNC                 : 123
GREATER              : 95
GREATER_EQUAL        : 94
ID                   : 1 21 23 35 40 56 75 124 125
IF                   : 67
INT                  : 14
LESS                 : 93
LESS_EQUAL           : 92
LPAR                 : 9 56 59 61 67 75 78 107 124 124 125
L_C_BRACKET          : 9 67 70 75 78 124 125
L_S_BRACKET          : 26 29 42 44
MAIN                 : 9
MINUS                : 101
NOT_EQUAL            : 97
OR                   : 86
PLUS                 : 100
PROGRAM              : 1
READ                 : 59
RETURN               : 124
RPAR                 : 9 56 59 61 67 75 75 78 107 124 124 125
R_C_BRACKET          : 9 67 70 75 78 124 125
R_S_BRACKET          : 26 29 42 44
SEMICOLON            : 9 18 54 56 59 61 67 75 78 123 124
STRING               : 
TIMES                : 104
TO                   : 75
VAR                  : 18
VOID                 : 125
WHILE                : 78
WRITE                : 61
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 112
add_constant_i       : 111
add_constant_s       : 63
add_floor            : 107
add_operator         : 54 86 89 92 93 94 95 96 97 100 101 104 105
add_operator_1       : 103
add_operator_2       : 99
add_operator_3       : 91
add_operator_4       : 85 88
asigna               : 46
asigna_point         : 54
body                 : 9 124 125
body_2               : 11 12
empty                : 2 4 6 8 10 13 25 27 28 31 32 34 36 38 39 41 43 45 55 58 60 65 66 69 71 72 73 74 77 80 81 82 83 84 87 90 98 102 106 113 114 115 116 117 118 119 120 121 122 127 128 129 130
estatuto             : 11 12 67 68 70 75 76 78 79
exp                  : 42 44 54 56 57 62 67 75 75 78 86 107 124
exp_2                : 85
f                    : 103
f_2                  : 110
for_l                : 51
for_l_2              : 75 76
func_agrega_v        : 11
func_extra           : 53
function             : 7 126
function_2           : 123
function_3           : 123
function_punto1      : 124
function_punto2      : 125
g_exp                : 88
g_exp_2              : 91
if_1                 : 50
if_2                 : 67 68 70
if_3                 : 67
if_point             : 67
if_point_2           : 67
if_point_3           : 70
llamada              : 47 109
llamada_2            : 56 57
m_exp                : 91 92 93 94 95 96 97 100 101
m_exp_2              : 99
main                 : 1
main_point           : 9
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 37 124 125
param_2              : 35
program              : 0
program_point        : 1
punto_id_especial    : 26
punto_param          : 35
read                 : 48
read_point           : 59
remove_floor         : 107
t                    : 99 104 105
t_2                  : 103
t_exp                : 85 89
t_exp_2              : 88
tipo_comp            : 19
tipo_simple          : 20 35 124
var_array            : 30
var_mat              : 29
variable             : 54 59 108
variable_2           : 40
variable_3           : 42
variable_point       : 40
vars                 : 5 11 33
vars_2               : 18
vars_3               : 19 22 24
vars_4               : 20
vars_5               : 21
vars_6               : 23
vars_7               : 26
vars_8               : 18
while_l              : 52
while_l_2            : 78 79
while_point          : 78
while_point_2        : 78
while_point_3        : 78
write                : 49
write_2              : 61 64
write_3              : 61 64
write_point          : 62 63

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (131) empty -> .

    ID              reduce using rule 131 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (131) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (131) empty -> .

    FUNC            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (18) vars -> VAR . vars_2 SEMICOLON vars_8
    (19) vars_2 -> . tipo_comp vars_3
    (20) vars_2 -> . tipo_simple vars_4
    (17) tipo_comp -> . DATAFRAME
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
    (10) main_point -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (123) function -> . FUNC function_2 SEMICOLON function_3
    (131) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 131 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (18) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (19) vars_2 -> tipo_comp . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (20) vars_2 -> tipo_simple . vars_4
    (22) vars_4 -> . vars_3
    (23) vars_4 -> . ID vars_6
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (17) tipo_comp -> DATAFRAME .

    ID              reduce using rule 17 (tipo_comp -> DATAFRAME .)


state 20

    (14) tipo_simple -> INT .

    ID              reduce using rule 14 (tipo_simple -> INT .)


state 21

    (15) tipo_simple -> FLOAT .

    ID              reduce using rule 15 (tipo_simple -> FLOAT .)


state 22

    (16) tipo_simple -> CHAR .

    ID              reduce using rule 16 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 35


state 24

    (10) main_point -> empty .

    LPAR            reduce using rule 10 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 26

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 27

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 28

    (123) function -> FUNC . function_2 SEMICOLON function_3
    (124) function_2 -> . tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (125) function_2 -> . VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    VOID            shift and go to state 38
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 36
    tipo_simple                    shift and go to state 37

state 29

    (18) vars -> VAR vars_2 SEMICOLON . vars_8
    (33) vars_8 -> . vars
    (34) vars_8 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (131) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    vars_8                         shift and go to state 39
    vars                           shift and go to state 40
    empty                          shift and go to state 41

state 30

    (19) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_comp vars_3 .)


state 31

    (21) vars_3 -> ID . vars_5
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 43
    SEMICOLON       reduce using rule 131 (empty -> .)

    vars_5                         shift and go to state 42
    empty                          shift and go to state 44

state 32

    (20) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 20 (vars_2 -> tipo_simple vars_4 .)


state 33

    (22) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 22 (vars_4 -> vars_3 .)


state 34

    (23) vars_4 -> ID . vars_6
    (21) vars_3 -> ID . vars_5
    (26) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (27) vars_6 -> . empty
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (28) punto_id_especial -> . empty
    (131) empty -> .

    COMMA           shift and go to state 43
    SEMICOLON       reduce using rule 131 (empty -> .)
    L_S_BRACKET     reduce using rule 131 (empty -> .)

    vars_6                         shift and go to state 45
    vars_5                         shift and go to state 42
    punto_id_especial              shift and go to state 46
    empty                          shift and go to state 47

state 35

    (9) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 48


state 36

    (123) function -> FUNC function_2 . SEMICOLON function_3

    SEMICOLON       shift and go to state 49


state 37

    (124) function_2 -> tipo_simple . ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    ID              shift and go to state 50


state 38

    (125) function_2 -> VOID . ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET

    ID              shift and go to state 51


state 39

    (18) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 40

    (33) vars_8 -> vars .

    FUNC            reduce using rule 33 (vars_8 -> vars .)
    MAIN            reduce using rule 33 (vars_8 -> vars .)
    ID              reduce using rule 33 (vars_8 -> vars .)
    READ            reduce using rule 33 (vars_8 -> vars .)
    WRITE           reduce using rule 33 (vars_8 -> vars .)
    IF              reduce using rule 33 (vars_8 -> vars .)
    FOR             reduce using rule 33 (vars_8 -> vars .)
    WHILE           reduce using rule 33 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> vars .)
    RETURN          reduce using rule 33 (vars_8 -> vars .)


state 41

    (34) vars_8 -> empty .

    FUNC            reduce using rule 34 (vars_8 -> empty .)
    MAIN            reduce using rule 34 (vars_8 -> empty .)
    ID              reduce using rule 34 (vars_8 -> empty .)
    READ            reduce using rule 34 (vars_8 -> empty .)
    WRITE           reduce using rule 34 (vars_8 -> empty .)
    IF              reduce using rule 34 (vars_8 -> empty .)
    FOR             reduce using rule 34 (vars_8 -> empty .)
    WHILE           reduce using rule 34 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 34 (vars_8 -> empty .)
    RETURN          reduce using rule 34 (vars_8 -> empty .)


state 42

    (21) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 21 (vars_3 -> ID vars_5 .)


state 43

    (24) vars_5 -> COMMA . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 52

state 44

    (25) vars_5 -> empty .

    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)


state 45

    (23) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 23 (vars_4 -> ID vars_6 .)


state 46

    (26) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 53


state 47

    (27) vars_6 -> empty .
    (25) vars_5 -> empty .
    (28) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 28 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 27 (vars_6 -> empty .) ]


state 48

    (9) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 54


state 49

    (123) function -> FUNC function_2 SEMICOLON . function_3
    (126) function_3 -> . function
    (127) function_3 -> . empty
    (123) function -> . FUNC function_2 SEMICOLON function_3
    (131) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 131 (empty -> .)

    function_3                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 50

    (124) function_2 -> tipo_simple ID . function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (128) function_punto1 -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 51

    (125) function_2 -> VOID ID . function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET
    (129) function_punto2 -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)

    function_punto2                shift and go to state 60
    empty                          shift and go to state 61

state 52

    (24) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 24 (vars_5 -> COMMA vars_3 .)


state 53

    (26) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 62


state 54

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 63
    vars                           shift and go to state 64

state 55

    (123) function -> FUNC function_2 SEMICOLON function_3 .

    MAIN            reduce using rule 123 (function -> FUNC function_2 SEMICOLON function_3 .)


state 56

    (126) function_3 -> function .

    MAIN            reduce using rule 126 (function_3 -> function .)


state 57

    (127) function_3 -> empty .

    MAIN            reduce using rule 127 (function_3 -> empty .)


state 58

    (124) function_2 -> tipo_simple ID function_punto1 . LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    LPAR            shift and go to state 65


state 59

    (128) function_punto1 -> empty .

    LPAR            reduce using rule 128 (function_punto1 -> empty .)


state 60

    (125) function_2 -> VOID ID function_punto2 . LPAR param RPAR L_C_BRACKET body R_C_BRACKET

    LPAR            shift and go to state 66


state 61

    (129) function_punto2 -> empty .

    LPAR            reduce using rule 129 (function_punto2 -> empty .)


state 62

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 67


state 63

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 68


state 64

    (11) body -> vars . func_agrega_v estatuto body_2
    (130) func_agrega_v -> . empty
    (131) empty -> .

    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    func_agrega_v                  shift and go to state 69
    empty                          shift and go to state 70

state 65

    (124) function_2 -> tipo_simple ID function_punto1 LPAR . param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (131) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 131 (empty -> .)

    tipo_simple                    shift and go to state 71
    param                          shift and go to state 72
    empty                          shift and go to state 73

state 66

    (125) function_2 -> VOID ID function_punto2 LPAR . param RPAR L_C_BRACKET body R_C_BRACKET
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (131) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 131 (empty -> .)

    param                          shift and go to state 74
    tipo_simple                    shift and go to state 71
    empty                          shift and go to state 73

state 67

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (29) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (30) vars_7 -> . var_array
    (31) var_array -> . empty
    (131) empty -> .

    L_S_BRACKET     shift and go to state 75
    SEMICOLON       reduce using rule 131 (empty -> .)

    vars_7                         shift and go to state 76
    var_array                      shift and go to state 77
    empty                          shift and go to state 78

state 68

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 79


state 69

    (11) body -> vars func_agrega_v . estatuto body_2
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 80
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 70

    (130) func_agrega_v -> empty .

    ID              reduce using rule 130 (func_agrega_v -> empty .)
    READ            reduce using rule 130 (func_agrega_v -> empty .)
    WRITE           reduce using rule 130 (func_agrega_v -> empty .)
    IF              reduce using rule 130 (func_agrega_v -> empty .)
    FOR             reduce using rule 130 (func_agrega_v -> empty .)
    WHILE           reduce using rule 130 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 130 (func_agrega_v -> empty .)
    RETURN          reduce using rule 130 (func_agrega_v -> empty .)


state 71

    (35) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 97


state 72

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param . RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    RPAR            shift and go to state 98


state 73

    (36) param -> empty .

    RPAR            reduce using rule 36 (param -> empty .)


state 74

    (125) function_2 -> VOID ID function_punto2 LPAR param . RPAR L_C_BRACKET body R_C_BRACKET

    RPAR            shift and go to state 99


state 75

    (29) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 100


state 76

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 26 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 77

    (30) vars_7 -> var_array .

    SEMICOLON       reduce using rule 30 (vars_7 -> var_array .)


state 78

    (31) var_array -> empty .

    SEMICOLON       reduce using rule 31 (var_array -> empty .)


state 79

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 80

    (11) body -> vars func_agrega_v estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 101
    body_2                         shift and go to state 102
    empty                          shift and go to state 103
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 81

    (46) estatuto -> asigna .

    ID              reduce using rule 46 (estatuto -> asigna .)
    READ            reduce using rule 46 (estatuto -> asigna .)
    WRITE           reduce using rule 46 (estatuto -> asigna .)
    IF              reduce using rule 46 (estatuto -> asigna .)
    FOR             reduce using rule 46 (estatuto -> asigna .)
    WHILE           reduce using rule 46 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 46 (estatuto -> asigna .)
    RETURN          reduce using rule 46 (estatuto -> asigna .)


state 82

    (47) estatuto -> llamada .

    ID              reduce using rule 47 (estatuto -> llamada .)
    READ            reduce using rule 47 (estatuto -> llamada .)
    WRITE           reduce using rule 47 (estatuto -> llamada .)
    IF              reduce using rule 47 (estatuto -> llamada .)
    FOR             reduce using rule 47 (estatuto -> llamada .)
    WHILE           reduce using rule 47 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> llamada .)
    RETURN          reduce using rule 47 (estatuto -> llamada .)


state 83

    (48) estatuto -> read .

    ID              reduce using rule 48 (estatuto -> read .)
    READ            reduce using rule 48 (estatuto -> read .)
    WRITE           reduce using rule 48 (estatuto -> read .)
    IF              reduce using rule 48 (estatuto -> read .)
    FOR             reduce using rule 48 (estatuto -> read .)
    WHILE           reduce using rule 48 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> read .)
    RETURN          reduce using rule 48 (estatuto -> read .)


state 84

    (49) estatuto -> write .

    ID              reduce using rule 49 (estatuto -> write .)
    READ            reduce using rule 49 (estatuto -> write .)
    WRITE           reduce using rule 49 (estatuto -> write .)
    IF              reduce using rule 49 (estatuto -> write .)
    FOR             reduce using rule 49 (estatuto -> write .)
    WHILE           reduce using rule 49 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> write .)
    RETURN          reduce using rule 49 (estatuto -> write .)


state 85

    (50) estatuto -> if_1 .

    ID              reduce using rule 50 (estatuto -> if_1 .)
    READ            reduce using rule 50 (estatuto -> if_1 .)
    WRITE           reduce using rule 50 (estatuto -> if_1 .)
    IF              reduce using rule 50 (estatuto -> if_1 .)
    FOR             reduce using rule 50 (estatuto -> if_1 .)
    WHILE           reduce using rule 50 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> if_1 .)
    RETURN          reduce using rule 50 (estatuto -> if_1 .)


state 86

    (51) estatuto -> for_l .

    ID              reduce using rule 51 (estatuto -> for_l .)
    READ            reduce using rule 51 (estatuto -> for_l .)
    WRITE           reduce using rule 51 (estatuto -> for_l .)
    IF              reduce using rule 51 (estatuto -> for_l .)
    FOR             reduce using rule 51 (estatuto -> for_l .)
    WHILE           reduce using rule 51 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> for_l .)
    RETURN          reduce using rule 51 (estatuto -> for_l .)


state 87

    (52) estatuto -> while_l .

    ID              reduce using rule 52 (estatuto -> while_l .)
    READ            reduce using rule 52 (estatuto -> while_l .)
    WRITE           reduce using rule 52 (estatuto -> while_l .)
    IF              reduce using rule 52 (estatuto -> while_l .)
    FOR             reduce using rule 52 (estatuto -> while_l .)
    WHILE           reduce using rule 52 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> while_l .)
    RETURN          reduce using rule 52 (estatuto -> while_l .)


state 88

    (53) estatuto -> func_extra .

    ID              reduce using rule 53 (estatuto -> func_extra .)
    READ            reduce using rule 53 (estatuto -> func_extra .)
    WRITE           reduce using rule 53 (estatuto -> func_extra .)
    IF              reduce using rule 53 (estatuto -> func_extra .)
    FOR             reduce using rule 53 (estatuto -> func_extra .)
    WHILE           reduce using rule 53 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> func_extra .)
    RETURN          reduce using rule 53 (estatuto -> func_extra .)


state 89

    (54) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 104


state 90

    (56) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (40) variable -> ID . variable_2 variable_point
    (42) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (43) variable_2 -> . empty
    (131) empty -> .

    LPAR            shift and go to state 105
    L_S_BRACKET     shift and go to state 107
    EQUAL           reduce using rule 131 (empty -> .)

    variable_2                     shift and go to state 106
    empty                          shift and go to state 108

state 91

    (59) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 109


state 92

    (61) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 110


state 93

    (67) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 111


state 94

    (75) for_l -> FOR . LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 112


state 95

    (78) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (81) while_point -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)

    while_point                    shift and go to state 113
    empty                          shift and go to state 114

state 96

    (84) func_extra -> empty .

    ID              reduce using rule 84 (func_extra -> empty .)
    READ            reduce using rule 84 (func_extra -> empty .)
    WRITE           reduce using rule 84 (func_extra -> empty .)
    IF              reduce using rule 84 (func_extra -> empty .)
    FOR             reduce using rule 84 (func_extra -> empty .)
    WHILE           reduce using rule 84 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 84 (func_extra -> empty .)
    RETURN          reduce using rule 84 (func_extra -> empty .)


state 97

    (35) param -> tipo_simple ID . punto_param param_2
    (39) punto_param -> . empty
    (131) empty -> .

    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)

    punto_param                    shift and go to state 115
    empty                          shift and go to state 116

state 98

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR . L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    L_C_BRACKET     shift and go to state 117


state 99

    (125) function_2 -> VOID ID function_punto2 LPAR param RPAR . L_C_BRACKET body R_C_BRACKET

    L_C_BRACKET     shift and go to state 118


state 100

    (29) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 119


state 101

    (12) body_2 -> estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 101
    body_2                         shift and go to state 120
    empty                          shift and go to state 103
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 102

    (11) body -> vars func_agrega_v estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body -> vars func_agrega_v estatuto body_2 .)
    RETURN          reduce using rule 11 (body -> vars func_agrega_v estatuto body_2 .)


state 103

    (13) body_2 -> empty .
    (84) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 13 (body_2 -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 13 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 13 (body_2 -> empty .)
    RETURN          reduce using rule 13 (body_2 -> empty .)
    ID              reduce using rule 84 (func_extra -> empty .)
    READ            reduce using rule 84 (func_extra -> empty .)
    WRITE           reduce using rule 84 (func_extra -> empty .)
    IF              reduce using rule 84 (func_extra -> empty .)
    FOR             reduce using rule 84 (func_extra -> empty .)
    WHILE           reduce using rule 84 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 84 (func_extra -> empty .) ]
  ! RETURN          [ reduce using rule 84 (func_extra -> empty .) ]


state 104

    (54) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 121
    empty                          shift and go to state 122

state 105

    (56) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 125
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 106

    (40) variable -> ID variable_2 . variable_point
    (41) variable_point -> . empty
    (131) empty -> .

    EQUAL           reduce using rule 131 (empty -> .)
    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    variable_point                 shift and go to state 136
    empty                          shift and go to state 137

state 107

    (42) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 138
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 108

    (43) variable_2 -> empty .

    EQUAL           reduce using rule 43 (variable_2 -> empty .)
    TIMES           reduce using rule 43 (variable_2 -> empty .)
    DIVIDE          reduce using rule 43 (variable_2 -> empty .)
    PLUS            reduce using rule 43 (variable_2 -> empty .)
    MINUS           reduce using rule 43 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 43 (variable_2 -> empty .)
    LESS            reduce using rule 43 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 43 (variable_2 -> empty .)
    GREATER         reduce using rule 43 (variable_2 -> empty .)
    COMPARE         reduce using rule 43 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 43 (variable_2 -> empty .)
    AND             reduce using rule 43 (variable_2 -> empty .)
    OR              reduce using rule 43 (variable_2 -> empty .)
    COMMA           reduce using rule 43 (variable_2 -> empty .)
    RPAR            reduce using rule 43 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 43 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 43 (variable_2 -> empty .)
    TO              reduce using rule 43 (variable_2 -> empty .)


state 109

    (59) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (40) variable -> . ID variable_2 variable_point

    ID              shift and go to state 140

    variable                       shift and go to state 139

state 110

    (61) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (62) write_2 -> . exp write_point
    (63) write_2 -> . CTE_S add_constant_s write_point
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 143
    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    write_2                        shift and go to state 141
    exp                            shift and go to state 142
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 111

    (67) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 144
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 112

    (75) for_l -> FOR LPAR . ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    ID              shift and go to state 145


state 113

    (78) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 146


state 114

    (81) while_point -> empty .

    LPAR            reduce using rule 81 (while_point -> empty .)


state 115

    (35) param -> tipo_simple ID punto_param . param_2
    (37) param_2 -> . COMMA param
    (38) param_2 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 148
    RPAR            reduce using rule 131 (empty -> .)

    param_2                        shift and go to state 147
    empty                          shift and go to state 149

state 116

    (39) punto_param -> empty .

    COMMA           reduce using rule 39 (punto_param -> empty .)
    RPAR            reduce using rule 39 (punto_param -> empty .)


state 117

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET . body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 150
    vars                           shift and go to state 64

state 118

    (125) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET . body R_C_BRACKET
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 151
    vars                           shift and go to state 64

state 119

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (32) var_mat -> . empty
    (131) empty -> .

    SEMICOLON       reduce using rule 131 (empty -> .)

    var_mat                        shift and go to state 152
    empty                          shift and go to state 153

state 120

    (12) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 12 (body_2 -> estatuto body_2 .)
    RETURN          reduce using rule 12 (body_2 -> estatuto body_2 .)


state 121

    (54) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    variable                       shift and go to state 131
    exp                            shift and go to state 154
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 122

    (115) add_operator -> empty .

    LPAR            reduce using rule 115 (add_operator -> empty .)
    ID              reduce using rule 115 (add_operator -> empty .)
    CTE_I           reduce using rule 115 (add_operator -> empty .)
    CTE_F           reduce using rule 115 (add_operator -> empty .)


state 123

    (40) variable -> ID . variable_2 variable_point
    (56) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (42) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (43) variable_2 -> . empty
    (131) empty -> .

    LPAR            shift and go to state 105
    L_S_BRACKET     shift and go to state 107
    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    variable_2                     shift and go to state 106
    empty                          shift and go to state 108

state 124

    (107) f -> LPAR . add_floor exp RPAR remove_floor
    (113) add_floor -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_floor                      shift and go to state 155
    empty                          shift and go to state 156

state 125

    (56) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (57) llamada_2 -> . COMMA exp llamada_2
    (58) llamada_2 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 158
    RPAR            reduce using rule 131 (empty -> .)

    llamada_2                      shift and go to state 157
    empty                          shift and go to state 159

state 126

    (85) exp -> t_exp . add_operator_4 exp_2
    (119) add_operator_4 -> . empty
    (131) empty -> .

    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_operator_4                 shift and go to state 160
    empty                          shift and go to state 161

state 127

    (88) t_exp -> g_exp . add_operator_4 t_exp_2
    (119) add_operator_4 -> . empty
    (131) empty -> .

    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_operator_4                 shift and go to state 162
    empty                          shift and go to state 161

state 128

    (91) g_exp -> m_exp . g_exp_2 add_operator_3
    (92) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (93) g_exp_2 -> . LESS add_operator m_exp
    (94) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (95) g_exp_2 -> . GREATER add_operator m_exp
    (96) g_exp_2 -> . COMPARE add_operator m_exp
    (97) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (98) g_exp_2 -> . empty
    (131) empty -> .

    LESS_EQUAL      shift and go to state 164
    LESS            shift and go to state 165
    GREATER_EQUAL   shift and go to state 166
    GREATER         shift and go to state 167
    COMPARE         shift and go to state 168
    NOT_EQUAL       shift and go to state 169
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    g_exp_2                        shift and go to state 163
    empty                          shift and go to state 170

state 129

    (99) m_exp -> t . add_operator_2 m_exp_2
    (117) add_operator_2 -> . empty
    (131) empty -> .

    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_operator_2                 shift and go to state 171
    empty                          shift and go to state 172

state 130

    (103) t -> f . add_operator_1 t_2
    (116) add_operator_1 -> . empty
    (131) empty -> .

    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_operator_1                 shift and go to state 173
    empty                          shift and go to state 174

state 131

    (108) f -> variable .

    TIMES           reduce using rule 108 (f -> variable .)
    DIVIDE          reduce using rule 108 (f -> variable .)
    PLUS            reduce using rule 108 (f -> variable .)
    MINUS           reduce using rule 108 (f -> variable .)
    LESS_EQUAL      reduce using rule 108 (f -> variable .)
    LESS            reduce using rule 108 (f -> variable .)
    GREATER_EQUAL   reduce using rule 108 (f -> variable .)
    GREATER         reduce using rule 108 (f -> variable .)
    COMPARE         reduce using rule 108 (f -> variable .)
    NOT_EQUAL       reduce using rule 108 (f -> variable .)
    AND             reduce using rule 108 (f -> variable .)
    OR              reduce using rule 108 (f -> variable .)
    COMMA           reduce using rule 108 (f -> variable .)
    RPAR            reduce using rule 108 (f -> variable .)
    R_S_BRACKET     reduce using rule 108 (f -> variable .)
    SEMICOLON       reduce using rule 108 (f -> variable .)
    TO              reduce using rule 108 (f -> variable .)


state 132

    (109) f -> llamada .

    TIMES           reduce using rule 109 (f -> llamada .)
    DIVIDE          reduce using rule 109 (f -> llamada .)
    PLUS            reduce using rule 109 (f -> llamada .)
    MINUS           reduce using rule 109 (f -> llamada .)
    LESS_EQUAL      reduce using rule 109 (f -> llamada .)
    LESS            reduce using rule 109 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 109 (f -> llamada .)
    GREATER         reduce using rule 109 (f -> llamada .)
    COMPARE         reduce using rule 109 (f -> llamada .)
    NOT_EQUAL       reduce using rule 109 (f -> llamada .)
    AND             reduce using rule 109 (f -> llamada .)
    OR              reduce using rule 109 (f -> llamada .)
    COMMA           reduce using rule 109 (f -> llamada .)
    RPAR            reduce using rule 109 (f -> llamada .)
    R_S_BRACKET     reduce using rule 109 (f -> llamada .)
    SEMICOLON       reduce using rule 109 (f -> llamada .)
    TO              reduce using rule 109 (f -> llamada .)


state 133

    (110) f -> f_2 .

    TIMES           reduce using rule 110 (f -> f_2 .)
    DIVIDE          reduce using rule 110 (f -> f_2 .)
    PLUS            reduce using rule 110 (f -> f_2 .)
    MINUS           reduce using rule 110 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 110 (f -> f_2 .)
    LESS            reduce using rule 110 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 110 (f -> f_2 .)
    GREATER         reduce using rule 110 (f -> f_2 .)
    COMPARE         reduce using rule 110 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 110 (f -> f_2 .)
    AND             reduce using rule 110 (f -> f_2 .)
    OR              reduce using rule 110 (f -> f_2 .)
    COMMA           reduce using rule 110 (f -> f_2 .)
    RPAR            reduce using rule 110 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 110 (f -> f_2 .)
    SEMICOLON       reduce using rule 110 (f -> f_2 .)
    TO              reduce using rule 110 (f -> f_2 .)


state 134

    (111) f_2 -> CTE_I . add_constant_i
    (120) add_constant_i -> . empty
    (131) empty -> .

    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_constant_i                 shift and go to state 175
    empty                          shift and go to state 176

state 135

    (112) f_2 -> CTE_F . add_constant_f
    (122) add_constant_f -> . empty
    (131) empty -> .

    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_constant_f                 shift and go to state 177
    empty                          shift and go to state 178

state 136

    (40) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 40 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 40 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 40 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 40 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 40 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 40 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 40 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 40 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 40 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 40 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 40 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 40 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 40 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 40 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 40 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 40 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 40 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 40 (variable -> ID variable_2 variable_point .)


state 137

    (41) variable_point -> empty .

    EQUAL           reduce using rule 41 (variable_point -> empty .)
    TIMES           reduce using rule 41 (variable_point -> empty .)
    DIVIDE          reduce using rule 41 (variable_point -> empty .)
    PLUS            reduce using rule 41 (variable_point -> empty .)
    MINUS           reduce using rule 41 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 41 (variable_point -> empty .)
    LESS            reduce using rule 41 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 41 (variable_point -> empty .)
    GREATER         reduce using rule 41 (variable_point -> empty .)
    COMPARE         reduce using rule 41 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 41 (variable_point -> empty .)
    AND             reduce using rule 41 (variable_point -> empty .)
    OR              reduce using rule 41 (variable_point -> empty .)
    COMMA           reduce using rule 41 (variable_point -> empty .)
    RPAR            reduce using rule 41 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 41 (variable_point -> empty .)
    SEMICOLON       reduce using rule 41 (variable_point -> empty .)
    TO              reduce using rule 41 (variable_point -> empty .)


state 138

    (42) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 179


state 139

    (59) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (60) read_point -> . empty
    (131) empty -> .

    RPAR            reduce using rule 131 (empty -> .)

    read_point                     shift and go to state 180
    empty                          shift and go to state 181

state 140

    (40) variable -> ID . variable_2 variable_point
    (42) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (43) variable_2 -> . empty
    (131) empty -> .

    L_S_BRACKET     shift and go to state 107
    RPAR            reduce using rule 131 (empty -> .)

    variable_2                     shift and go to state 106
    empty                          shift and go to state 108

state 141

    (61) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (64) write_3 -> . COMMA write_2 write_3
    (65) write_3 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 183
    RPAR            reduce using rule 131 (empty -> .)

    write_3                        shift and go to state 182
    empty                          shift and go to state 184

state 142

    (62) write_2 -> exp . write_point
    (66) write_point -> . empty
    (131) empty -> .

    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)

    write_point                    shift and go to state 185
    empty                          shift and go to state 186

state 143

    (63) write_2 -> CTE_S . add_constant_s write_point
    (121) add_constant_s -> . empty
    (131) empty -> .

    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)

    add_constant_s                 shift and go to state 187
    empty                          shift and go to state 188

state 144

    (67) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (72) if_point -> . empty
    (131) empty -> .

    RPAR            reduce using rule 131 (empty -> .)

    if_point                       shift and go to state 189
    empty                          shift and go to state 190

state 145

    (75) for_l -> FOR LPAR ID . RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 191


state 146

    (78) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 192
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 147

    (35) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 35 (param -> tipo_simple ID punto_param param_2 .)


state 148

    (37) param_2 -> COMMA . param
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (131) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 131 (empty -> .)

    param                          shift and go to state 193
    tipo_simple                    shift and go to state 71
    empty                          shift and go to state 73

state 149

    (38) param_2 -> empty .

    RPAR            reduce using rule 38 (param_2 -> empty .)


state 150

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body . RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    RETURN          shift and go to state 194


state 151

    (125) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body . R_C_BRACKET

    R_C_BRACKET     shift and go to state 195


state 152

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 29 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 153

    (32) var_mat -> empty .

    SEMICOLON       reduce using rule 32 (var_mat -> empty .)


state 154

    (54) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (55) asigna_point -> . empty
    (131) empty -> .

    SEMICOLON       reduce using rule 131 (empty -> .)

    asigna_point                   shift and go to state 196
    empty                          shift and go to state 197

state 155

    (107) f -> LPAR add_floor . exp RPAR remove_floor
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 198
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 156

    (113) add_floor -> empty .

    LPAR            reduce using rule 113 (add_floor -> empty .)
    ID              reduce using rule 113 (add_floor -> empty .)
    CTE_I           reduce using rule 113 (add_floor -> empty .)
    CTE_F           reduce using rule 113 (add_floor -> empty .)


state 157

    (56) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 199


state 158

    (57) llamada_2 -> COMMA . exp llamada_2
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 200
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 159

    (58) llamada_2 -> empty .

    RPAR            reduce using rule 58 (llamada_2 -> empty .)


state 160

    (85) exp -> t_exp add_operator_4 . exp_2
    (86) exp_2 -> . OR add_operator exp
    (87) exp_2 -> . empty
    (131) empty -> .

    OR              shift and go to state 202
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    exp_2                          shift and go to state 201
    empty                          shift and go to state 203

state 161

    (119) add_operator_4 -> empty .

    OR              reduce using rule 119 (add_operator_4 -> empty .)
    COMMA           reduce using rule 119 (add_operator_4 -> empty .)
    RPAR            reduce using rule 119 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 119 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 119 (add_operator_4 -> empty .)
    TO              reduce using rule 119 (add_operator_4 -> empty .)
    AND             reduce using rule 119 (add_operator_4 -> empty .)


state 162

    (88) t_exp -> g_exp add_operator_4 . t_exp_2
    (89) t_exp_2 -> . AND add_operator t_exp
    (90) t_exp_2 -> . empty
    (131) empty -> .

    AND             shift and go to state 205
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    t_exp_2                        shift and go to state 204
    empty                          shift and go to state 206

state 163

    (91) g_exp -> m_exp g_exp_2 . add_operator_3
    (118) add_operator_3 -> . empty
    (131) empty -> .

    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    add_operator_3                 shift and go to state 207
    empty                          shift and go to state 208

state 164

    (92) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 209
    empty                          shift and go to state 122

state 165

    (93) g_exp_2 -> LESS . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 210
    empty                          shift and go to state 122

state 166

    (94) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 211
    empty                          shift and go to state 122

state 167

    (95) g_exp_2 -> GREATER . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 212
    empty                          shift and go to state 122

state 168

    (96) g_exp_2 -> COMPARE . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 213
    empty                          shift and go to state 122

state 169

    (97) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 214
    empty                          shift and go to state 122

state 170

    (98) g_exp_2 -> empty .

    AND             reduce using rule 98 (g_exp_2 -> empty .)
    OR              reduce using rule 98 (g_exp_2 -> empty .)
    COMMA           reduce using rule 98 (g_exp_2 -> empty .)
    RPAR            reduce using rule 98 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 98 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 98 (g_exp_2 -> empty .)
    TO              reduce using rule 98 (g_exp_2 -> empty .)


state 171

    (99) m_exp -> t add_operator_2 . m_exp_2
    (100) m_exp_2 -> . PLUS add_operator m_exp
    (101) m_exp_2 -> . MINUS add_operator m_exp
    (102) m_exp_2 -> . empty
    (131) empty -> .

    PLUS            shift and go to state 216
    MINUS           shift and go to state 217
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    m_exp_2                        shift and go to state 215
    empty                          shift and go to state 218

state 172

    (117) add_operator_2 -> empty .

    PLUS            reduce using rule 117 (add_operator_2 -> empty .)
    MINUS           reduce using rule 117 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 117 (add_operator_2 -> empty .)
    LESS            reduce using rule 117 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 117 (add_operator_2 -> empty .)
    GREATER         reduce using rule 117 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 117 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 117 (add_operator_2 -> empty .)
    AND             reduce using rule 117 (add_operator_2 -> empty .)
    OR              reduce using rule 117 (add_operator_2 -> empty .)
    COMMA           reduce using rule 117 (add_operator_2 -> empty .)
    RPAR            reduce using rule 117 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 117 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 117 (add_operator_2 -> empty .)
    TO              reduce using rule 117 (add_operator_2 -> empty .)


state 173

    (103) t -> f add_operator_1 . t_2
    (104) t_2 -> . TIMES add_operator t
    (105) t_2 -> . DIVIDE add_operator t
    (106) t_2 -> . empty
    (131) empty -> .

    TIMES           shift and go to state 220
    DIVIDE          shift and go to state 221
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    t_2                            shift and go to state 219
    empty                          shift and go to state 222

state 174

    (116) add_operator_1 -> empty .

    TIMES           reduce using rule 116 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 116 (add_operator_1 -> empty .)
    PLUS            reduce using rule 116 (add_operator_1 -> empty .)
    MINUS           reduce using rule 116 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 116 (add_operator_1 -> empty .)
    LESS            reduce using rule 116 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 116 (add_operator_1 -> empty .)
    GREATER         reduce using rule 116 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 116 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 116 (add_operator_1 -> empty .)
    AND             reduce using rule 116 (add_operator_1 -> empty .)
    OR              reduce using rule 116 (add_operator_1 -> empty .)
    COMMA           reduce using rule 116 (add_operator_1 -> empty .)
    RPAR            reduce using rule 116 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 116 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 116 (add_operator_1 -> empty .)
    TO              reduce using rule 116 (add_operator_1 -> empty .)


state 175

    (111) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 111 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 111 (f_2 -> CTE_I add_constant_i .)


state 176

    (120) add_constant_i -> empty .

    TIMES           reduce using rule 120 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 120 (add_constant_i -> empty .)
    PLUS            reduce using rule 120 (add_constant_i -> empty .)
    MINUS           reduce using rule 120 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 120 (add_constant_i -> empty .)
    LESS            reduce using rule 120 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 120 (add_constant_i -> empty .)
    GREATER         reduce using rule 120 (add_constant_i -> empty .)
    COMPARE         reduce using rule 120 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 120 (add_constant_i -> empty .)
    AND             reduce using rule 120 (add_constant_i -> empty .)
    OR              reduce using rule 120 (add_constant_i -> empty .)
    COMMA           reduce using rule 120 (add_constant_i -> empty .)
    RPAR            reduce using rule 120 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 120 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 120 (add_constant_i -> empty .)
    TO              reduce using rule 120 (add_constant_i -> empty .)


state 177

    (112) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 112 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 112 (f_2 -> CTE_F add_constant_f .)


state 178

    (122) add_constant_f -> empty .

    TIMES           reduce using rule 122 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 122 (add_constant_f -> empty .)
    PLUS            reduce using rule 122 (add_constant_f -> empty .)
    MINUS           reduce using rule 122 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 122 (add_constant_f -> empty .)
    LESS            reduce using rule 122 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 122 (add_constant_f -> empty .)
    GREATER         reduce using rule 122 (add_constant_f -> empty .)
    COMPARE         reduce using rule 122 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 122 (add_constant_f -> empty .)
    AND             reduce using rule 122 (add_constant_f -> empty .)
    OR              reduce using rule 122 (add_constant_f -> empty .)
    COMMA           reduce using rule 122 (add_constant_f -> empty .)
    RPAR            reduce using rule 122 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 122 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 122 (add_constant_f -> empty .)
    TO              reduce using rule 122 (add_constant_f -> empty .)


state 179

    (42) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (44) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (45) variable_3 -> . empty
    (131) empty -> .

    L_S_BRACKET     shift and go to state 223
    EQUAL           reduce using rule 131 (empty -> .)
    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    variable_3                     shift and go to state 224
    empty                          shift and go to state 225

state 180

    (59) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 226


state 181

    (60) read_point -> empty .

    RPAR            reduce using rule 60 (read_point -> empty .)


state 182

    (61) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 227


state 183

    (64) write_3 -> COMMA . write_2 write_3
    (62) write_2 -> . exp write_point
    (63) write_2 -> . CTE_S add_constant_s write_point
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 143
    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    write_2                        shift and go to state 228
    exp                            shift and go to state 142
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 184

    (65) write_3 -> empty .

    RPAR            reduce using rule 65 (write_3 -> empty .)


state 185

    (62) write_2 -> exp write_point .

    COMMA           reduce using rule 62 (write_2 -> exp write_point .)
    RPAR            reduce using rule 62 (write_2 -> exp write_point .)


state 186

    (66) write_point -> empty .

    COMMA           reduce using rule 66 (write_point -> empty .)
    RPAR            reduce using rule 66 (write_point -> empty .)


state 187

    (63) write_2 -> CTE_S add_constant_s . write_point
    (66) write_point -> . empty
    (131) empty -> .

    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)

    write_point                    shift and go to state 229
    empty                          shift and go to state 186

state 188

    (121) add_constant_s -> empty .

    COMMA           reduce using rule 121 (add_constant_s -> empty .)
    RPAR            reduce using rule 121 (add_constant_s -> empty .)


state 189

    (67) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 230


state 190

    (72) if_point -> empty .

    RPAR            reduce using rule 72 (if_point -> empty .)


state 191

    (75) for_l -> FOR LPAR ID RPAR . EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    EQUAL           shift and go to state 231


state 192

    (78) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 232


state 193

    (37) param_2 -> COMMA param .

    RPAR            reduce using rule 37 (param_2 -> COMMA param .)


state 194

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN . LPAR exp RPAR SEMICOLON R_C_BRACKET

    LPAR            shift and go to state 233


state 195

    (125) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET .

    SEMICOLON       reduce using rule 125 (function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET .)


state 196

    (54) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 234


state 197

    (55) asigna_point -> empty .

    SEMICOLON       reduce using rule 55 (asigna_point -> empty .)


state 198

    (107) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 235


state 199

    (56) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 236


state 200

    (57) llamada_2 -> COMMA exp . llamada_2
    (57) llamada_2 -> . COMMA exp llamada_2
    (58) llamada_2 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 158
    RPAR            reduce using rule 131 (empty -> .)

    llamada_2                      shift and go to state 237
    empty                          shift and go to state 159

state 201

    (85) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 85 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 85 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 85 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 85 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 85 (exp -> t_exp add_operator_4 exp_2 .)


state 202

    (86) exp_2 -> OR . add_operator exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 238
    empty                          shift and go to state 122

state 203

    (87) exp_2 -> empty .

    COMMA           reduce using rule 87 (exp_2 -> empty .)
    RPAR            reduce using rule 87 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 87 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 87 (exp_2 -> empty .)
    TO              reduce using rule 87 (exp_2 -> empty .)


state 204

    (88) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 88 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 88 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 88 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 88 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 88 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 88 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 205

    (89) t_exp_2 -> AND . add_operator t_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 239
    empty                          shift and go to state 122

state 206

    (90) t_exp_2 -> empty .

    OR              reduce using rule 90 (t_exp_2 -> empty .)
    COMMA           reduce using rule 90 (t_exp_2 -> empty .)
    RPAR            reduce using rule 90 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 90 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 90 (t_exp_2 -> empty .)
    TO              reduce using rule 90 (t_exp_2 -> empty .)


state 207

    (91) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 91 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 208

    (118) add_operator_3 -> empty .

    AND             reduce using rule 118 (add_operator_3 -> empty .)
    OR              reduce using rule 118 (add_operator_3 -> empty .)
    COMMA           reduce using rule 118 (add_operator_3 -> empty .)
    RPAR            reduce using rule 118 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 118 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 118 (add_operator_3 -> empty .)
    TO              reduce using rule 118 (add_operator_3 -> empty .)


state 209

    (92) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 240
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 210

    (93) g_exp_2 -> LESS add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 241
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 211

    (94) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 242
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 212

    (95) g_exp_2 -> GREATER add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 243
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 213

    (96) g_exp_2 -> COMPARE add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 244
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 214

    (97) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 245
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 215

    (99) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 99 (m_exp -> t add_operator_2 m_exp_2 .)


state 216

    (100) m_exp_2 -> PLUS . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 246
    empty                          shift and go to state 122

state 217

    (101) m_exp_2 -> MINUS . add_operator m_exp
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 247
    empty                          shift and go to state 122

state 218

    (102) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 102 (m_exp_2 -> empty .)
    LESS            reduce using rule 102 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 102 (m_exp_2 -> empty .)
    GREATER         reduce using rule 102 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 102 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 102 (m_exp_2 -> empty .)
    AND             reduce using rule 102 (m_exp_2 -> empty .)
    OR              reduce using rule 102 (m_exp_2 -> empty .)
    COMMA           reduce using rule 102 (m_exp_2 -> empty .)
    RPAR            reduce using rule 102 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 102 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 102 (m_exp_2 -> empty .)
    TO              reduce using rule 102 (m_exp_2 -> empty .)


state 219

    (103) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 103 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 103 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 103 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 103 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 103 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 103 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 103 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 103 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 103 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 103 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 103 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 103 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 103 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 103 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 103 (t -> f add_operator_1 t_2 .)


state 220

    (104) t_2 -> TIMES . add_operator t
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 248
    empty                          shift and go to state 122

state 221

    (105) t_2 -> DIVIDE . add_operator t
    (115) add_operator -> . empty
    (131) empty -> .

    LPAR            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)

    add_operator                   shift and go to state 249
    empty                          shift and go to state 122

state 222

    (106) t_2 -> empty .

    PLUS            reduce using rule 106 (t_2 -> empty .)
    MINUS           reduce using rule 106 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 106 (t_2 -> empty .)
    LESS            reduce using rule 106 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 106 (t_2 -> empty .)
    GREATER         reduce using rule 106 (t_2 -> empty .)
    COMPARE         reduce using rule 106 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 106 (t_2 -> empty .)
    AND             reduce using rule 106 (t_2 -> empty .)
    OR              reduce using rule 106 (t_2 -> empty .)
    COMMA           reduce using rule 106 (t_2 -> empty .)
    RPAR            reduce using rule 106 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 106 (t_2 -> empty .)
    SEMICOLON       reduce using rule 106 (t_2 -> empty .)
    TO              reduce using rule 106 (t_2 -> empty .)


state 223

    (44) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 250
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 224

    (42) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 42 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 225

    (45) variable_3 -> empty .

    EQUAL           reduce using rule 45 (variable_3 -> empty .)
    TIMES           reduce using rule 45 (variable_3 -> empty .)
    DIVIDE          reduce using rule 45 (variable_3 -> empty .)
    PLUS            reduce using rule 45 (variable_3 -> empty .)
    MINUS           reduce using rule 45 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 45 (variable_3 -> empty .)
    LESS            reduce using rule 45 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 45 (variable_3 -> empty .)
    GREATER         reduce using rule 45 (variable_3 -> empty .)
    COMPARE         reduce using rule 45 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 45 (variable_3 -> empty .)
    AND             reduce using rule 45 (variable_3 -> empty .)
    OR              reduce using rule 45 (variable_3 -> empty .)
    COMMA           reduce using rule 45 (variable_3 -> empty .)
    RPAR            reduce using rule 45 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 45 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 45 (variable_3 -> empty .)
    TO              reduce using rule 45 (variable_3 -> empty .)


state 226

    (59) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 251


state 227

    (61) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 252


state 228

    (64) write_3 -> COMMA write_2 . write_3
    (64) write_3 -> . COMMA write_2 write_3
    (65) write_3 -> . empty
    (131) empty -> .

    COMMA           shift and go to state 183
    RPAR            reduce using rule 131 (empty -> .)

    write_3                        shift and go to state 253
    empty                          shift and go to state 184

state 229

    (63) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 63 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 63 (write_2 -> CTE_S add_constant_s write_point .)


state 230

    (67) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 254


state 231

    (75) for_l -> FOR LPAR ID RPAR EQUAL . exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 255
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 232

    (78) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (82) while_point_2 -> . empty
    (131) empty -> .

    L_C_BRACKET     reduce using rule 131 (empty -> .)

    while_point_2                  shift and go to state 256
    empty                          shift and go to state 257

state 233

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR . exp RPAR SEMICOLON R_C_BRACKET
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 258
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 234

    (54) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 54 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 235

    (107) f -> LPAR add_floor exp RPAR . remove_floor
    (114) remove_floor -> . empty
    (131) empty -> .

    TIMES           reduce using rule 131 (empty -> .)
    DIVIDE          reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESS_EQUAL      reduce using rule 131 (empty -> .)
    LESS            reduce using rule 131 (empty -> .)
    GREATER_EQUAL   reduce using rule 131 (empty -> .)
    GREATER         reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    NOT_EQUAL       reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAR            reduce using rule 131 (empty -> .)
    R_S_BRACKET     reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    remove_floor                   shift and go to state 259
    empty                          shift and go to state 260

state 236

    (56) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 56 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 237

    (57) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 57 (llamada_2 -> COMMA exp llamada_2 .)


state 238

    (86) exp_2 -> OR add_operator . exp
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 261
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 239

    (89) t_exp_2 -> AND add_operator . t_exp
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    t_exp                          shift and go to state 262
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 240

    (92) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 92 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 241

    (93) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 93 (g_exp_2 -> LESS add_operator m_exp .)


state 242

    (94) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 94 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 243

    (95) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 95 (g_exp_2 -> GREATER add_operator m_exp .)


state 244

    (96) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 96 (g_exp_2 -> COMPARE add_operator m_exp .)


state 245

    (97) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 97 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 246

    (100) m_exp_2 -> PLUS add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 263
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 247

    (101) m_exp_2 -> MINUS add_operator . m_exp
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    m_exp                          shift and go to state 264
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 248

    (104) t_2 -> TIMES add_operator . t
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    t                              shift and go to state 265
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 249

    (105) t_2 -> DIVIDE add_operator . t
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    t                              shift and go to state 266
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 250

    (44) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 267


state 251

    (59) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 59 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 252

    (61) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 61 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 253

    (64) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 64 (write_3 -> COMMA write_2 write_3 .)


state 254

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 268
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 255

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp . TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    TO              shift and go to state 269


state 256

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 270


state 257

    (82) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 82 (while_point_2 -> empty .)


state 258

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp . RPAR SEMICOLON R_C_BRACKET

    RPAR            shift and go to state 271


state 259

    (107) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 107 (f -> LPAR add_floor exp RPAR remove_floor .)


state 260

    (114) remove_floor -> empty .

    TIMES           reduce using rule 114 (remove_floor -> empty .)
    DIVIDE          reduce using rule 114 (remove_floor -> empty .)
    PLUS            reduce using rule 114 (remove_floor -> empty .)
    MINUS           reduce using rule 114 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 114 (remove_floor -> empty .)
    LESS            reduce using rule 114 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 114 (remove_floor -> empty .)
    GREATER         reduce using rule 114 (remove_floor -> empty .)
    COMPARE         reduce using rule 114 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 114 (remove_floor -> empty .)
    AND             reduce using rule 114 (remove_floor -> empty .)
    OR              reduce using rule 114 (remove_floor -> empty .)
    COMMA           reduce using rule 114 (remove_floor -> empty .)
    RPAR            reduce using rule 114 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 114 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 114 (remove_floor -> empty .)
    TO              reduce using rule 114 (remove_floor -> empty .)


state 261

    (86) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 86 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 86 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 86 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 86 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 86 (exp_2 -> OR add_operator exp .)


state 262

    (89) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 89 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 89 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 89 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 89 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 89 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 89 (t_exp_2 -> AND add_operator t_exp .)


state 263

    (100) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 100 (m_exp_2 -> PLUS add_operator m_exp .)


state 264

    (101) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 101 (m_exp_2 -> MINUS add_operator m_exp .)


state 265

    (104) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 104 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 104 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 104 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 104 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 104 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 104 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 104 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 104 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 104 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 104 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 104 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 104 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 104 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 104 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 104 (t_2 -> TIMES add_operator t .)


state 266

    (105) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 105 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 105 (t_2 -> DIVIDE add_operator t .)


state 267

    (44) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 44 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 268

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (68) if_2 -> . estatuto if_2
    (69) if_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 272
    if_2                           shift and go to state 273
    empty                          shift and go to state 274
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 269

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO . exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (85) exp -> . t_exp add_operator_4 exp_2
    (88) t_exp -> . g_exp add_operator_4 t_exp_2
    (91) g_exp -> . m_exp g_exp_2 add_operator_3
    (99) m_exp -> . t add_operator_2 m_exp_2
    (103) t -> . f add_operator_1 t_2
    (107) f -> . LPAR add_floor exp RPAR remove_floor
    (108) f -> . variable
    (109) f -> . llamada
    (110) f -> . f_2
    (40) variable -> . ID variable_2 variable_point
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (111) f_2 -> . CTE_I add_constant_i
    (112) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 124
    ID              shift and go to state 123
    CTE_I           shift and go to state 134
    CTE_F           shift and go to state 135

    exp                            shift and go to state 275
    t_exp                          shift and go to state 126
    g_exp                          shift and go to state 127
    m_exp                          shift and go to state 128
    t                              shift and go to state 129
    f                              shift and go to state 130
    variable                       shift and go to state 131
    llamada                        shift and go to state 132
    f_2                            shift and go to state 133

state 270

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 276
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 271

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR . SEMICOLON R_C_BRACKET

    SEMICOLON       shift and go to state 277


state 272

    (68) if_2 -> estatuto . if_2
    (68) if_2 -> . estatuto if_2
    (69) if_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 272
    if_2                           shift and go to state 278
    empty                          shift and go to state 274
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 273

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 279


state 274

    (69) if_2 -> empty .
    (84) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 69 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 69 (if_2 -> empty .)
    ID              reduce using rule 84 (func_extra -> empty .)
    READ            reduce using rule 84 (func_extra -> empty .)
    WRITE           reduce using rule 84 (func_extra -> empty .)
    IF              reduce using rule 84 (func_extra -> empty .)
    FOR             reduce using rule 84 (func_extra -> empty .)
    WHILE           reduce using rule 84 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 84 (func_extra -> empty .) ]


state 275

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 280


state 276

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (79) while_l_2 -> . estatuto while_l_2
    (80) while_l_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 281
    while_l_2                      shift and go to state 282
    empty                          shift and go to state 283
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 277

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON . R_C_BRACKET

    R_C_BRACKET     shift and go to state 284


state 278

    (68) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 68 (if_2 -> estatuto if_2 .)


state 279

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (70) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (71) if_3 -> . empty
    (131) empty -> .

    ELSE            shift and go to state 286
    SEMICOLON       reduce using rule 131 (empty -> .)

    if_3                           shift and go to state 285
    empty                          shift and go to state 287

state 280

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 288


state 281

    (79) while_l_2 -> estatuto . while_l_2
    (79) while_l_2 -> . estatuto while_l_2
    (80) while_l_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 281
    while_l_2                      shift and go to state 289
    empty                          shift and go to state 283
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 282

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 290


state 283

    (80) while_l_2 -> empty .
    (84) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 80 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 80 (while_l_2 -> empty .)
    ID              reduce using rule 84 (func_extra -> empty .)
    READ            reduce using rule 84 (func_extra -> empty .)
    WRITE           reduce using rule 84 (func_extra -> empty .)
    IF              reduce using rule 84 (func_extra -> empty .)
    FOR             reduce using rule 84 (func_extra -> empty .)
    WHILE           reduce using rule 84 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 84 (func_extra -> empty .) ]


state 284

    (124) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET .

    SEMICOLON       reduce using rule 124 (function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET .)


state 285

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 291


state 286

    (70) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (74) if_point_3 -> . empty
    (131) empty -> .

    L_C_BRACKET     reduce using rule 131 (empty -> .)

    if_point_3                     shift and go to state 292
    empty                          shift and go to state 293

state 287

    (71) if_3 -> empty .

    SEMICOLON       reduce using rule 71 (if_3 -> empty .)


state 288

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 294
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 289

    (79) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 79 (while_l_2 -> estatuto while_l_2 .)


state 290

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 295


state 291

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (73) if_point_2 -> . empty
    (131) empty -> .

    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    if_point_2                     shift and go to state 296
    empty                          shift and go to state 297

state 292

    (70) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 298


state 293

    (74) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 74 (if_point_3 -> empty .)


state 294

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON
    (76) for_l_2 -> . estatuto for_l_2
    (77) for_l_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 299
    for_l_2                        shift and go to state 300
    empty                          shift and go to state 301
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 295

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (83) while_point_3 -> . empty
    (131) empty -> .

    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    while_point_3                  shift and go to state 302
    empty                          shift and go to state 303

state 296

    (67) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 67 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 297

    (73) if_point_2 -> empty .

    ID              reduce using rule 73 (if_point_2 -> empty .)
    READ            reduce using rule 73 (if_point_2 -> empty .)
    WRITE           reduce using rule 73 (if_point_2 -> empty .)
    IF              reduce using rule 73 (if_point_2 -> empty .)
    FOR             reduce using rule 73 (if_point_2 -> empty .)
    WHILE           reduce using rule 73 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 73 (if_point_2 -> empty .)
    RETURN          reduce using rule 73 (if_point_2 -> empty .)


state 298

    (70) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 304
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 299

    (76) for_l_2 -> estatuto . for_l_2
    (76) for_l_2 -> . estatuto for_l_2
    (77) for_l_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 299
    for_l_2                        shift and go to state 305
    empty                          shift and go to state 301
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 300

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 306


state 301

    (77) for_l_2 -> empty .
    (84) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 77 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 77 (for_l_2 -> empty .)
    ID              reduce using rule 84 (func_extra -> empty .)
    READ            reduce using rule 84 (func_extra -> empty .)
    WRITE           reduce using rule 84 (func_extra -> empty .)
    IF              reduce using rule 84 (func_extra -> empty .)
    FOR             reduce using rule 84 (func_extra -> empty .)
    WHILE           reduce using rule 84 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 84 (func_extra -> empty .) ]


state 302

    (78) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 78 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 303

    (83) while_point_3 -> empty .

    ID              reduce using rule 83 (while_point_3 -> empty .)
    READ            reduce using rule 83 (while_point_3 -> empty .)
    WRITE           reduce using rule 83 (while_point_3 -> empty .)
    IF              reduce using rule 83 (while_point_3 -> empty .)
    FOR             reduce using rule 83 (while_point_3 -> empty .)
    WHILE           reduce using rule 83 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 83 (while_point_3 -> empty .)
    RETURN          reduce using rule 83 (while_point_3 -> empty .)


state 304

    (70) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (68) if_2 -> . estatuto if_2
    (69) if_2 -> . empty
    (46) estatuto -> . asigna
    (47) estatuto -> . llamada
    (48) estatuto -> . read
    (49) estatuto -> . write
    (50) estatuto -> . if_1
    (51) estatuto -> . for_l
    (52) estatuto -> . while_l
    (53) estatuto -> . func_extra
    (131) empty -> .
    (54) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (56) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (59) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (61) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (67) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (75) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (78) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) func_extra -> . empty
    (40) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    estatuto                       shift and go to state 272
    if_2                           shift and go to state 307
    empty                          shift and go to state 274
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 305

    (76) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 76 (for_l_2 -> estatuto for_l_2 .)


state 306

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 308


state 307

    (70) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 309


state 308

    (75) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 75 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)


state 309

    (70) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 70 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for READ in state 69 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for READ in state 101 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for FOR in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 254 resolved as shift
WARNING: shift/reduce conflict for READ in state 254 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 254 resolved as shift
WARNING: shift/reduce conflict for IF in state 254 resolved as shift
WARNING: shift/reduce conflict for FOR in state 254 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 268 resolved as shift
WARNING: shift/reduce conflict for READ in state 268 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 268 resolved as shift
WARNING: shift/reduce conflict for IF in state 268 resolved as shift
WARNING: shift/reduce conflict for FOR in state 268 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 268 resolved as shift
WARNING: shift/reduce conflict for ID in state 270 resolved as shift
WARNING: shift/reduce conflict for READ in state 270 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 270 resolved as shift
WARNING: shift/reduce conflict for IF in state 270 resolved as shift
WARNING: shift/reduce conflict for FOR in state 270 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 270 resolved as shift
WARNING: shift/reduce conflict for ID in state 272 resolved as shift
WARNING: shift/reduce conflict for READ in state 272 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 272 resolved as shift
WARNING: shift/reduce conflict for IF in state 272 resolved as shift
WARNING: shift/reduce conflict for FOR in state 272 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 272 resolved as shift
WARNING: shift/reduce conflict for ID in state 276 resolved as shift
WARNING: shift/reduce conflict for READ in state 276 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 276 resolved as shift
WARNING: shift/reduce conflict for IF in state 276 resolved as shift
WARNING: shift/reduce conflict for FOR in state 276 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 276 resolved as shift
WARNING: shift/reduce conflict for ID in state 281 resolved as shift
WARNING: shift/reduce conflict for READ in state 281 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 281 resolved as shift
WARNING: shift/reduce conflict for IF in state 281 resolved as shift
WARNING: shift/reduce conflict for FOR in state 281 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 281 resolved as shift
WARNING: shift/reduce conflict for ID in state 288 resolved as shift
WARNING: shift/reduce conflict for READ in state 288 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 288 resolved as shift
WARNING: shift/reduce conflict for IF in state 288 resolved as shift
WARNING: shift/reduce conflict for FOR in state 288 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 288 resolved as shift
WARNING: shift/reduce conflict for ID in state 294 resolved as shift
WARNING: shift/reduce conflict for READ in state 294 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 294 resolved as shift
WARNING: shift/reduce conflict for IF in state 294 resolved as shift
WARNING: shift/reduce conflict for FOR in state 294 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 294 resolved as shift
WARNING: shift/reduce conflict for ID in state 298 resolved as shift
WARNING: shift/reduce conflict for READ in state 298 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 298 resolved as shift
WARNING: shift/reduce conflict for IF in state 298 resolved as shift
WARNING: shift/reduce conflict for FOR in state 298 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 298 resolved as shift
WARNING: shift/reduce conflict for ID in state 299 resolved as shift
WARNING: shift/reduce conflict for READ in state 299 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 299 resolved as shift
WARNING: shift/reduce conflict for IF in state 299 resolved as shift
WARNING: shift/reduce conflict for FOR in state 299 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 299 resolved as shift
WARNING: shift/reduce conflict for ID in state 304 resolved as shift
WARNING: shift/reduce conflict for READ in state 304 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 304 resolved as shift
WARNING: shift/reduce conflict for IF in state 304 resolved as shift
WARNING: shift/reduce conflict for FOR in state 304 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 304 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 47
WARNING: reduce/reduce conflict in state 103 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 103
WARNING: reduce/reduce conflict in state 274 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 274
WARNING: reduce/reduce conflict in state 283 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 283
WARNING: reduce/reduce conflict in state 301 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 301
WARNING: Rule (vars_6 -> empty) is never reduced
