Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    main_point -> empty
Rule 11    body -> vars func_agrega_v estatuto body_2
Rule 12    body_2 -> estatuto body_2
Rule 13    body_2 -> empty
Rule 14    tipo_simple -> INT
Rule 15    tipo_simple -> FLOAT
Rule 16    tipo_simple -> CHAR
Rule 17    tipo_comp -> DATAFRAME
Rule 18    vars -> VAR vars_2 SEMICOLON vars_8
Rule 19    vars_2 -> tipo_comp vars_3
Rule 20    vars_2 -> tipo_simple vars_4
Rule 21    vars_3 -> ID vars_5
Rule 22    vars_4 -> vars_3
Rule 23    vars_4 -> ID vars_6
Rule 24    vars_5 -> COMMA vars_3
Rule 25    vars_5 -> empty
Rule 26    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 27    vars_6 -> empty
Rule 28    punto_id_especial -> empty
Rule 29    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 30    vars_7 -> var_array
Rule 31    var_array -> empty
Rule 32    var_mat -> empty
Rule 33    vars_8 -> vars
Rule 34    vars_8 -> empty
Rule 35    param -> tipo_simple ID punto_param param_2
Rule 36    param -> empty
Rule 37    param_2 -> COMMA param
Rule 38    param_2 -> empty
Rule 39    punto_param -> empty
Rule 40    punto_param_2 -> empty
Rule 41    variable -> ID variable_2 variable_point
Rule 42    variable_point -> empty
Rule 43    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 44    variable_2 -> empty
Rule 45    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 46    variable_3 -> empty
Rule 47    estatuto -> asigna
Rule 48    estatuto -> llamada
Rule 49    estatuto -> read
Rule 50    estatuto -> write
Rule 51    estatuto -> if_1
Rule 52    estatuto -> for_l
Rule 53    estatuto -> while_l
Rule 54    estatuto -> func_extra
Rule 55    asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON
Rule 56    asigna_point -> empty
Rule 57    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 58    llamada_2 -> COMMA exp llamada_2
Rule 59    llamada_2 -> empty
Rule 60    read -> READ LPAR variable read_point RPAR SEMICOLON
Rule 61    read_point -> empty
Rule 62    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 63    write_2 -> exp write_point
Rule 64    write_2 -> CTE_S add_constant_s write_point
Rule 65    write_3 -> COMMA write_2 write_3
Rule 66    write_3 -> empty
Rule 67    write_point -> empty
Rule 68    if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
Rule 69    if_2 -> estatuto if_2
Rule 70    if_2 -> empty
Rule 71    if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 72    if_3 -> empty
Rule 73    if_point -> empty
Rule 74    if_point_2 -> empty
Rule 75    if_point_3 -> empty
Rule 76    for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
Rule 77    for_l_2 -> estatuto for_l_2
Rule 78    for_l_2 -> empty
Rule 79    for_point_1 -> empty
Rule 80    for_point_2 -> empty
Rule 81    for_point_3 -> empty
Rule 82    for_point_4 -> empty
Rule 83    while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
Rule 84    while_l_2 -> estatuto while_l_2
Rule 85    while_l_2 -> empty
Rule 86    while_point -> empty
Rule 87    while_point_2 -> empty
Rule 88    while_point_3 -> empty
Rule 89    func_extra -> empty
Rule 90    exp -> t_exp add_operator_4 exp_2
Rule 91    exp_2 -> OR add_operator exp
Rule 92    exp_2 -> empty
Rule 93    t_exp -> g_exp add_operator_4 t_exp_2
Rule 94    t_exp_2 -> AND add_operator t_exp
Rule 95    t_exp_2 -> empty
Rule 96    g_exp -> m_exp g_exp_2 add_operator_3
Rule 97    g_exp_2 -> LESS_EQUAL add_operator m_exp
Rule 98    g_exp_2 -> LESS add_operator m_exp
Rule 99    g_exp_2 -> GREATER_EQUAL add_operator m_exp
Rule 100   g_exp_2 -> GREATER add_operator m_exp
Rule 101   g_exp_2 -> COMPARE add_operator m_exp
Rule 102   g_exp_2 -> NOT_EQUAL add_operator m_exp
Rule 103   g_exp_2 -> empty
Rule 104   m_exp -> t add_operator_2 m_exp_2
Rule 105   m_exp_2 -> PLUS add_operator m_exp
Rule 106   m_exp_2 -> MINUS add_operator m_exp
Rule 107   m_exp_2 -> empty
Rule 108   t -> f add_operator_1 t_2
Rule 109   t_2 -> TIMES add_operator t
Rule 110   t_2 -> DIVIDE add_operator t
Rule 111   t_2 -> empty
Rule 112   f -> LPAR add_floor exp RPAR remove_floor
Rule 113   f -> variable
Rule 114   f -> llamada
Rule 115   f -> f_2
Rule 116   f_2 -> CTE_I add_constant_i
Rule 117   f_2 -> CTE_F add_constant_f
Rule 118   add_floor -> empty
Rule 119   remove_floor -> empty
Rule 120   add_operator -> empty
Rule 121   add_operator_1 -> empty
Rule 122   add_operator_2 -> empty
Rule 123   add_operator_3 -> empty
Rule 124   add_operator_4 -> empty
Rule 125   add_constant_i -> empty
Rule 126   add_constant_s -> empty
Rule 127   add_constant_f -> empty
Rule 128   function -> FUNC function_2 SEMICOLON function_3
Rule 129   function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point
Rule 130   function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
Rule 131   function_3 -> function
Rule 132   function_3 -> empty
Rule 133   function_punto1 -> empty
Rule 134   function_punto2 -> empty
Rule 135   func_agrega_v -> empty
Rule 136   final_func_point -> empty
Rule 137   empty -> <empty>

Terminals, with rules where they appear

AND                  : 94
CHAR                 : 16
COLON                : 1
COMMA                : 24 37 58 65
COMPARE              : 101
CTE_F                : 117
CTE_I                : 26 29 116
CTE_S                : 64
DATAFRAME            : 17
DIVIDE               : 110
ELSE                 : 71
EQUAL                : 55 76
FLOAT                : 15
FOR                  : 76
FUNC                 : 128
GREATER              : 100
GREATER_EQUAL        : 99
ID                   : 1 21 23 35 41 57 76 129 130
IF                   : 68
INT                  : 14
LESS                 : 98
LESS_EQUAL           : 97
LPAR                 : 9 57 60 62 68 76 83 112 129 129 130
L_C_BRACKET          : 9 68 71 76 83 129 130
L_S_BRACKET          : 26 29 43 45
MAIN                 : 9
MINUS                : 106
NOT_EQUAL            : 102
OR                   : 91
PLUS                 : 105
PROGRAM              : 1
READ                 : 60
RETURN               : 129
RPAR                 : 9 57 60 62 68 76 83 112 129 129 130
R_C_BRACKET          : 9 68 71 76 83 129 130
R_S_BRACKET          : 26 29 43 45
SEMICOLON            : 9 18 55 57 60 62 68 76 83 128 129
STRING               : 
TIMES                : 109
TO                   : 76
VAR                  : 18
VOID                 : 130
WHILE                : 83
WRITE                : 62
error                : 

Nonterminals, with rules where they appear

add_constant_f       : 117
add_constant_i       : 116
add_constant_s       : 64
add_floor            : 112
add_operator         : 55 91 94 97 98 99 100 101 102 105 106 109 110
add_operator_1       : 108
add_operator_2       : 104
add_operator_3       : 96
add_operator_4       : 90 93
asigna               : 47
asigna_point         : 55
body                 : 9 129 130
body_2               : 11 12
empty                : 2 4 6 8 10 13 25 27 28 31 32 34 36 38 39 40 42 44 46 56 59 61 66 67 70 72 73 74 75 78 79 80 81 82 85 86 87 88 89 92 95 103 107 111 118 119 120 121 122 123 124 125 126 127 132 133 134 135 136
estatuto             : 11 12 68 69 71 76 77 83 84
exp                  : 43 45 55 57 58 63 68 76 76 83 91 112 129
exp_2                : 90
f                    : 108
f_2                  : 115
final_func_point     : 129 130
for_l                : 52
for_l_2              : 76 77
for_point_1          : 76
for_point_2          : 76
for_point_3          : 76
for_point_4          : 76
func_agrega_v        : 11
func_extra           : 54
function             : 7 131
function_2           : 128
function_3           : 128
function_punto1      : 129
function_punto2      : 130
g_exp                : 93
g_exp_2              : 96
if_1                 : 51
if_2                 : 68 69 71
if_3                 : 68
if_point             : 68
if_point_2           : 68
if_point_3           : 71
llamada              : 48 114
llamada_2            : 57 58
m_exp                : 96 97 98 99 100 101 102 105 106
m_exp_2              : 104
main                 : 1
main_point           : 9
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 37 129 130
param_2              : 35
program              : 0
program_point        : 1
punto_id_especial    : 26
punto_param          : 35
punto_param_2        : 129 130
read                 : 49
read_point           : 60
remove_floor         : 112
t                    : 104 109 110
t_2                  : 108
t_exp                : 90 94
t_exp_2              : 93
tipo_comp            : 19
tipo_simple          : 20 35 129
var_array            : 30
var_mat              : 29
variable             : 55 60 113
variable_2           : 41
variable_3           : 43
variable_point       : 41
vars                 : 5 11 33
vars_2               : 18
vars_3               : 19 22 24
vars_4               : 20
vars_5               : 21
vars_6               : 23
vars_7               : 26
vars_8               : 18
while_l              : 53
while_l_2            : 83 84
while_point          : 83
while_point_2        : 83
while_point_3        : 83
write                : 50
write_2              : 62 65
write_3              : 62 65
write_point          : 63 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (137) empty -> .

    ID              reduce using rule 137 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (137) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 137 (empty -> .)
    MAIN            reduce using rule 137 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (137) empty -> .

    FUNC            reduce using rule 137 (empty -> .)
    MAIN            reduce using rule 137 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (18) vars -> VAR . vars_2 SEMICOLON vars_8
    (19) vars_2 -> . tipo_comp vars_3
    (20) vars_2 -> . tipo_simple vars_4
    (17) tipo_comp -> . DATAFRAME
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
    (10) main_point -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)

    main_point                     shift and go to state 23
    empty                          shift and go to state 24

state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (128) function -> . FUNC function_2 SEMICOLON function_3
    (137) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 137 (empty -> .)

    modules_3                      shift and go to state 25
    function                       shift and go to state 26
    empty                          shift and go to state 27

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (18) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 29


state 17

    (19) vars_2 -> tipo_comp . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 30

state 18

    (20) vars_2 -> tipo_simple . vars_4
    (22) vars_4 -> . vars_3
    (23) vars_4 -> . ID vars_6
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 34

    vars_4                         shift and go to state 32
    vars_3                         shift and go to state 33

state 19

    (17) tipo_comp -> DATAFRAME .

    ID              reduce using rule 17 (tipo_comp -> DATAFRAME .)


state 20

    (14) tipo_simple -> INT .

    ID              reduce using rule 14 (tipo_simple -> INT .)


state 21

    (15) tipo_simple -> FLOAT .

    ID              reduce using rule 15 (tipo_simple -> FLOAT .)


state 22

    (16) tipo_simple -> CHAR .

    ID              reduce using rule 16 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN main_point . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 35


state 24

    (10) main_point -> empty .

    LPAR            reduce using rule 10 (main_point -> empty .)


state 25

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 26

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 27

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 28

    (128) function -> FUNC . function_2 SEMICOLON function_3
    (129) function_2 -> . tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point
    (130) function_2 -> . VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR

    VOID            shift and go to state 38
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 36
    tipo_simple                    shift and go to state 37

state 29

    (18) vars -> VAR vars_2 SEMICOLON . vars_8
    (33) vars_8 -> . vars
    (34) vars_8 -> . empty
    (18) vars -> . VAR vars_2 SEMICOLON vars_8
    (137) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 137 (empty -> .)
    MAIN            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    WRITE           reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    vars_8                         shift and go to state 39
    vars                           shift and go to state 40
    empty                          shift and go to state 41

state 30

    (19) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_comp vars_3 .)


state 31

    (21) vars_3 -> ID . vars_5
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (137) empty -> .

    COMMA           shift and go to state 43
    SEMICOLON       reduce using rule 137 (empty -> .)

    vars_5                         shift and go to state 42
    empty                          shift and go to state 44

state 32

    (20) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 20 (vars_2 -> tipo_simple vars_4 .)


state 33

    (22) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 22 (vars_4 -> vars_3 .)


state 34

    (23) vars_4 -> ID . vars_6
    (21) vars_3 -> ID . vars_5
    (26) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (27) vars_6 -> . empty
    (24) vars_5 -> . COMMA vars_3
    (25) vars_5 -> . empty
    (28) punto_id_especial -> . empty
    (137) empty -> .

    COMMA           shift and go to state 43
    SEMICOLON       reduce using rule 137 (empty -> .)
    L_S_BRACKET     reduce using rule 137 (empty -> .)

    vars_6                         shift and go to state 45
    vars_5                         shift and go to state 42
    punto_id_especial              shift and go to state 46
    empty                          shift and go to state 47

state 35

    (9) main -> MAIN main_point LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 48


state 36

    (128) function -> FUNC function_2 . SEMICOLON function_3

    SEMICOLON       shift and go to state 49


state 37

    (129) function_2 -> tipo_simple . ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point

    ID              shift and go to state 50


state 38

    (130) function_2 -> VOID . ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    ID              shift and go to state 51


state 39

    (18) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 18 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 40

    (33) vars_8 -> vars .

    FUNC            reduce using rule 33 (vars_8 -> vars .)
    MAIN            reduce using rule 33 (vars_8 -> vars .)
    ID              reduce using rule 33 (vars_8 -> vars .)
    READ            reduce using rule 33 (vars_8 -> vars .)
    WRITE           reduce using rule 33 (vars_8 -> vars .)
    IF              reduce using rule 33 (vars_8 -> vars .)
    FOR             reduce using rule 33 (vars_8 -> vars .)
    WHILE           reduce using rule 33 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> vars .)
    RETURN          reduce using rule 33 (vars_8 -> vars .)


state 41

    (34) vars_8 -> empty .

    FUNC            reduce using rule 34 (vars_8 -> empty .)
    MAIN            reduce using rule 34 (vars_8 -> empty .)
    ID              reduce using rule 34 (vars_8 -> empty .)
    READ            reduce using rule 34 (vars_8 -> empty .)
    WRITE           reduce using rule 34 (vars_8 -> empty .)
    IF              reduce using rule 34 (vars_8 -> empty .)
    FOR             reduce using rule 34 (vars_8 -> empty .)
    WHILE           reduce using rule 34 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 34 (vars_8 -> empty .)
    RETURN          reduce using rule 34 (vars_8 -> empty .)


state 42

    (21) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 21 (vars_3 -> ID vars_5 .)


state 43

    (24) vars_5 -> COMMA . vars_3
    (21) vars_3 -> . ID vars_5

    ID              shift and go to state 31

    vars_3                         shift and go to state 52

state 44

    (25) vars_5 -> empty .

    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)


state 45

    (23) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 23 (vars_4 -> ID vars_6 .)


state 46

    (26) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 53


state 47

    (27) vars_6 -> empty .
    (25) vars_5 -> empty .
    (28) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 25 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 25 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 28 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 27 (vars_6 -> empty .) ]


state 48

    (9) main -> MAIN main_point LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 54


state 49

    (128) function -> FUNC function_2 SEMICOLON . function_3
    (131) function_3 -> . function
    (132) function_3 -> . empty
    (128) function -> . FUNC function_2 SEMICOLON function_3
    (137) empty -> .

    FUNC            shift and go to state 28
    MAIN            reduce using rule 137 (empty -> .)

    function_3                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 50

    (129) function_2 -> tipo_simple ID . function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point
    (133) function_punto1 -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 51

    (130) function_2 -> VOID ID . function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (134) function_punto2 -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)

    function_punto2                shift and go to state 60
    empty                          shift and go to state 61

state 52

    (24) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 24 (vars_5 -> COMMA vars_3 .)


state 53

    (26) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 62


state 54

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 63
    vars                           shift and go to state 64

state 55

    (128) function -> FUNC function_2 SEMICOLON function_3 .

    MAIN            reduce using rule 128 (function -> FUNC function_2 SEMICOLON function_3 .)


state 56

    (131) function_3 -> function .

    MAIN            reduce using rule 131 (function_3 -> function .)


state 57

    (132) function_3 -> empty .

    MAIN            reduce using rule 132 (function_3 -> empty .)


state 58

    (129) function_2 -> tipo_simple ID function_punto1 . LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point

    LPAR            shift and go to state 65


state 59

    (133) function_punto1 -> empty .

    LPAR            reduce using rule 133 (function_punto1 -> empty .)


state 60

    (130) function_2 -> VOID ID function_punto2 . LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    LPAR            shift and go to state 66


state 61

    (134) function_punto2 -> empty .

    LPAR            reduce using rule 134 (function_punto2 -> empty .)


state 62

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 67


state 63

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 68


state 64

    (11) body -> vars . func_agrega_v estatuto body_2
    (135) func_agrega_v -> . empty
    (137) empty -> .

    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    WRITE           reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    func_agrega_v                  shift and go to state 69
    empty                          shift and go to state 70

state 65

    (129) function_2 -> tipo_simple ID function_punto1 LPAR . param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (137) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 137 (empty -> .)

    tipo_simple                    shift and go to state 71
    param                          shift and go to state 72
    empty                          shift and go to state 73

state 66

    (130) function_2 -> VOID ID function_punto2 LPAR . param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (137) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 137 (empty -> .)

    param                          shift and go to state 74
    tipo_simple                    shift and go to state 71
    empty                          shift and go to state 73

state 67

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (29) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (30) vars_7 -> . var_array
    (31) var_array -> . empty
    (137) empty -> .

    L_S_BRACKET     shift and go to state 75
    SEMICOLON       reduce using rule 137 (empty -> .)

    vars_7                         shift and go to state 76
    var_array                      shift and go to state 77
    empty                          shift and go to state 78

state 68

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 79


state 69

    (11) body -> vars func_agrega_v . estatuto body_2
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 80
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 70

    (135) func_agrega_v -> empty .

    ID              reduce using rule 135 (func_agrega_v -> empty .)
    READ            reduce using rule 135 (func_agrega_v -> empty .)
    WRITE           reduce using rule 135 (func_agrega_v -> empty .)
    IF              reduce using rule 135 (func_agrega_v -> empty .)
    FOR             reduce using rule 135 (func_agrega_v -> empty .)
    WHILE           reduce using rule 135 (func_agrega_v -> empty .)
    R_C_BRACKET     reduce using rule 135 (func_agrega_v -> empty .)
    RETURN          reduce using rule 135 (func_agrega_v -> empty .)


state 71

    (35) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 97


state 72

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param . punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point
    (40) punto_param_2 -> . empty
    (137) empty -> .

    RPAR            reduce using rule 137 (empty -> .)

    punto_param_2                  shift and go to state 98
    empty                          shift and go to state 99

state 73

    (36) param -> empty .

    RPAR            reduce using rule 36 (param -> empty .)


state 74

    (130) function_2 -> VOID ID function_punto2 LPAR param . punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point
    (40) punto_param_2 -> . empty
    (137) empty -> .

    RPAR            reduce using rule 137 (empty -> .)

    punto_param_2                  shift and go to state 100
    empty                          shift and go to state 99

state 75

    (29) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 101


state 76

    (26) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 26 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 77

    (30) vars_7 -> var_array .

    SEMICOLON       reduce using rule 30 (vars_7 -> var_array .)


state 78

    (31) var_array -> empty .

    SEMICOLON       reduce using rule 31 (var_array -> empty .)


state 79

    (9) main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 80

    (11) body -> vars func_agrega_v estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 102
    body_2                         shift and go to state 103
    empty                          shift and go to state 104
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 81

    (47) estatuto -> asigna .

    ID              reduce using rule 47 (estatuto -> asigna .)
    READ            reduce using rule 47 (estatuto -> asigna .)
    WRITE           reduce using rule 47 (estatuto -> asigna .)
    IF              reduce using rule 47 (estatuto -> asigna .)
    FOR             reduce using rule 47 (estatuto -> asigna .)
    WHILE           reduce using rule 47 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> asigna .)
    RETURN          reduce using rule 47 (estatuto -> asigna .)


state 82

    (48) estatuto -> llamada .

    ID              reduce using rule 48 (estatuto -> llamada .)
    READ            reduce using rule 48 (estatuto -> llamada .)
    WRITE           reduce using rule 48 (estatuto -> llamada .)
    IF              reduce using rule 48 (estatuto -> llamada .)
    FOR             reduce using rule 48 (estatuto -> llamada .)
    WHILE           reduce using rule 48 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> llamada .)
    RETURN          reduce using rule 48 (estatuto -> llamada .)


state 83

    (49) estatuto -> read .

    ID              reduce using rule 49 (estatuto -> read .)
    READ            reduce using rule 49 (estatuto -> read .)
    WRITE           reduce using rule 49 (estatuto -> read .)
    IF              reduce using rule 49 (estatuto -> read .)
    FOR             reduce using rule 49 (estatuto -> read .)
    WHILE           reduce using rule 49 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> read .)
    RETURN          reduce using rule 49 (estatuto -> read .)


state 84

    (50) estatuto -> write .

    ID              reduce using rule 50 (estatuto -> write .)
    READ            reduce using rule 50 (estatuto -> write .)
    WRITE           reduce using rule 50 (estatuto -> write .)
    IF              reduce using rule 50 (estatuto -> write .)
    FOR             reduce using rule 50 (estatuto -> write .)
    WHILE           reduce using rule 50 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> write .)
    RETURN          reduce using rule 50 (estatuto -> write .)


state 85

    (51) estatuto -> if_1 .

    ID              reduce using rule 51 (estatuto -> if_1 .)
    READ            reduce using rule 51 (estatuto -> if_1 .)
    WRITE           reduce using rule 51 (estatuto -> if_1 .)
    IF              reduce using rule 51 (estatuto -> if_1 .)
    FOR             reduce using rule 51 (estatuto -> if_1 .)
    WHILE           reduce using rule 51 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> if_1 .)
    RETURN          reduce using rule 51 (estatuto -> if_1 .)


state 86

    (52) estatuto -> for_l .

    ID              reduce using rule 52 (estatuto -> for_l .)
    READ            reduce using rule 52 (estatuto -> for_l .)
    WRITE           reduce using rule 52 (estatuto -> for_l .)
    IF              reduce using rule 52 (estatuto -> for_l .)
    FOR             reduce using rule 52 (estatuto -> for_l .)
    WHILE           reduce using rule 52 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 52 (estatuto -> for_l .)
    RETURN          reduce using rule 52 (estatuto -> for_l .)


state 87

    (53) estatuto -> while_l .

    ID              reduce using rule 53 (estatuto -> while_l .)
    READ            reduce using rule 53 (estatuto -> while_l .)
    WRITE           reduce using rule 53 (estatuto -> while_l .)
    IF              reduce using rule 53 (estatuto -> while_l .)
    FOR             reduce using rule 53 (estatuto -> while_l .)
    WHILE           reduce using rule 53 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 53 (estatuto -> while_l .)
    RETURN          reduce using rule 53 (estatuto -> while_l .)


state 88

    (54) estatuto -> func_extra .

    ID              reduce using rule 54 (estatuto -> func_extra .)
    READ            reduce using rule 54 (estatuto -> func_extra .)
    WRITE           reduce using rule 54 (estatuto -> func_extra .)
    IF              reduce using rule 54 (estatuto -> func_extra .)
    FOR             reduce using rule 54 (estatuto -> func_extra .)
    WHILE           reduce using rule 54 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 54 (estatuto -> func_extra .)
    RETURN          reduce using rule 54 (estatuto -> func_extra .)


state 89

    (55) asigna -> variable . EQUAL add_operator exp asigna_point SEMICOLON

    EQUAL           shift and go to state 105


state 90

    (57) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (41) variable -> ID . variable_2 variable_point
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (137) empty -> .

    LPAR            shift and go to state 106
    L_S_BRACKET     shift and go to state 108
    EQUAL           reduce using rule 137 (empty -> .)

    variable_2                     shift and go to state 107
    empty                          shift and go to state 109

state 91

    (60) read -> READ . LPAR variable read_point RPAR SEMICOLON

    LPAR            shift and go to state 110


state 92

    (62) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 111


state 93

    (68) if_1 -> IF . LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    LPAR            shift and go to state 112


state 94

    (76) for_l -> FOR . LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    LPAR            shift and go to state 113


state 95

    (83) while_l -> WHILE . while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (86) while_point -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)

    while_point                    shift and go to state 114
    empty                          shift and go to state 115

state 96

    (89) func_extra -> empty .

    ID              reduce using rule 89 (func_extra -> empty .)
    READ            reduce using rule 89 (func_extra -> empty .)
    WRITE           reduce using rule 89 (func_extra -> empty .)
    IF              reduce using rule 89 (func_extra -> empty .)
    FOR             reduce using rule 89 (func_extra -> empty .)
    WHILE           reduce using rule 89 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 89 (func_extra -> empty .)
    RETURN          reduce using rule 89 (func_extra -> empty .)


state 97

    (35) param -> tipo_simple ID . punto_param param_2
    (39) punto_param -> . empty
    (137) empty -> .

    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)

    punto_param                    shift and go to state 116
    empty                          shift and go to state 117

state 98

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 . RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point

    RPAR            shift and go to state 118


state 99

    (40) punto_param_2 -> empty .

    RPAR            reduce using rule 40 (punto_param_2 -> empty .)


state 100

    (130) function_2 -> VOID ID function_punto2 LPAR param punto_param_2 . RPAR L_C_BRACKET body R_C_BRACKET final_func_point

    RPAR            shift and go to state 119


state 101

    (29) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 120


state 102

    (12) body_2 -> estatuto . body_2
    (12) body_2 -> . estatuto body_2
    (13) body_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 102
    body_2                         shift and go to state 121
    empty                          shift and go to state 104
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 103

    (11) body -> vars func_agrega_v estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body -> vars func_agrega_v estatuto body_2 .)
    RETURN          reduce using rule 11 (body -> vars func_agrega_v estatuto body_2 .)


state 104

    (13) body_2 -> empty .
    (89) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 13 (body_2 -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 13 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 13 (body_2 -> empty .)
    RETURN          reduce using rule 13 (body_2 -> empty .)
    ID              reduce using rule 89 (func_extra -> empty .)
    READ            reduce using rule 89 (func_extra -> empty .)
    WRITE           reduce using rule 89 (func_extra -> empty .)
    IF              reduce using rule 89 (func_extra -> empty .)
    FOR             reduce using rule 89 (func_extra -> empty .)
    WHILE           reduce using rule 89 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 89 (func_extra -> empty .) ]
  ! RETURN          [ reduce using rule 89 (func_extra -> empty .) ]


state 105

    (55) asigna -> variable EQUAL . add_operator exp asigna_point SEMICOLON
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 122
    empty                          shift and go to state 123

state 106

    (57) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 126
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 107

    (41) variable -> ID variable_2 . variable_point
    (42) variable_point -> . empty
    (137) empty -> .

    EQUAL           reduce using rule 137 (empty -> .)
    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    variable_point                 shift and go to state 137
    empty                          shift and go to state 138

state 108

    (43) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 139
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 109

    (44) variable_2 -> empty .

    EQUAL           reduce using rule 44 (variable_2 -> empty .)
    TIMES           reduce using rule 44 (variable_2 -> empty .)
    DIVIDE          reduce using rule 44 (variable_2 -> empty .)
    PLUS            reduce using rule 44 (variable_2 -> empty .)
    MINUS           reduce using rule 44 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 44 (variable_2 -> empty .)
    LESS            reduce using rule 44 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 44 (variable_2 -> empty .)
    GREATER         reduce using rule 44 (variable_2 -> empty .)
    COMPARE         reduce using rule 44 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 44 (variable_2 -> empty .)
    AND             reduce using rule 44 (variable_2 -> empty .)
    OR              reduce using rule 44 (variable_2 -> empty .)
    COMMA           reduce using rule 44 (variable_2 -> empty .)
    RPAR            reduce using rule 44 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 44 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 44 (variable_2 -> empty .)
    TO              reduce using rule 44 (variable_2 -> empty .)


state 110

    (60) read -> READ LPAR . variable read_point RPAR SEMICOLON
    (41) variable -> . ID variable_2 variable_point

    ID              shift and go to state 141

    variable                       shift and go to state 140

state 111

    (62) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (63) write_2 -> . exp write_point
    (64) write_2 -> . CTE_S add_constant_s write_point
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 144
    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    write_2                        shift and go to state 142
    exp                            shift and go to state 143
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 112

    (68) if_1 -> IF LPAR . exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 145
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 113

    (76) for_l -> FOR LPAR . ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    ID              shift and go to state 146


state 114

    (83) while_l -> WHILE while_point . LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    LPAR            shift and go to state 147


state 115

    (86) while_point -> empty .

    LPAR            reduce using rule 86 (while_point -> empty .)


state 116

    (35) param -> tipo_simple ID punto_param . param_2
    (37) param_2 -> . COMMA param
    (38) param_2 -> . empty
    (137) empty -> .

    COMMA           shift and go to state 149
    RPAR            reduce using rule 137 (empty -> .)

    param_2                        shift and go to state 148
    empty                          shift and go to state 150

state 117

    (39) punto_param -> empty .

    COMMA           reduce using rule 39 (punto_param -> empty .)
    RPAR            reduce using rule 39 (punto_param -> empty .)


state 118

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR . L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 151


state 119

    (130) function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR . L_C_BRACKET body R_C_BRACKET final_func_point

    L_C_BRACKET     shift and go to state 152


state 120

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (32) var_mat -> . empty
    (137) empty -> .

    SEMICOLON       reduce using rule 137 (empty -> .)

    var_mat                        shift and go to state 153
    empty                          shift and go to state 154

state 121

    (12) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 12 (body_2 -> estatuto body_2 .)
    RETURN          reduce using rule 12 (body_2 -> estatuto body_2 .)


state 122

    (55) asigna -> variable EQUAL add_operator . exp asigna_point SEMICOLON
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    variable                       shift and go to state 132
    exp                            shift and go to state 155
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 123

    (120) add_operator -> empty .

    LPAR            reduce using rule 120 (add_operator -> empty .)
    ID              reduce using rule 120 (add_operator -> empty .)
    CTE_I           reduce using rule 120 (add_operator -> empty .)
    CTE_F           reduce using rule 120 (add_operator -> empty .)


state 124

    (41) variable -> ID . variable_2 variable_point
    (57) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (137) empty -> .

    LPAR            shift and go to state 106
    L_S_BRACKET     shift and go to state 108
    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    variable_2                     shift and go to state 107
    empty                          shift and go to state 109

state 125

    (112) f -> LPAR . add_floor exp RPAR remove_floor
    (118) add_floor -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_floor                      shift and go to state 156
    empty                          shift and go to state 157

state 126

    (57) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (58) llamada_2 -> . COMMA exp llamada_2
    (59) llamada_2 -> . empty
    (137) empty -> .

    COMMA           shift and go to state 159
    RPAR            reduce using rule 137 (empty -> .)

    llamada_2                      shift and go to state 158
    empty                          shift and go to state 160

state 127

    (90) exp -> t_exp . add_operator_4 exp_2
    (124) add_operator_4 -> . empty
    (137) empty -> .

    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_operator_4                 shift and go to state 161
    empty                          shift and go to state 162

state 128

    (93) t_exp -> g_exp . add_operator_4 t_exp_2
    (124) add_operator_4 -> . empty
    (137) empty -> .

    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_operator_4                 shift and go to state 163
    empty                          shift and go to state 162

state 129

    (96) g_exp -> m_exp . g_exp_2 add_operator_3
    (97) g_exp_2 -> . LESS_EQUAL add_operator m_exp
    (98) g_exp_2 -> . LESS add_operator m_exp
    (99) g_exp_2 -> . GREATER_EQUAL add_operator m_exp
    (100) g_exp_2 -> . GREATER add_operator m_exp
    (101) g_exp_2 -> . COMPARE add_operator m_exp
    (102) g_exp_2 -> . NOT_EQUAL add_operator m_exp
    (103) g_exp_2 -> . empty
    (137) empty -> .

    LESS_EQUAL      shift and go to state 165
    LESS            shift and go to state 166
    GREATER_EQUAL   shift and go to state 167
    GREATER         shift and go to state 168
    COMPARE         shift and go to state 169
    NOT_EQUAL       shift and go to state 170
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    g_exp_2                        shift and go to state 164
    empty                          shift and go to state 171

state 130

    (104) m_exp -> t . add_operator_2 m_exp_2
    (122) add_operator_2 -> . empty
    (137) empty -> .

    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_operator_2                 shift and go to state 172
    empty                          shift and go to state 173

state 131

    (108) t -> f . add_operator_1 t_2
    (121) add_operator_1 -> . empty
    (137) empty -> .

    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_operator_1                 shift and go to state 174
    empty                          shift and go to state 175

state 132

    (113) f -> variable .

    TIMES           reduce using rule 113 (f -> variable .)
    DIVIDE          reduce using rule 113 (f -> variable .)
    PLUS            reduce using rule 113 (f -> variable .)
    MINUS           reduce using rule 113 (f -> variable .)
    LESS_EQUAL      reduce using rule 113 (f -> variable .)
    LESS            reduce using rule 113 (f -> variable .)
    GREATER_EQUAL   reduce using rule 113 (f -> variable .)
    GREATER         reduce using rule 113 (f -> variable .)
    COMPARE         reduce using rule 113 (f -> variable .)
    NOT_EQUAL       reduce using rule 113 (f -> variable .)
    AND             reduce using rule 113 (f -> variable .)
    OR              reduce using rule 113 (f -> variable .)
    COMMA           reduce using rule 113 (f -> variable .)
    RPAR            reduce using rule 113 (f -> variable .)
    R_S_BRACKET     reduce using rule 113 (f -> variable .)
    SEMICOLON       reduce using rule 113 (f -> variable .)
    TO              reduce using rule 113 (f -> variable .)


state 133

    (114) f -> llamada .

    TIMES           reduce using rule 114 (f -> llamada .)
    DIVIDE          reduce using rule 114 (f -> llamada .)
    PLUS            reduce using rule 114 (f -> llamada .)
    MINUS           reduce using rule 114 (f -> llamada .)
    LESS_EQUAL      reduce using rule 114 (f -> llamada .)
    LESS            reduce using rule 114 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 114 (f -> llamada .)
    GREATER         reduce using rule 114 (f -> llamada .)
    COMPARE         reduce using rule 114 (f -> llamada .)
    NOT_EQUAL       reduce using rule 114 (f -> llamada .)
    AND             reduce using rule 114 (f -> llamada .)
    OR              reduce using rule 114 (f -> llamada .)
    COMMA           reduce using rule 114 (f -> llamada .)
    RPAR            reduce using rule 114 (f -> llamada .)
    R_S_BRACKET     reduce using rule 114 (f -> llamada .)
    SEMICOLON       reduce using rule 114 (f -> llamada .)
    TO              reduce using rule 114 (f -> llamada .)


state 134

    (115) f -> f_2 .

    TIMES           reduce using rule 115 (f -> f_2 .)
    DIVIDE          reduce using rule 115 (f -> f_2 .)
    PLUS            reduce using rule 115 (f -> f_2 .)
    MINUS           reduce using rule 115 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 115 (f -> f_2 .)
    LESS            reduce using rule 115 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 115 (f -> f_2 .)
    GREATER         reduce using rule 115 (f -> f_2 .)
    COMPARE         reduce using rule 115 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 115 (f -> f_2 .)
    AND             reduce using rule 115 (f -> f_2 .)
    OR              reduce using rule 115 (f -> f_2 .)
    COMMA           reduce using rule 115 (f -> f_2 .)
    RPAR            reduce using rule 115 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 115 (f -> f_2 .)
    SEMICOLON       reduce using rule 115 (f -> f_2 .)
    TO              reduce using rule 115 (f -> f_2 .)


state 135

    (116) f_2 -> CTE_I . add_constant_i
    (125) add_constant_i -> . empty
    (137) empty -> .

    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_constant_i                 shift and go to state 176
    empty                          shift and go to state 177

state 136

    (117) f_2 -> CTE_F . add_constant_f
    (127) add_constant_f -> . empty
    (137) empty -> .

    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_constant_f                 shift and go to state 178
    empty                          shift and go to state 179

state 137

    (41) variable -> ID variable_2 variable_point .

    EQUAL           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    TIMES           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    DIVIDE          reduce using rule 41 (variable -> ID variable_2 variable_point .)
    PLUS            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    MINUS           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    LESS_EQUAL      reduce using rule 41 (variable -> ID variable_2 variable_point .)
    LESS            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    GREATER_EQUAL   reduce using rule 41 (variable -> ID variable_2 variable_point .)
    GREATER         reduce using rule 41 (variable -> ID variable_2 variable_point .)
    COMPARE         reduce using rule 41 (variable -> ID variable_2 variable_point .)
    NOT_EQUAL       reduce using rule 41 (variable -> ID variable_2 variable_point .)
    AND             reduce using rule 41 (variable -> ID variable_2 variable_point .)
    OR              reduce using rule 41 (variable -> ID variable_2 variable_point .)
    COMMA           reduce using rule 41 (variable -> ID variable_2 variable_point .)
    RPAR            reduce using rule 41 (variable -> ID variable_2 variable_point .)
    R_S_BRACKET     reduce using rule 41 (variable -> ID variable_2 variable_point .)
    SEMICOLON       reduce using rule 41 (variable -> ID variable_2 variable_point .)
    TO              reduce using rule 41 (variable -> ID variable_2 variable_point .)


state 138

    (42) variable_point -> empty .

    EQUAL           reduce using rule 42 (variable_point -> empty .)
    TIMES           reduce using rule 42 (variable_point -> empty .)
    DIVIDE          reduce using rule 42 (variable_point -> empty .)
    PLUS            reduce using rule 42 (variable_point -> empty .)
    MINUS           reduce using rule 42 (variable_point -> empty .)
    LESS_EQUAL      reduce using rule 42 (variable_point -> empty .)
    LESS            reduce using rule 42 (variable_point -> empty .)
    GREATER_EQUAL   reduce using rule 42 (variable_point -> empty .)
    GREATER         reduce using rule 42 (variable_point -> empty .)
    COMPARE         reduce using rule 42 (variable_point -> empty .)
    NOT_EQUAL       reduce using rule 42 (variable_point -> empty .)
    AND             reduce using rule 42 (variable_point -> empty .)
    OR              reduce using rule 42 (variable_point -> empty .)
    COMMA           reduce using rule 42 (variable_point -> empty .)
    RPAR            reduce using rule 42 (variable_point -> empty .)
    R_S_BRACKET     reduce using rule 42 (variable_point -> empty .)
    SEMICOLON       reduce using rule 42 (variable_point -> empty .)
    TO              reduce using rule 42 (variable_point -> empty .)


state 139

    (43) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 180


state 140

    (60) read -> READ LPAR variable . read_point RPAR SEMICOLON
    (61) read_point -> . empty
    (137) empty -> .

    RPAR            reduce using rule 137 (empty -> .)

    read_point                     shift and go to state 181
    empty                          shift and go to state 182

state 141

    (41) variable -> ID . variable_2 variable_point
    (43) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (44) variable_2 -> . empty
    (137) empty -> .

    L_S_BRACKET     shift and go to state 108
    RPAR            reduce using rule 137 (empty -> .)

    variable_2                     shift and go to state 107
    empty                          shift and go to state 109

state 142

    (62) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (65) write_3 -> . COMMA write_2 write_3
    (66) write_3 -> . empty
    (137) empty -> .

    COMMA           shift and go to state 184
    RPAR            reduce using rule 137 (empty -> .)

    write_3                        shift and go to state 183
    empty                          shift and go to state 185

state 143

    (63) write_2 -> exp . write_point
    (67) write_point -> . empty
    (137) empty -> .

    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)

    write_point                    shift and go to state 186
    empty                          shift and go to state 187

state 144

    (64) write_2 -> CTE_S . add_constant_s write_point
    (126) add_constant_s -> . empty
    (137) empty -> .

    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)

    add_constant_s                 shift and go to state 188
    empty                          shift and go to state 189

state 145

    (68) if_1 -> IF LPAR exp . if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (73) if_point -> . empty
    (137) empty -> .

    RPAR            reduce using rule 137 (empty -> .)

    if_point                       shift and go to state 190
    empty                          shift and go to state 191

state 146

    (76) for_l -> FOR LPAR ID . for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (79) for_point_1 -> . empty
    (137) empty -> .

    EQUAL           reduce using rule 137 (empty -> .)

    for_point_1                    shift and go to state 192
    empty                          shift and go to state 193

state 147

    (83) while_l -> WHILE while_point LPAR . exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 194
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 148

    (35) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 35 (param -> tipo_simple ID punto_param param_2 .)


state 149

    (37) param_2 -> COMMA . param
    (35) param -> . tipo_simple ID punto_param param_2
    (36) param -> . empty
    (14) tipo_simple -> . INT
    (15) tipo_simple -> . FLOAT
    (16) tipo_simple -> . CHAR
    (137) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 137 (empty -> .)

    param                          shift and go to state 195
    tipo_simple                    shift and go to state 71
    empty                          shift and go to state 73

state 150

    (38) param_2 -> empty .

    RPAR            reduce using rule 38 (param_2 -> empty .)


state 151

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET . body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 196
    vars                           shift and go to state 64

state 152

    (130) function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET . body R_C_BRACKET final_func_point
    (11) body -> . vars func_agrega_v estatuto body_2
    (18) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 197
    vars                           shift and go to state 64

state 153

    (29) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 29 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 154

    (32) var_mat -> empty .

    SEMICOLON       reduce using rule 32 (var_mat -> empty .)


state 155

    (55) asigna -> variable EQUAL add_operator exp . asigna_point SEMICOLON
    (56) asigna_point -> . empty
    (137) empty -> .

    SEMICOLON       reduce using rule 137 (empty -> .)

    asigna_point                   shift and go to state 198
    empty                          shift and go to state 199

state 156

    (112) f -> LPAR add_floor . exp RPAR remove_floor
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 200
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 157

    (118) add_floor -> empty .

    LPAR            reduce using rule 118 (add_floor -> empty .)
    ID              reduce using rule 118 (add_floor -> empty .)
    CTE_I           reduce using rule 118 (add_floor -> empty .)
    CTE_F           reduce using rule 118 (add_floor -> empty .)


state 158

    (57) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 201


state 159

    (58) llamada_2 -> COMMA . exp llamada_2
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 202
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 160

    (59) llamada_2 -> empty .

    RPAR            reduce using rule 59 (llamada_2 -> empty .)


state 161

    (90) exp -> t_exp add_operator_4 . exp_2
    (91) exp_2 -> . OR add_operator exp
    (92) exp_2 -> . empty
    (137) empty -> .

    OR              shift and go to state 204
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    exp_2                          shift and go to state 203
    empty                          shift and go to state 205

state 162

    (124) add_operator_4 -> empty .

    OR              reduce using rule 124 (add_operator_4 -> empty .)
    COMMA           reduce using rule 124 (add_operator_4 -> empty .)
    RPAR            reduce using rule 124 (add_operator_4 -> empty .)
    R_S_BRACKET     reduce using rule 124 (add_operator_4 -> empty .)
    SEMICOLON       reduce using rule 124 (add_operator_4 -> empty .)
    TO              reduce using rule 124 (add_operator_4 -> empty .)
    AND             reduce using rule 124 (add_operator_4 -> empty .)


state 163

    (93) t_exp -> g_exp add_operator_4 . t_exp_2
    (94) t_exp_2 -> . AND add_operator t_exp
    (95) t_exp_2 -> . empty
    (137) empty -> .

    AND             shift and go to state 207
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    t_exp_2                        shift and go to state 206
    empty                          shift and go to state 208

state 164

    (96) g_exp -> m_exp g_exp_2 . add_operator_3
    (123) add_operator_3 -> . empty
    (137) empty -> .

    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    add_operator_3                 shift and go to state 209
    empty                          shift and go to state 210

state 165

    (97) g_exp_2 -> LESS_EQUAL . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 211
    empty                          shift and go to state 123

state 166

    (98) g_exp_2 -> LESS . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 212
    empty                          shift and go to state 123

state 167

    (99) g_exp_2 -> GREATER_EQUAL . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 213
    empty                          shift and go to state 123

state 168

    (100) g_exp_2 -> GREATER . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 214
    empty                          shift and go to state 123

state 169

    (101) g_exp_2 -> COMPARE . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 215
    empty                          shift and go to state 123

state 170

    (102) g_exp_2 -> NOT_EQUAL . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 216
    empty                          shift and go to state 123

state 171

    (103) g_exp_2 -> empty .

    AND             reduce using rule 103 (g_exp_2 -> empty .)
    OR              reduce using rule 103 (g_exp_2 -> empty .)
    COMMA           reduce using rule 103 (g_exp_2 -> empty .)
    RPAR            reduce using rule 103 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 103 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 103 (g_exp_2 -> empty .)
    TO              reduce using rule 103 (g_exp_2 -> empty .)


state 172

    (104) m_exp -> t add_operator_2 . m_exp_2
    (105) m_exp_2 -> . PLUS add_operator m_exp
    (106) m_exp_2 -> . MINUS add_operator m_exp
    (107) m_exp_2 -> . empty
    (137) empty -> .

    PLUS            shift and go to state 218
    MINUS           shift and go to state 219
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    m_exp_2                        shift and go to state 217
    empty                          shift and go to state 220

state 173

    (122) add_operator_2 -> empty .

    PLUS            reduce using rule 122 (add_operator_2 -> empty .)
    MINUS           reduce using rule 122 (add_operator_2 -> empty .)
    LESS_EQUAL      reduce using rule 122 (add_operator_2 -> empty .)
    LESS            reduce using rule 122 (add_operator_2 -> empty .)
    GREATER_EQUAL   reduce using rule 122 (add_operator_2 -> empty .)
    GREATER         reduce using rule 122 (add_operator_2 -> empty .)
    COMPARE         reduce using rule 122 (add_operator_2 -> empty .)
    NOT_EQUAL       reduce using rule 122 (add_operator_2 -> empty .)
    AND             reduce using rule 122 (add_operator_2 -> empty .)
    OR              reduce using rule 122 (add_operator_2 -> empty .)
    COMMA           reduce using rule 122 (add_operator_2 -> empty .)
    RPAR            reduce using rule 122 (add_operator_2 -> empty .)
    R_S_BRACKET     reduce using rule 122 (add_operator_2 -> empty .)
    SEMICOLON       reduce using rule 122 (add_operator_2 -> empty .)
    TO              reduce using rule 122 (add_operator_2 -> empty .)


state 174

    (108) t -> f add_operator_1 . t_2
    (109) t_2 -> . TIMES add_operator t
    (110) t_2 -> . DIVIDE add_operator t
    (111) t_2 -> . empty
    (137) empty -> .

    TIMES           shift and go to state 222
    DIVIDE          shift and go to state 223
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    t_2                            shift and go to state 221
    empty                          shift and go to state 224

state 175

    (121) add_operator_1 -> empty .

    TIMES           reduce using rule 121 (add_operator_1 -> empty .)
    DIVIDE          reduce using rule 121 (add_operator_1 -> empty .)
    PLUS            reduce using rule 121 (add_operator_1 -> empty .)
    MINUS           reduce using rule 121 (add_operator_1 -> empty .)
    LESS_EQUAL      reduce using rule 121 (add_operator_1 -> empty .)
    LESS            reduce using rule 121 (add_operator_1 -> empty .)
    GREATER_EQUAL   reduce using rule 121 (add_operator_1 -> empty .)
    GREATER         reduce using rule 121 (add_operator_1 -> empty .)
    COMPARE         reduce using rule 121 (add_operator_1 -> empty .)
    NOT_EQUAL       reduce using rule 121 (add_operator_1 -> empty .)
    AND             reduce using rule 121 (add_operator_1 -> empty .)
    OR              reduce using rule 121 (add_operator_1 -> empty .)
    COMMA           reduce using rule 121 (add_operator_1 -> empty .)
    RPAR            reduce using rule 121 (add_operator_1 -> empty .)
    R_S_BRACKET     reduce using rule 121 (add_operator_1 -> empty .)
    SEMICOLON       reduce using rule 121 (add_operator_1 -> empty .)
    TO              reduce using rule 121 (add_operator_1 -> empty .)


state 176

    (116) f_2 -> CTE_I add_constant_i .

    TIMES           reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    DIVIDE          reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    PLUS            reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    MINUS           reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    LESS_EQUAL      reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    LESS            reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    GREATER_EQUAL   reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    GREATER         reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    COMPARE         reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    NOT_EQUAL       reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    AND             reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    OR              reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    COMMA           reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    RPAR            reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    R_S_BRACKET     reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    SEMICOLON       reduce using rule 116 (f_2 -> CTE_I add_constant_i .)
    TO              reduce using rule 116 (f_2 -> CTE_I add_constant_i .)


state 177

    (125) add_constant_i -> empty .

    TIMES           reduce using rule 125 (add_constant_i -> empty .)
    DIVIDE          reduce using rule 125 (add_constant_i -> empty .)
    PLUS            reduce using rule 125 (add_constant_i -> empty .)
    MINUS           reduce using rule 125 (add_constant_i -> empty .)
    LESS_EQUAL      reduce using rule 125 (add_constant_i -> empty .)
    LESS            reduce using rule 125 (add_constant_i -> empty .)
    GREATER_EQUAL   reduce using rule 125 (add_constant_i -> empty .)
    GREATER         reduce using rule 125 (add_constant_i -> empty .)
    COMPARE         reduce using rule 125 (add_constant_i -> empty .)
    NOT_EQUAL       reduce using rule 125 (add_constant_i -> empty .)
    AND             reduce using rule 125 (add_constant_i -> empty .)
    OR              reduce using rule 125 (add_constant_i -> empty .)
    COMMA           reduce using rule 125 (add_constant_i -> empty .)
    RPAR            reduce using rule 125 (add_constant_i -> empty .)
    R_S_BRACKET     reduce using rule 125 (add_constant_i -> empty .)
    SEMICOLON       reduce using rule 125 (add_constant_i -> empty .)
    TO              reduce using rule 125 (add_constant_i -> empty .)


state 178

    (117) f_2 -> CTE_F add_constant_f .

    TIMES           reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    DIVIDE          reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    PLUS            reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    MINUS           reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    LESS_EQUAL      reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    LESS            reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    GREATER_EQUAL   reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    GREATER         reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    COMPARE         reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    NOT_EQUAL       reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    AND             reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    OR              reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    COMMA           reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    RPAR            reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    R_S_BRACKET     reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    SEMICOLON       reduce using rule 117 (f_2 -> CTE_F add_constant_f .)
    TO              reduce using rule 117 (f_2 -> CTE_F add_constant_f .)


state 179

    (127) add_constant_f -> empty .

    TIMES           reduce using rule 127 (add_constant_f -> empty .)
    DIVIDE          reduce using rule 127 (add_constant_f -> empty .)
    PLUS            reduce using rule 127 (add_constant_f -> empty .)
    MINUS           reduce using rule 127 (add_constant_f -> empty .)
    LESS_EQUAL      reduce using rule 127 (add_constant_f -> empty .)
    LESS            reduce using rule 127 (add_constant_f -> empty .)
    GREATER_EQUAL   reduce using rule 127 (add_constant_f -> empty .)
    GREATER         reduce using rule 127 (add_constant_f -> empty .)
    COMPARE         reduce using rule 127 (add_constant_f -> empty .)
    NOT_EQUAL       reduce using rule 127 (add_constant_f -> empty .)
    AND             reduce using rule 127 (add_constant_f -> empty .)
    OR              reduce using rule 127 (add_constant_f -> empty .)
    COMMA           reduce using rule 127 (add_constant_f -> empty .)
    RPAR            reduce using rule 127 (add_constant_f -> empty .)
    R_S_BRACKET     reduce using rule 127 (add_constant_f -> empty .)
    SEMICOLON       reduce using rule 127 (add_constant_f -> empty .)
    TO              reduce using rule 127 (add_constant_f -> empty .)


state 180

    (43) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (45) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (46) variable_3 -> . empty
    (137) empty -> .

    L_S_BRACKET     shift and go to state 225
    EQUAL           reduce using rule 137 (empty -> .)
    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    variable_3                     shift and go to state 226
    empty                          shift and go to state 227

state 181

    (60) read -> READ LPAR variable read_point . RPAR SEMICOLON

    RPAR            shift and go to state 228


state 182

    (61) read_point -> empty .

    RPAR            reduce using rule 61 (read_point -> empty .)


state 183

    (62) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 229


state 184

    (65) write_3 -> COMMA . write_2 write_3
    (63) write_2 -> . exp write_point
    (64) write_2 -> . CTE_S add_constant_s write_point
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    CTE_S           shift and go to state 144
    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    write_2                        shift and go to state 230
    exp                            shift and go to state 143
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 185

    (66) write_3 -> empty .

    RPAR            reduce using rule 66 (write_3 -> empty .)


state 186

    (63) write_2 -> exp write_point .

    COMMA           reduce using rule 63 (write_2 -> exp write_point .)
    RPAR            reduce using rule 63 (write_2 -> exp write_point .)


state 187

    (67) write_point -> empty .

    COMMA           reduce using rule 67 (write_point -> empty .)
    RPAR            reduce using rule 67 (write_point -> empty .)


state 188

    (64) write_2 -> CTE_S add_constant_s . write_point
    (67) write_point -> . empty
    (137) empty -> .

    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)

    write_point                    shift and go to state 231
    empty                          shift and go to state 187

state 189

    (126) add_constant_s -> empty .

    COMMA           reduce using rule 126 (add_constant_s -> empty .)
    RPAR            reduce using rule 126 (add_constant_s -> empty .)


state 190

    (68) if_1 -> IF LPAR exp if_point . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    RPAR            shift and go to state 232


state 191

    (73) if_point -> empty .

    RPAR            reduce using rule 73 (if_point -> empty .)


state 192

    (76) for_l -> FOR LPAR ID for_point_1 . EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    EQUAL           shift and go to state 233


state 193

    (79) for_point_1 -> empty .

    EQUAL           reduce using rule 79 (for_point_1 -> empty .)


state 194

    (83) while_l -> WHILE while_point LPAR exp . RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    RPAR            shift and go to state 234


state 195

    (37) param_2 -> COMMA param .

    RPAR            reduce using rule 37 (param_2 -> COMMA param .)


state 196

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body . RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point

    RETURN          shift and go to state 235


state 197

    (130) function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 236


state 198

    (55) asigna -> variable EQUAL add_operator exp asigna_point . SEMICOLON

    SEMICOLON       shift and go to state 237


state 199

    (56) asigna_point -> empty .

    SEMICOLON       reduce using rule 56 (asigna_point -> empty .)


state 200

    (112) f -> LPAR add_floor exp . RPAR remove_floor

    RPAR            shift and go to state 238


state 201

    (57) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 239


state 202

    (58) llamada_2 -> COMMA exp . llamada_2
    (58) llamada_2 -> . COMMA exp llamada_2
    (59) llamada_2 -> . empty
    (137) empty -> .

    COMMA           shift and go to state 159
    RPAR            reduce using rule 137 (empty -> .)

    llamada_2                      shift and go to state 240
    empty                          shift and go to state 160

state 203

    (90) exp -> t_exp add_operator_4 exp_2 .

    COMMA           reduce using rule 90 (exp -> t_exp add_operator_4 exp_2 .)
    RPAR            reduce using rule 90 (exp -> t_exp add_operator_4 exp_2 .)
    R_S_BRACKET     reduce using rule 90 (exp -> t_exp add_operator_4 exp_2 .)
    SEMICOLON       reduce using rule 90 (exp -> t_exp add_operator_4 exp_2 .)
    TO              reduce using rule 90 (exp -> t_exp add_operator_4 exp_2 .)


state 204

    (91) exp_2 -> OR . add_operator exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 241
    empty                          shift and go to state 123

state 205

    (92) exp_2 -> empty .

    COMMA           reduce using rule 92 (exp_2 -> empty .)
    RPAR            reduce using rule 92 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 92 (exp_2 -> empty .)
    SEMICOLON       reduce using rule 92 (exp_2 -> empty .)
    TO              reduce using rule 92 (exp_2 -> empty .)


state 206

    (93) t_exp -> g_exp add_operator_4 t_exp_2 .

    OR              reduce using rule 93 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    COMMA           reduce using rule 93 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    RPAR            reduce using rule 93 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    R_S_BRACKET     reduce using rule 93 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    SEMICOLON       reduce using rule 93 (t_exp -> g_exp add_operator_4 t_exp_2 .)
    TO              reduce using rule 93 (t_exp -> g_exp add_operator_4 t_exp_2 .)


state 207

    (94) t_exp_2 -> AND . add_operator t_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 242
    empty                          shift and go to state 123

state 208

    (95) t_exp_2 -> empty .

    OR              reduce using rule 95 (t_exp_2 -> empty .)
    COMMA           reduce using rule 95 (t_exp_2 -> empty .)
    RPAR            reduce using rule 95 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 95 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 95 (t_exp_2 -> empty .)
    TO              reduce using rule 95 (t_exp_2 -> empty .)


state 209

    (96) g_exp -> m_exp g_exp_2 add_operator_3 .

    AND             reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    OR              reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    COMMA           reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    RPAR            reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    R_S_BRACKET     reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    SEMICOLON       reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)
    TO              reduce using rule 96 (g_exp -> m_exp g_exp_2 add_operator_3 .)


state 210

    (123) add_operator_3 -> empty .

    AND             reduce using rule 123 (add_operator_3 -> empty .)
    OR              reduce using rule 123 (add_operator_3 -> empty .)
    COMMA           reduce using rule 123 (add_operator_3 -> empty .)
    RPAR            reduce using rule 123 (add_operator_3 -> empty .)
    R_S_BRACKET     reduce using rule 123 (add_operator_3 -> empty .)
    SEMICOLON       reduce using rule 123 (add_operator_3 -> empty .)
    TO              reduce using rule 123 (add_operator_3 -> empty .)


state 211

    (97) g_exp_2 -> LESS_EQUAL add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 243
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 212

    (98) g_exp_2 -> LESS add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 244
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 213

    (99) g_exp_2 -> GREATER_EQUAL add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 245
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 214

    (100) g_exp_2 -> GREATER add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 246
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 215

    (101) g_exp_2 -> COMPARE add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 247
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 216

    (102) g_exp_2 -> NOT_EQUAL add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 248
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 217

    (104) m_exp -> t add_operator_2 m_exp_2 .

    LESS_EQUAL      reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    LESS            reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER_EQUAL   reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    GREATER         reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    COMPARE         reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    NOT_EQUAL       reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    AND             reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    OR              reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    COMMA           reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    RPAR            reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    R_S_BRACKET     reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    SEMICOLON       reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)
    TO              reduce using rule 104 (m_exp -> t add_operator_2 m_exp_2 .)


state 218

    (105) m_exp_2 -> PLUS . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 249
    empty                          shift and go to state 123

state 219

    (106) m_exp_2 -> MINUS . add_operator m_exp
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 250
    empty                          shift and go to state 123

state 220

    (107) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 107 (m_exp_2 -> empty .)
    LESS            reduce using rule 107 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 107 (m_exp_2 -> empty .)
    GREATER         reduce using rule 107 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 107 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 107 (m_exp_2 -> empty .)
    AND             reduce using rule 107 (m_exp_2 -> empty .)
    OR              reduce using rule 107 (m_exp_2 -> empty .)
    COMMA           reduce using rule 107 (m_exp_2 -> empty .)
    RPAR            reduce using rule 107 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 107 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 107 (m_exp_2 -> empty .)
    TO              reduce using rule 107 (m_exp_2 -> empty .)


state 221

    (108) t -> f add_operator_1 t_2 .

    PLUS            reduce using rule 108 (t -> f add_operator_1 t_2 .)
    MINUS           reduce using rule 108 (t -> f add_operator_1 t_2 .)
    LESS_EQUAL      reduce using rule 108 (t -> f add_operator_1 t_2 .)
    LESS            reduce using rule 108 (t -> f add_operator_1 t_2 .)
    GREATER_EQUAL   reduce using rule 108 (t -> f add_operator_1 t_2 .)
    GREATER         reduce using rule 108 (t -> f add_operator_1 t_2 .)
    COMPARE         reduce using rule 108 (t -> f add_operator_1 t_2 .)
    NOT_EQUAL       reduce using rule 108 (t -> f add_operator_1 t_2 .)
    AND             reduce using rule 108 (t -> f add_operator_1 t_2 .)
    OR              reduce using rule 108 (t -> f add_operator_1 t_2 .)
    COMMA           reduce using rule 108 (t -> f add_operator_1 t_2 .)
    RPAR            reduce using rule 108 (t -> f add_operator_1 t_2 .)
    R_S_BRACKET     reduce using rule 108 (t -> f add_operator_1 t_2 .)
    SEMICOLON       reduce using rule 108 (t -> f add_operator_1 t_2 .)
    TO              reduce using rule 108 (t -> f add_operator_1 t_2 .)


state 222

    (109) t_2 -> TIMES . add_operator t
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 251
    empty                          shift and go to state 123

state 223

    (110) t_2 -> DIVIDE . add_operator t
    (120) add_operator -> . empty
    (137) empty -> .

    LPAR            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    CTE_I           reduce using rule 137 (empty -> .)
    CTE_F           reduce using rule 137 (empty -> .)

    add_operator                   shift and go to state 252
    empty                          shift and go to state 123

state 224

    (111) t_2 -> empty .

    PLUS            reduce using rule 111 (t_2 -> empty .)
    MINUS           reduce using rule 111 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 111 (t_2 -> empty .)
    LESS            reduce using rule 111 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 111 (t_2 -> empty .)
    GREATER         reduce using rule 111 (t_2 -> empty .)
    COMPARE         reduce using rule 111 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 111 (t_2 -> empty .)
    AND             reduce using rule 111 (t_2 -> empty .)
    OR              reduce using rule 111 (t_2 -> empty .)
    COMMA           reduce using rule 111 (t_2 -> empty .)
    RPAR            reduce using rule 111 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 111 (t_2 -> empty .)
    SEMICOLON       reduce using rule 111 (t_2 -> empty .)
    TO              reduce using rule 111 (t_2 -> empty .)


state 225

    (45) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 253
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 226

    (43) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 43 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 227

    (46) variable_3 -> empty .

    EQUAL           reduce using rule 46 (variable_3 -> empty .)
    TIMES           reduce using rule 46 (variable_3 -> empty .)
    DIVIDE          reduce using rule 46 (variable_3 -> empty .)
    PLUS            reduce using rule 46 (variable_3 -> empty .)
    MINUS           reduce using rule 46 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 46 (variable_3 -> empty .)
    LESS            reduce using rule 46 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 46 (variable_3 -> empty .)
    GREATER         reduce using rule 46 (variable_3 -> empty .)
    COMPARE         reduce using rule 46 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 46 (variable_3 -> empty .)
    AND             reduce using rule 46 (variable_3 -> empty .)
    OR              reduce using rule 46 (variable_3 -> empty .)
    COMMA           reduce using rule 46 (variable_3 -> empty .)
    RPAR            reduce using rule 46 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 46 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 46 (variable_3 -> empty .)
    TO              reduce using rule 46 (variable_3 -> empty .)


state 228

    (60) read -> READ LPAR variable read_point RPAR . SEMICOLON

    SEMICOLON       shift and go to state 254


state 229

    (62) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 255


state 230

    (65) write_3 -> COMMA write_2 . write_3
    (65) write_3 -> . COMMA write_2 write_3
    (66) write_3 -> . empty
    (137) empty -> .

    COMMA           shift and go to state 184
    RPAR            reduce using rule 137 (empty -> .)

    write_3                        shift and go to state 256
    empty                          shift and go to state 185

state 231

    (64) write_2 -> CTE_S add_constant_s write_point .

    COMMA           reduce using rule 64 (write_2 -> CTE_S add_constant_s write_point .)
    RPAR            reduce using rule 64 (write_2 -> CTE_S add_constant_s write_point .)


state 232

    (68) if_1 -> IF LPAR exp if_point RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2

    L_C_BRACKET     shift and go to state 257


state 233

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL . exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 258
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 234

    (83) while_l -> WHILE while_point LPAR exp RPAR . while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (87) while_point_2 -> . empty
    (137) empty -> .

    L_C_BRACKET     reduce using rule 137 (empty -> .)

    while_point_2                  shift and go to state 259
    empty                          shift and go to state 260

state 235

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN . LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point

    LPAR            shift and go to state 261


state 236

    (130) function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET . final_func_point
    (136) final_func_point -> . empty
    (137) empty -> .

    SEMICOLON       reduce using rule 137 (empty -> .)

    final_func_point               shift and go to state 262
    empty                          shift and go to state 263

state 237

    (55) asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .

    ID              reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    READ            reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WRITE           reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    IF              reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    FOR             reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    WHILE           reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    R_C_BRACKET     reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)
    RETURN          reduce using rule 55 (asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON .)


state 238

    (112) f -> LPAR add_floor exp RPAR . remove_floor
    (119) remove_floor -> . empty
    (137) empty -> .

    TIMES           reduce using rule 137 (empty -> .)
    DIVIDE          reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    LESS_EQUAL      reduce using rule 137 (empty -> .)
    LESS            reduce using rule 137 (empty -> .)
    GREATER_EQUAL   reduce using rule 137 (empty -> .)
    GREATER         reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    NOT_EQUAL       reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAR            reduce using rule 137 (empty -> .)
    R_S_BRACKET     reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    remove_floor                   shift and go to state 264
    empty                          shift and go to state 265

state 239

    (57) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 57 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 240

    (58) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 58 (llamada_2 -> COMMA exp llamada_2 .)


state 241

    (91) exp_2 -> OR add_operator . exp
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 266
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 242

    (94) t_exp_2 -> AND add_operator . t_exp
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    t_exp                          shift and go to state 267
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 243

    (97) g_exp_2 -> LESS_EQUAL add_operator m_exp .

    AND             reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    OR              reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)
    TO              reduce using rule 97 (g_exp_2 -> LESS_EQUAL add_operator m_exp .)


state 244

    (98) g_exp_2 -> LESS add_operator m_exp .

    AND             reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)
    OR              reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)
    COMMA           reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)
    RPAR            reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)
    SEMICOLON       reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)
    TO              reduce using rule 98 (g_exp_2 -> LESS add_operator m_exp .)


state 245

    (99) g_exp_2 -> GREATER_EQUAL add_operator m_exp .

    AND             reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    OR              reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)
    TO              reduce using rule 99 (g_exp_2 -> GREATER_EQUAL add_operator m_exp .)


state 246

    (100) g_exp_2 -> GREATER add_operator m_exp .

    AND             reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)
    OR              reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)
    COMMA           reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)
    RPAR            reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)
    R_S_BRACKET     reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)
    SEMICOLON       reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)
    TO              reduce using rule 100 (g_exp_2 -> GREATER add_operator m_exp .)


state 247

    (101) g_exp_2 -> COMPARE add_operator m_exp .

    AND             reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)
    OR              reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)
    COMMA           reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)
    RPAR            reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)
    R_S_BRACKET     reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)
    SEMICOLON       reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)
    TO              reduce using rule 101 (g_exp_2 -> COMPARE add_operator m_exp .)


state 248

    (102) g_exp_2 -> NOT_EQUAL add_operator m_exp .

    AND             reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    OR              reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    COMMA           reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    RPAR            reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    R_S_BRACKET     reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    SEMICOLON       reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)
    TO              reduce using rule 102 (g_exp_2 -> NOT_EQUAL add_operator m_exp .)


state 249

    (105) m_exp_2 -> PLUS add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 268
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 250

    (106) m_exp_2 -> MINUS add_operator . m_exp
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    m_exp                          shift and go to state 269
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 251

    (109) t_2 -> TIMES add_operator . t
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    t                              shift and go to state 270
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 252

    (110) t_2 -> DIVIDE add_operator . t
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    t                              shift and go to state 271
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 253

    (45) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 272


state 254

    (60) read -> READ LPAR variable read_point RPAR SEMICOLON .

    ID              reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    READ            reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WRITE           reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    IF              reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    FOR             reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    WHILE           reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)
    RETURN          reduce using rule 60 (read -> READ LPAR variable read_point RPAR SEMICOLON .)


state 255

    (62) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 62 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 256

    (65) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 65 (write_3 -> COMMA write_2 write_3 .)


state 257

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 273
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 258

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp . for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (80) for_point_2 -> . empty
    (137) empty -> .

    TO              reduce using rule 137 (empty -> .)

    for_point_2                    shift and go to state 274
    empty                          shift and go to state 275

state 259

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3

    L_C_BRACKET     shift and go to state 276


state 260

    (87) while_point_2 -> empty .

    L_C_BRACKET     reduce using rule 87 (while_point_2 -> empty .)


state 261

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR . exp RPAR SEMICOLON R_C_BRACKET final_func_point
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 277
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 262

    (130) function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 130 (function_2 -> VOID ID function_punto2 LPAR param punto_param_2 RPAR L_C_BRACKET body R_C_BRACKET final_func_point .)


state 263

    (136) final_func_point -> empty .

    SEMICOLON       reduce using rule 136 (final_func_point -> empty .)


state 264

    (112) f -> LPAR add_floor exp RPAR remove_floor .

    TIMES           reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    DIVIDE          reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    PLUS            reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    MINUS           reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS_EQUAL      reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    LESS            reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER_EQUAL   reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    GREATER         reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMPARE         reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    NOT_EQUAL       reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    AND             reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    OR              reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    COMMA           reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    RPAR            reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    R_S_BRACKET     reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    SEMICOLON       reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)
    TO              reduce using rule 112 (f -> LPAR add_floor exp RPAR remove_floor .)


state 265

    (119) remove_floor -> empty .

    TIMES           reduce using rule 119 (remove_floor -> empty .)
    DIVIDE          reduce using rule 119 (remove_floor -> empty .)
    PLUS            reduce using rule 119 (remove_floor -> empty .)
    MINUS           reduce using rule 119 (remove_floor -> empty .)
    LESS_EQUAL      reduce using rule 119 (remove_floor -> empty .)
    LESS            reduce using rule 119 (remove_floor -> empty .)
    GREATER_EQUAL   reduce using rule 119 (remove_floor -> empty .)
    GREATER         reduce using rule 119 (remove_floor -> empty .)
    COMPARE         reduce using rule 119 (remove_floor -> empty .)
    NOT_EQUAL       reduce using rule 119 (remove_floor -> empty .)
    AND             reduce using rule 119 (remove_floor -> empty .)
    OR              reduce using rule 119 (remove_floor -> empty .)
    COMMA           reduce using rule 119 (remove_floor -> empty .)
    RPAR            reduce using rule 119 (remove_floor -> empty .)
    R_S_BRACKET     reduce using rule 119 (remove_floor -> empty .)
    SEMICOLON       reduce using rule 119 (remove_floor -> empty .)
    TO              reduce using rule 119 (remove_floor -> empty .)


state 266

    (91) exp_2 -> OR add_operator exp .

    COMMA           reduce using rule 91 (exp_2 -> OR add_operator exp .)
    RPAR            reduce using rule 91 (exp_2 -> OR add_operator exp .)
    R_S_BRACKET     reduce using rule 91 (exp_2 -> OR add_operator exp .)
    SEMICOLON       reduce using rule 91 (exp_2 -> OR add_operator exp .)
    TO              reduce using rule 91 (exp_2 -> OR add_operator exp .)


state 267

    (94) t_exp_2 -> AND add_operator t_exp .

    OR              reduce using rule 94 (t_exp_2 -> AND add_operator t_exp .)
    COMMA           reduce using rule 94 (t_exp_2 -> AND add_operator t_exp .)
    RPAR            reduce using rule 94 (t_exp_2 -> AND add_operator t_exp .)
    R_S_BRACKET     reduce using rule 94 (t_exp_2 -> AND add_operator t_exp .)
    SEMICOLON       reduce using rule 94 (t_exp_2 -> AND add_operator t_exp .)
    TO              reduce using rule 94 (t_exp_2 -> AND add_operator t_exp .)


state 268

    (105) m_exp_2 -> PLUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    LESS            reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    GREATER         reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    COMPARE         reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    AND             reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    OR              reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    COMMA           reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    RPAR            reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    SEMICOLON       reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)
    TO              reduce using rule 105 (m_exp_2 -> PLUS add_operator m_exp .)


state 269

    (106) m_exp_2 -> MINUS add_operator m_exp .

    LESS_EQUAL      reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    LESS            reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER_EQUAL   reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    GREATER         reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    COMPARE         reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    NOT_EQUAL       reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    AND             reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    OR              reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    COMMA           reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    RPAR            reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    R_S_BRACKET     reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    SEMICOLON       reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)
    TO              reduce using rule 106 (m_exp_2 -> MINUS add_operator m_exp .)


state 270

    (109) t_2 -> TIMES add_operator t .

    PLUS            reduce using rule 109 (t_2 -> TIMES add_operator t .)
    MINUS           reduce using rule 109 (t_2 -> TIMES add_operator t .)
    LESS_EQUAL      reduce using rule 109 (t_2 -> TIMES add_operator t .)
    LESS            reduce using rule 109 (t_2 -> TIMES add_operator t .)
    GREATER_EQUAL   reduce using rule 109 (t_2 -> TIMES add_operator t .)
    GREATER         reduce using rule 109 (t_2 -> TIMES add_operator t .)
    COMPARE         reduce using rule 109 (t_2 -> TIMES add_operator t .)
    NOT_EQUAL       reduce using rule 109 (t_2 -> TIMES add_operator t .)
    AND             reduce using rule 109 (t_2 -> TIMES add_operator t .)
    OR              reduce using rule 109 (t_2 -> TIMES add_operator t .)
    COMMA           reduce using rule 109 (t_2 -> TIMES add_operator t .)
    RPAR            reduce using rule 109 (t_2 -> TIMES add_operator t .)
    R_S_BRACKET     reduce using rule 109 (t_2 -> TIMES add_operator t .)
    SEMICOLON       reduce using rule 109 (t_2 -> TIMES add_operator t .)
    TO              reduce using rule 109 (t_2 -> TIMES add_operator t .)


state 271

    (110) t_2 -> DIVIDE add_operator t .

    PLUS            reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    MINUS           reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    LESS_EQUAL      reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    LESS            reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    GREATER_EQUAL   reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    GREATER         reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    COMPARE         reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    NOT_EQUAL       reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    AND             reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    OR              reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    COMMA           reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    RPAR            reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    R_S_BRACKET     reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    SEMICOLON       reduce using rule 110 (t_2 -> DIVIDE add_operator t .)
    TO              reduce using rule 110 (t_2 -> DIVIDE add_operator t .)


state 272

    (45) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 45 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 273

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (69) if_2 -> . estatuto if_2
    (70) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 278
    if_2                           shift and go to state 279
    empty                          shift and go to state 280
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 274

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 . TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    TO              shift and go to state 281


state 275

    (80) for_point_2 -> empty .

    TO              reduce using rule 80 (for_point_2 -> empty .)


state 276

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 282
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 277

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp . RPAR SEMICOLON R_C_BRACKET final_func_point

    RPAR            shift and go to state 283


state 278

    (69) if_2 -> estatuto . if_2
    (69) if_2 -> . estatuto if_2
    (70) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 278
    if_2                           shift and go to state 284
    empty                          shift and go to state 280
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 279

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON if_point_2

    R_C_BRACKET     shift and go to state 285


state 280

    (70) if_2 -> empty .
    (89) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 70 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 70 (if_2 -> empty .)
    ID              reduce using rule 89 (func_extra -> empty .)
    READ            reduce using rule 89 (func_extra -> empty .)
    WRITE           reduce using rule 89 (func_extra -> empty .)
    IF              reduce using rule 89 (func_extra -> empty .)
    FOR             reduce using rule 89 (func_extra -> empty .)
    WHILE           reduce using rule 89 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 89 (func_extra -> empty .) ]


state 281

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO . exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (90) exp -> . t_exp add_operator_4 exp_2
    (93) t_exp -> . g_exp add_operator_4 t_exp_2
    (96) g_exp -> . m_exp g_exp_2 add_operator_3
    (104) m_exp -> . t add_operator_2 m_exp_2
    (108) t -> . f add_operator_1 t_2
    (112) f -> . LPAR add_floor exp RPAR remove_floor
    (113) f -> . variable
    (114) f -> . llamada
    (115) f -> . f_2
    (41) variable -> . ID variable_2 variable_point
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (116) f_2 -> . CTE_I add_constant_i
    (117) f_2 -> . CTE_F add_constant_f

    LPAR            shift and go to state 125
    ID              shift and go to state 124
    CTE_I           shift and go to state 135
    CTE_F           shift and go to state 136

    exp                            shift and go to state 286
    t_exp                          shift and go to state 127
    g_exp                          shift and go to state 128
    m_exp                          shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    variable                       shift and go to state 132
    llamada                        shift and go to state 133
    f_2                            shift and go to state 134

state 282

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (84) while_l_2 -> . estatuto while_l_2
    (85) while_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 287
    while_l_2                      shift and go to state 288
    empty                          shift and go to state 289
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 283

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR . SEMICOLON R_C_BRACKET final_func_point

    SEMICOLON       shift and go to state 290


state 284

    (69) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 69 (if_2 -> estatuto if_2 .)


state 285

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON if_point_2
    (71) if_3 -> . ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (72) if_3 -> . empty
    (137) empty -> .

    ELSE            shift and go to state 292
    SEMICOLON       reduce using rule 137 (empty -> .)

    if_3                           shift and go to state 291
    empty                          shift and go to state 293

state 286

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp . for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (81) for_point_3 -> . empty
    (137) empty -> .

    RPAR            reduce using rule 137 (empty -> .)

    for_point_3                    shift and go to state 294
    empty                          shift and go to state 295

state 287

    (84) while_l_2 -> estatuto . while_l_2
    (84) while_l_2 -> . estatuto while_l_2
    (85) while_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 287
    while_l_2                      shift and go to state 296
    empty                          shift and go to state 289
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 288

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON while_point_3

    R_C_BRACKET     shift and go to state 297


state 289

    (85) while_l_2 -> empty .
    (89) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 85 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 85 (while_l_2 -> empty .)
    ID              reduce using rule 89 (func_extra -> empty .)
    READ            reduce using rule 89 (func_extra -> empty .)
    WRITE           reduce using rule 89 (func_extra -> empty .)
    IF              reduce using rule 89 (func_extra -> empty .)
    FOR             reduce using rule 89 (func_extra -> empty .)
    WHILE           reduce using rule 89 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 89 (func_extra -> empty .) ]


state 290

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON . R_C_BRACKET final_func_point

    R_C_BRACKET     shift and go to state 298


state 291

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON if_point_2

    SEMICOLON       shift and go to state 299


state 292

    (71) if_3 -> ELSE . if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET
    (75) if_point_3 -> . empty
    (137) empty -> .

    L_C_BRACKET     reduce using rule 137 (empty -> .)

    if_point_3                     shift and go to state 300
    empty                          shift and go to state 301

state 293

    (72) if_3 -> empty .

    SEMICOLON       reduce using rule 72 (if_3 -> empty .)


state 294

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    RPAR            shift and go to state 302


state 295

    (81) for_point_3 -> empty .

    RPAR            reduce using rule 81 (for_point_3 -> empty .)


state 296

    (84) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 84 (while_l_2 -> estatuto while_l_2 .)


state 297

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON while_point_3

    SEMICOLON       shift and go to state 303


state 298

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET . final_func_point
    (136) final_func_point -> . empty
    (137) empty -> .

    SEMICOLON       reduce using rule 137 (empty -> .)

    final_func_point               shift and go to state 304
    empty                          shift and go to state 263

state 299

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON . if_point_2
    (74) if_point_2 -> . empty
    (137) empty -> .

    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    WRITE           reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    if_point_2                     shift and go to state 305
    empty                          shift and go to state 306

state 300

    (71) if_3 -> ELSE if_point_3 . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 307


state 301

    (75) if_point_3 -> empty .

    L_C_BRACKET     reduce using rule 75 (if_point_3 -> empty .)


state 302

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4

    L_C_BRACKET     shift and go to state 308


state 303

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON . while_point_3
    (88) while_point_3 -> . empty
    (137) empty -> .

    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    WRITE           reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    while_point_3                  shift and go to state 309
    empty                          shift and go to state 310

state 304

    (129) function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point .

    SEMICOLON       reduce using rule 129 (function_2 -> tipo_simple ID function_punto1 LPAR param punto_param_2 RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET final_func_point .)


state 305

    (68) if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .

    ID              reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    READ            reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WRITE           reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    IF              reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    FOR             reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    WHILE           reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    R_C_BRACKET     reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)
    RETURN          reduce using rule 68 (if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2 .)


state 306

    (74) if_point_2 -> empty .

    ID              reduce using rule 74 (if_point_2 -> empty .)
    READ            reduce using rule 74 (if_point_2 -> empty .)
    WRITE           reduce using rule 74 (if_point_2 -> empty .)
    IF              reduce using rule 74 (if_point_2 -> empty .)
    FOR             reduce using rule 74 (if_point_2 -> empty .)
    WHILE           reduce using rule 74 (if_point_2 -> empty .)
    R_C_BRACKET     reduce using rule 74 (if_point_2 -> empty .)
    RETURN          reduce using rule 74 (if_point_2 -> empty .)


state 307

    (71) if_3 -> ELSE if_point_3 L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 311
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 308

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95
    R_C_BRACKET     reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 312
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89
    empty                          shift and go to state 96

state 309

    (83) while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .

    ID              reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    READ            reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WRITE           reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    IF              reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    FOR             reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    WHILE           reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    R_C_BRACKET     reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)
    RETURN          reduce using rule 83 (while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3 .)


state 310

    (88) while_point_3 -> empty .

    ID              reduce using rule 88 (while_point_3 -> empty .)
    READ            reduce using rule 88 (while_point_3 -> empty .)
    WRITE           reduce using rule 88 (while_point_3 -> empty .)
    IF              reduce using rule 88 (while_point_3 -> empty .)
    FOR             reduce using rule 88 (while_point_3 -> empty .)
    WHILE           reduce using rule 88 (while_point_3 -> empty .)
    R_C_BRACKET     reduce using rule 88 (while_point_3 -> empty .)
    RETURN          reduce using rule 88 (while_point_3 -> empty .)


state 311

    (71) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (69) if_2 -> . estatuto if_2
    (70) if_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 278
    if_2                           shift and go to state 313
    empty                          shift and go to state 280
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 312

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (77) for_l_2 -> . estatuto for_l_2
    (78) for_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 314
    for_l_2                        shift and go to state 315
    empty                          shift and go to state 316
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 313

    (71) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 317


state 314

    (77) for_l_2 -> estatuto . for_l_2
    (77) for_l_2 -> . estatuto for_l_2
    (78) for_l_2 -> . empty
    (47) estatuto -> . asigna
    (48) estatuto -> . llamada
    (49) estatuto -> . read
    (50) estatuto -> . write
    (51) estatuto -> . if_1
    (52) estatuto -> . for_l
    (53) estatuto -> . while_l
    (54) estatuto -> . func_extra
    (137) empty -> .
    (55) asigna -> . variable EQUAL add_operator exp asigna_point SEMICOLON
    (57) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (60) read -> . READ LPAR variable read_point RPAR SEMICOLON
    (62) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (68) if_1 -> . IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2
    (76) for_l -> . FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4
    (83) while_l -> . WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3
    (89) func_extra -> . empty
    (41) variable -> . ID variable_2 variable_point

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    IF              shift and go to state 93
    FOR             shift and go to state 94
    WHILE           shift and go to state 95

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! READ            [ reduce using rule 137 (empty -> .) ]
  ! WRITE           [ reduce using rule 137 (empty -> .) ]
  ! IF              [ reduce using rule 137 (empty -> .) ]
  ! FOR             [ reduce using rule 137 (empty -> .) ]
  ! WHILE           [ reduce using rule 137 (empty -> .) ]

    estatuto                       shift and go to state 314
    for_l_2                        shift and go to state 318
    empty                          shift and go to state 316
    asigna                         shift and go to state 81
    llamada                        shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    if_1                           shift and go to state 85
    for_l                          shift and go to state 86
    while_l                        shift and go to state 87
    func_extra                     shift and go to state 88
    variable                       shift and go to state 89

state 315

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON for_point_4

    R_C_BRACKET     shift and go to state 319


state 316

    (78) for_l_2 -> empty .
    (89) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 78 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 78 (for_l_2 -> empty .)
    ID              reduce using rule 89 (func_extra -> empty .)
    READ            reduce using rule 89 (func_extra -> empty .)
    WRITE           reduce using rule 89 (func_extra -> empty .)
    IF              reduce using rule 89 (func_extra -> empty .)
    FOR             reduce using rule 89 (func_extra -> empty .)
    WHILE           reduce using rule 89 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 89 (func_extra -> empty .) ]


state 317

    (71) if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 71 (if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 318

    (77) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 77 (for_l_2 -> estatuto for_l_2 .)


state 319

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON for_point_4

    SEMICOLON       shift and go to state 320


state 320

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON . for_point_4
    (82) for_point_4 -> . empty
    (137) empty -> .

    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    WRITE           reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    R_C_BRACKET     reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    for_point_4                    shift and go to state 321
    empty                          shift and go to state 322

state 321

    (76) for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .

    ID              reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    READ            reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WRITE           reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    IF              reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    FOR             reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    WHILE           reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    R_C_BRACKET     reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)
    RETURN          reduce using rule 76 (for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4 .)


state 322

    (82) for_point_4 -> empty .

    ID              reduce using rule 82 (for_point_4 -> empty .)
    READ            reduce using rule 82 (for_point_4 -> empty .)
    WRITE           reduce using rule 82 (for_point_4 -> empty .)
    IF              reduce using rule 82 (for_point_4 -> empty .)
    FOR             reduce using rule 82 (for_point_4 -> empty .)
    WHILE           reduce using rule 82 (for_point_4 -> empty .)
    R_C_BRACKET     reduce using rule 82 (for_point_4 -> empty .)
    RETURN          reduce using rule 82 (for_point_4 -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for READ in state 69 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for READ in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 257 resolved as shift
WARNING: shift/reduce conflict for READ in state 257 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 257 resolved as shift
WARNING: shift/reduce conflict for IF in state 257 resolved as shift
WARNING: shift/reduce conflict for FOR in state 257 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 257 resolved as shift
WARNING: shift/reduce conflict for ID in state 273 resolved as shift
WARNING: shift/reduce conflict for READ in state 273 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 273 resolved as shift
WARNING: shift/reduce conflict for IF in state 273 resolved as shift
WARNING: shift/reduce conflict for FOR in state 273 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 273 resolved as shift
WARNING: shift/reduce conflict for ID in state 276 resolved as shift
WARNING: shift/reduce conflict for READ in state 276 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 276 resolved as shift
WARNING: shift/reduce conflict for IF in state 276 resolved as shift
WARNING: shift/reduce conflict for FOR in state 276 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 276 resolved as shift
WARNING: shift/reduce conflict for ID in state 278 resolved as shift
WARNING: shift/reduce conflict for READ in state 278 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 278 resolved as shift
WARNING: shift/reduce conflict for IF in state 278 resolved as shift
WARNING: shift/reduce conflict for FOR in state 278 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 278 resolved as shift
WARNING: shift/reduce conflict for ID in state 282 resolved as shift
WARNING: shift/reduce conflict for READ in state 282 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 282 resolved as shift
WARNING: shift/reduce conflict for IF in state 282 resolved as shift
WARNING: shift/reduce conflict for FOR in state 282 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 282 resolved as shift
WARNING: shift/reduce conflict for ID in state 287 resolved as shift
WARNING: shift/reduce conflict for READ in state 287 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 287 resolved as shift
WARNING: shift/reduce conflict for IF in state 287 resolved as shift
WARNING: shift/reduce conflict for FOR in state 287 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 287 resolved as shift
WARNING: shift/reduce conflict for ID in state 307 resolved as shift
WARNING: shift/reduce conflict for READ in state 307 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 307 resolved as shift
WARNING: shift/reduce conflict for IF in state 307 resolved as shift
WARNING: shift/reduce conflict for FOR in state 307 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 307 resolved as shift
WARNING: shift/reduce conflict for ID in state 308 resolved as shift
WARNING: shift/reduce conflict for READ in state 308 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 308 resolved as shift
WARNING: shift/reduce conflict for IF in state 308 resolved as shift
WARNING: shift/reduce conflict for FOR in state 308 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 308 resolved as shift
WARNING: shift/reduce conflict for ID in state 311 resolved as shift
WARNING: shift/reduce conflict for READ in state 311 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 311 resolved as shift
WARNING: shift/reduce conflict for IF in state 311 resolved as shift
WARNING: shift/reduce conflict for FOR in state 311 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 311 resolved as shift
WARNING: shift/reduce conflict for ID in state 312 resolved as shift
WARNING: shift/reduce conflict for READ in state 312 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 312 resolved as shift
WARNING: shift/reduce conflict for IF in state 312 resolved as shift
WARNING: shift/reduce conflict for FOR in state 312 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 312 resolved as shift
WARNING: shift/reduce conflict for ID in state 314 resolved as shift
WARNING: shift/reduce conflict for READ in state 314 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 314 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 47
WARNING: reduce/reduce conflict in state 104 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 104
WARNING: reduce/reduce conflict in state 280 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 280
WARNING: reduce/reduce conflict in state 289 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 289
WARNING: reduce/reduce conflict in state 316 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 316
WARNING: Rule (vars_6 -> empty) is never reduced
