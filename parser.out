Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    body -> vars estatuto body_2
Rule 11    body_2 -> estatuto body_2
Rule 12    body_2 -> empty
Rule 13    tipo_simple -> INT
Rule 14    tipo_simple -> FLOAT
Rule 15    tipo_simple -> CHAR
Rule 16    tipo_comp -> DATAFRAME
Rule 17    vars -> VAR vars_2 SEMICOLON vars_8
Rule 18    vars_2 -> tipo_comp vars_3
Rule 19    vars_2 -> tipo_simple vars_4
Rule 20    vars_3 -> ID vars_5
Rule 21    vars_4 -> vars_3
Rule 22    vars_4 -> ID vars_6
Rule 23    vars_5 -> COMMA vars_3
Rule 24    vars_5 -> empty
Rule 25    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 26    vars_6 -> empty
Rule 27    punto_id_especial -> empty
Rule 28    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 29    vars_7 -> var_array
Rule 30    var_array -> empty
Rule 31    var_mat -> empty
Rule 32    vars_8 -> vars
Rule 33    vars_8 -> empty
Rule 34    param -> tipo_simple ID punto_param param_2
Rule 35    param -> empty
Rule 36    param_2 -> COMMA param
Rule 37    param_2 -> empty
Rule 38    punto_param -> empty
Rule 39    variable -> ID variable_2
Rule 40    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 41    variable_2 -> empty
Rule 42    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 43    variable_3 -> empty
Rule 44    estatuto -> asigna
Rule 45    estatuto -> llamada
Rule 46    estatuto -> read
Rule 47    estatuto -> write
Rule 48    estatuto -> if_1
Rule 49    estatuto -> for_l
Rule 50    estatuto -> while_l
Rule 51    estatuto -> func_extra
Rule 52    asigna -> variable EQUAL exp SEMICOLON
Rule 53    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 54    llamada_2 -> COMMA exp llamada_2
Rule 55    llamada_2 -> empty
Rule 56    read -> READ LPAR variable RPAR SEMICOLON
Rule 57    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 58    write_2 -> exp
Rule 59    write_2 -> CTE_S
Rule 60    write_3 -> COMMA write_2 write_3
Rule 61    write_3 -> empty
Rule 62    if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
Rule 63    if_2 -> estatuto if_2
Rule 64    if_2 -> empty
Rule 65    if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 66    for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
Rule 67    for_l_2 -> estatuto for_l_2
Rule 68    for_l_2 -> empty
Rule 69    while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
Rule 70    while_l_2 -> estatuto while_l_2
Rule 71    while_l_2 -> empty
Rule 72    func_extra -> empty
Rule 73    exp -> t_exp exp_2
Rule 74    exp_2 -> OR exp
Rule 75    exp_2 -> empty
Rule 76    t_exp -> g_exp t_exp_2
Rule 77    t_exp_2 -> AND t_exp
Rule 78    t_exp_2 -> empty
Rule 79    g_exp -> m_exp g_exp_2
Rule 80    g_exp_2 -> LESS_EQUAL g_exp_3
Rule 81    g_exp_2 -> LESS g_exp_3
Rule 82    g_exp_2 -> GREATER_EQUAL g_exp_3
Rule 83    g_exp_2 -> GREATER g_exp_3
Rule 84    g_exp_2 -> COMPARE g_exp_3
Rule 85    g_exp_2 -> NOT_EQUAL g_exp_3
Rule 86    g_exp_2 -> empty
Rule 87    g_exp_3 -> m_exp
Rule 88    m_exp -> t m_exp_2
Rule 89    m_exp_2 -> PLUS m_exp
Rule 90    m_exp_2 -> MINUS m_exp
Rule 91    m_exp_2 -> empty
Rule 92    t -> f t_2
Rule 93    t_2 -> TIMES t
Rule 94    t_2 -> DIVIDE t
Rule 95    t_2 -> empty
Rule 96    f -> LPAR m_exp RPAR
Rule 97    f -> variable
Rule 98    f -> llamada
Rule 99    f -> f_2
Rule 100   f_2 -> CTE_I
Rule 101   f_2 -> CTE_F
Rule 102   function -> FUNC function_2 SEMICOLON function_3
Rule 103   function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v
Rule 104   function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v
Rule 105   function_3 -> function
Rule 106   function_3 -> empty
Rule 107   function_punto1 -> empty
Rule 108   function_punto2 -> empty
Rule 109   func_agrega_v -> empty
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 77
CHAR                 : 15
COLON                : 1
COMMA                : 23 36 54 60
COMPARE              : 84
CTE_F                : 101
CTE_I                : 25 28 100
CTE_S                : 59
DATAFRAME            : 16
DIVIDE               : 94
ELSE                 : 65
EQUAL                : 52 66
FLOAT                : 14
FOR                  : 66
FUNC                 : 102
GREATER              : 83
GREATER_EQUAL        : 82
ID                   : 1 20 22 34 39 53 66 103 104
IF                   : 62
INT                  : 13
LESS                 : 81
LESS_EQUAL           : 80
LPAR                 : 9 53 56 57 62 66 69 96 103 103 104
L_C_BRACKET          : 9 62 65 66 69 103 104
L_S_BRACKET          : 25 28 40 42
MAIN                 : 9
MINUS                : 90
NOT_EQUAL            : 85
OR                   : 74
PLUS                 : 89
PROGRAM              : 1
READ                 : 56
RETURN               : 103
RPAR                 : 9 53 56 57 62 66 66 69 96 103 103 104
R_C_BRACKET          : 9 62 65 66 69 103 104
R_S_BRACKET          : 25 28 40 42
SEMICOLON            : 9 17 52 53 56 57 62 66 69 102 103
STRING               : 
TIMES                : 93
TO                   : 66
VAR                  : 17
VOID                 : 104
WHILE                : 69
WRITE                : 57
error                : 

Nonterminals, with rules where they appear

asigna               : 44
body                 : 9 103 104
body_2               : 10 11
empty                : 2 4 6 8 12 24 26 27 30 31 33 35 37 38 41 43 55 61 64 68 71 72 75 78 86 91 95 106 107 108 109
estatuto             : 10 11 62 63 65 66 67 69 70
exp                  : 40 42 52 53 54 58 62 66 66 69 74 103
exp_2                : 73
f                    : 92
f_2                  : 99
for_l                : 49
for_l_2              : 66 67
func_agrega_v        : 103 104
func_extra           : 51
function             : 7 105
function_2           : 102
function_3           : 102
function_punto1      : 103
function_punto2      : 104
g_exp                : 76
g_exp_2              : 79
g_exp_3              : 80 81 82 83 84 85
if_1                 : 48
if_2                 : 62 63 65
if_3                 : 62
llamada              : 45 98
llamada_2            : 53 54
m_exp                : 79 87 89 90 96
m_exp_2              : 88
main                 : 1
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 36 103 104
param_2              : 34
program              : 0
program_point        : 1
punto_id_especial    : 25
punto_param          : 34
read                 : 46
t                    : 88 93 94
t_2                  : 92
t_exp                : 73 77
t_exp_2              : 76
tipo_comp            : 18
tipo_simple          : 19 34 103
var_array            : 29
var_mat              : 28
variable             : 52 56 97
variable_2           : 39
variable_3           : 40
vars                 : 5 10 32
vars_2               : 17
vars_3               : 18 21 23
vars_4               : 19
vars_5               : 20
vars_6               : 22
vars_7               : 25
vars_8               : 17
while_l              : 50
while_l_2            : 69 70
write                : 47
write_2              : 57 60
write_3              : 57 60

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (110) empty -> .

    ID              reduce using rule 110 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (17) vars -> . VAR vars_2 SEMICOLON vars_8
    (110) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (110) empty -> .

    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (17) vars -> VAR . vars_2 SEMICOLON vars_8
    (18) vars_2 -> . tipo_comp vars_3
    (19) vars_2 -> . tipo_simple vars_4
    (16) tipo_comp -> . DATAFRAME
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 23


state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (102) function -> . FUNC function_2 SEMICOLON function_3
    (110) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 110 (empty -> .)

    modules_3                      shift and go to state 24
    function                       shift and go to state 25
    empty                          shift and go to state 26

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (17) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 28


state 17

    (18) vars_2 -> tipo_comp . vars_3
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 29

state 18

    (19) vars_2 -> tipo_simple . vars_4
    (21) vars_4 -> . vars_3
    (22) vars_4 -> . ID vars_6
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 33

    vars_4                         shift and go to state 31
    vars_3                         shift and go to state 32

state 19

    (16) tipo_comp -> DATAFRAME .

    ID              reduce using rule 16 (tipo_comp -> DATAFRAME .)


state 20

    (13) tipo_simple -> INT .

    ID              reduce using rule 13 (tipo_simple -> INT .)


state 21

    (14) tipo_simple -> FLOAT .

    ID              reduce using rule 14 (tipo_simple -> FLOAT .)


state 22

    (15) tipo_simple -> CHAR .

    ID              reduce using rule 15 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 34


state 24

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 25

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 26

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 27

    (102) function -> FUNC . function_2 SEMICOLON function_3
    (103) function_2 -> . tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v
    (104) function_2 -> . VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    VOID            shift and go to state 37
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 35
    tipo_simple                    shift and go to state 36

state 28

    (17) vars -> VAR vars_2 SEMICOLON . vars_8
    (32) vars_8 -> . vars
    (33) vars_8 -> . empty
    (17) vars -> . VAR vars_2 SEMICOLON vars_8
    (110) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    FOR             reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

    vars_8                         shift and go to state 38
    vars                           shift and go to state 39
    empty                          shift and go to state 40

state 29

    (18) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 18 (vars_2 -> tipo_comp vars_3 .)


state 30

    (20) vars_3 -> ID . vars_5
    (23) vars_5 -> . COMMA vars_3
    (24) vars_5 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 110 (empty -> .)

    vars_5                         shift and go to state 41
    empty                          shift and go to state 43

state 31

    (19) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_simple vars_4 .)


state 32

    (21) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 21 (vars_4 -> vars_3 .)


state 33

    (22) vars_4 -> ID . vars_6
    (20) vars_3 -> ID . vars_5
    (25) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (26) vars_6 -> . empty
    (23) vars_5 -> . COMMA vars_3
    (24) vars_5 -> . empty
    (27) punto_id_especial -> . empty
    (110) empty -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 110 (empty -> .)
    L_S_BRACKET     reduce using rule 110 (empty -> .)

    vars_6                         shift and go to state 44
    vars_5                         shift and go to state 41
    punto_id_especial              shift and go to state 45
    empty                          shift and go to state 46

state 34

    (9) main -> MAIN LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 47


state 35

    (102) function -> FUNC function_2 . SEMICOLON function_3

    SEMICOLON       shift and go to state 48


state 36

    (103) function_2 -> tipo_simple . ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v

    ID              shift and go to state 49


state 37

    (104) function_2 -> VOID . ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v

    ID              shift and go to state 50


state 38

    (17) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 39

    (32) vars_8 -> vars .

    FUNC            reduce using rule 32 (vars_8 -> vars .)
    MAIN            reduce using rule 32 (vars_8 -> vars .)
    ID              reduce using rule 32 (vars_8 -> vars .)
    READ            reduce using rule 32 (vars_8 -> vars .)
    WRITE           reduce using rule 32 (vars_8 -> vars .)
    IF              reduce using rule 32 (vars_8 -> vars .)
    FOR             reduce using rule 32 (vars_8 -> vars .)
    WHILE           reduce using rule 32 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 32 (vars_8 -> vars .)
    RETURN          reduce using rule 32 (vars_8 -> vars .)


state 40

    (33) vars_8 -> empty .

    FUNC            reduce using rule 33 (vars_8 -> empty .)
    MAIN            reduce using rule 33 (vars_8 -> empty .)
    ID              reduce using rule 33 (vars_8 -> empty .)
    READ            reduce using rule 33 (vars_8 -> empty .)
    WRITE           reduce using rule 33 (vars_8 -> empty .)
    IF              reduce using rule 33 (vars_8 -> empty .)
    FOR             reduce using rule 33 (vars_8 -> empty .)
    WHILE           reduce using rule 33 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> empty .)
    RETURN          reduce using rule 33 (vars_8 -> empty .)


state 41

    (20) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 20 (vars_3 -> ID vars_5 .)


state 42

    (23) vars_5 -> COMMA . vars_3
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 51

state 43

    (24) vars_5 -> empty .

    SEMICOLON       reduce using rule 24 (vars_5 -> empty .)


state 44

    (22) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 22 (vars_4 -> ID vars_6 .)


state 45

    (25) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 52


state 46

    (26) vars_6 -> empty .
    (24) vars_5 -> empty .
    (27) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 24 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 27 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 26 (vars_6 -> empty .) ]


state 47

    (9) main -> MAIN LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (10) body -> . vars estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 53
    vars                           shift and go to state 54

state 48

    (102) function -> FUNC function_2 SEMICOLON . function_3
    (105) function_3 -> . function
    (106) function_3 -> . empty
    (102) function -> . FUNC function_2 SEMICOLON function_3
    (110) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 110 (empty -> .)

    function_3                     shift and go to state 55
    function                       shift and go to state 56
    empty                          shift and go to state 57

state 49

    (103) function_2 -> tipo_simple ID . function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v
    (107) function_punto1 -> . empty
    (110) empty -> .

    LPAR            reduce using rule 110 (empty -> .)

    function_punto1                shift and go to state 58
    empty                          shift and go to state 59

state 50

    (104) function_2 -> VOID ID . function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v
    (108) function_punto2 -> . empty
    (110) empty -> .

    LPAR            reduce using rule 110 (empty -> .)

    function_punto2                shift and go to state 60
    empty                          shift and go to state 61

state 51

    (23) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 23 (vars_5 -> COMMA vars_3 .)


state 52

    (25) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 62


state 53

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 63


state 54

    (10) body -> vars . estatuto body_2
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 64
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73
    empty                          shift and go to state 80

state 55

    (102) function -> FUNC function_2 SEMICOLON function_3 .

    MAIN            reduce using rule 102 (function -> FUNC function_2 SEMICOLON function_3 .)


state 56

    (105) function_3 -> function .

    MAIN            reduce using rule 105 (function_3 -> function .)


state 57

    (106) function_3 -> empty .

    MAIN            reduce using rule 106 (function_3 -> empty .)


state 58

    (103) function_2 -> tipo_simple ID function_punto1 . LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v

    LPAR            shift and go to state 81


state 59

    (107) function_punto1 -> empty .

    LPAR            reduce using rule 107 (function_punto1 -> empty .)


state 60

    (104) function_2 -> VOID ID function_punto2 . LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v

    LPAR            shift and go to state 82


state 61

    (108) function_punto2 -> empty .

    LPAR            reduce using rule 108 (function_punto2 -> empty .)


state 62

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 83


state 63

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 84


state 64

    (10) body -> vars estatuto . body_2
    (11) body_2 -> . estatuto body_2
    (12) body_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 85
    body_2                         shift and go to state 86
    empty                          shift and go to state 87
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 65

    (44) estatuto -> asigna .

    ID              reduce using rule 44 (estatuto -> asigna .)
    READ            reduce using rule 44 (estatuto -> asigna .)
    WRITE           reduce using rule 44 (estatuto -> asigna .)
    IF              reduce using rule 44 (estatuto -> asigna .)
    FOR             reduce using rule 44 (estatuto -> asigna .)
    WHILE           reduce using rule 44 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 44 (estatuto -> asigna .)
    RETURN          reduce using rule 44 (estatuto -> asigna .)


state 66

    (45) estatuto -> llamada .

    ID              reduce using rule 45 (estatuto -> llamada .)
    READ            reduce using rule 45 (estatuto -> llamada .)
    WRITE           reduce using rule 45 (estatuto -> llamada .)
    IF              reduce using rule 45 (estatuto -> llamada .)
    FOR             reduce using rule 45 (estatuto -> llamada .)
    WHILE           reduce using rule 45 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 45 (estatuto -> llamada .)
    RETURN          reduce using rule 45 (estatuto -> llamada .)


state 67

    (46) estatuto -> read .

    ID              reduce using rule 46 (estatuto -> read .)
    READ            reduce using rule 46 (estatuto -> read .)
    WRITE           reduce using rule 46 (estatuto -> read .)
    IF              reduce using rule 46 (estatuto -> read .)
    FOR             reduce using rule 46 (estatuto -> read .)
    WHILE           reduce using rule 46 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 46 (estatuto -> read .)
    RETURN          reduce using rule 46 (estatuto -> read .)


state 68

    (47) estatuto -> write .

    ID              reduce using rule 47 (estatuto -> write .)
    READ            reduce using rule 47 (estatuto -> write .)
    WRITE           reduce using rule 47 (estatuto -> write .)
    IF              reduce using rule 47 (estatuto -> write .)
    FOR             reduce using rule 47 (estatuto -> write .)
    WHILE           reduce using rule 47 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> write .)
    RETURN          reduce using rule 47 (estatuto -> write .)


state 69

    (48) estatuto -> if_1 .

    ID              reduce using rule 48 (estatuto -> if_1 .)
    READ            reduce using rule 48 (estatuto -> if_1 .)
    WRITE           reduce using rule 48 (estatuto -> if_1 .)
    IF              reduce using rule 48 (estatuto -> if_1 .)
    FOR             reduce using rule 48 (estatuto -> if_1 .)
    WHILE           reduce using rule 48 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> if_1 .)
    RETURN          reduce using rule 48 (estatuto -> if_1 .)


state 70

    (49) estatuto -> for_l .

    ID              reduce using rule 49 (estatuto -> for_l .)
    READ            reduce using rule 49 (estatuto -> for_l .)
    WRITE           reduce using rule 49 (estatuto -> for_l .)
    IF              reduce using rule 49 (estatuto -> for_l .)
    FOR             reduce using rule 49 (estatuto -> for_l .)
    WHILE           reduce using rule 49 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> for_l .)
    RETURN          reduce using rule 49 (estatuto -> for_l .)


state 71

    (50) estatuto -> while_l .

    ID              reduce using rule 50 (estatuto -> while_l .)
    READ            reduce using rule 50 (estatuto -> while_l .)
    WRITE           reduce using rule 50 (estatuto -> while_l .)
    IF              reduce using rule 50 (estatuto -> while_l .)
    FOR             reduce using rule 50 (estatuto -> while_l .)
    WHILE           reduce using rule 50 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> while_l .)
    RETURN          reduce using rule 50 (estatuto -> while_l .)


state 72

    (51) estatuto -> func_extra .

    ID              reduce using rule 51 (estatuto -> func_extra .)
    READ            reduce using rule 51 (estatuto -> func_extra .)
    WRITE           reduce using rule 51 (estatuto -> func_extra .)
    IF              reduce using rule 51 (estatuto -> func_extra .)
    FOR             reduce using rule 51 (estatuto -> func_extra .)
    WHILE           reduce using rule 51 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 51 (estatuto -> func_extra .)
    RETURN          reduce using rule 51 (estatuto -> func_extra .)


state 73

    (52) asigna -> variable . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 88


state 74

    (53) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (39) variable -> ID . variable_2
    (40) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (41) variable_2 -> . empty
    (110) empty -> .

    LPAR            shift and go to state 89
    L_S_BRACKET     shift and go to state 91
    EQUAL           reduce using rule 110 (empty -> .)

    variable_2                     shift and go to state 90
    empty                          shift and go to state 92

state 75

    (56) read -> READ . LPAR variable RPAR SEMICOLON

    LPAR            shift and go to state 93


state 76

    (57) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 94


state 77

    (62) if_1 -> IF . LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    LPAR            shift and go to state 95


state 78

    (66) for_l -> FOR . LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 96


state 79

    (69) while_l -> WHILE . LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 97


state 80

    (72) func_extra -> empty .

    ID              reduce using rule 72 (func_extra -> empty .)
    READ            reduce using rule 72 (func_extra -> empty .)
    WRITE           reduce using rule 72 (func_extra -> empty .)
    IF              reduce using rule 72 (func_extra -> empty .)
    FOR             reduce using rule 72 (func_extra -> empty .)
    WHILE           reduce using rule 72 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 72 (func_extra -> empty .)
    RETURN          reduce using rule 72 (func_extra -> empty .)


state 81

    (103) function_2 -> tipo_simple ID function_punto1 LPAR . param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v
    (34) param -> . tipo_simple ID punto_param param_2
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (110) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 110 (empty -> .)

    tipo_simple                    shift and go to state 98
    param                          shift and go to state 99
    empty                          shift and go to state 100

state 82

    (104) function_2 -> VOID ID function_punto2 LPAR . param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v
    (34) param -> . tipo_simple ID punto_param param_2
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (110) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 110 (empty -> .)

    param                          shift and go to state 101
    tipo_simple                    shift and go to state 98
    empty                          shift and go to state 100

state 83

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (28) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (29) vars_7 -> . var_array
    (30) var_array -> . empty
    (110) empty -> .

    L_S_BRACKET     shift and go to state 102
    SEMICOLON       reduce using rule 110 (empty -> .)

    vars_7                         shift and go to state 103
    var_array                      shift and go to state 104
    empty                          shift and go to state 105

state 84

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 85

    (11) body_2 -> estatuto . body_2
    (11) body_2 -> . estatuto body_2
    (12) body_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 85
    body_2                         shift and go to state 106
    empty                          shift and go to state 87
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 86

    (10) body -> vars estatuto body_2 .

    R_C_BRACKET     reduce using rule 10 (body -> vars estatuto body_2 .)
    RETURN          reduce using rule 10 (body -> vars estatuto body_2 .)


state 87

    (12) body_2 -> empty .
    (72) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 12 (body_2 -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 12 (body_2 -> empty .)
    RETURN          reduce using rule 12 (body_2 -> empty .)
    ID              reduce using rule 72 (func_extra -> empty .)
    READ            reduce using rule 72 (func_extra -> empty .)
    WRITE           reduce using rule 72 (func_extra -> empty .)
    IF              reduce using rule 72 (func_extra -> empty .)
    FOR             reduce using rule 72 (func_extra -> empty .)
    WHILE           reduce using rule 72 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 72 (func_extra -> empty .) ]
  ! RETURN          [ reduce using rule 72 (func_extra -> empty .) ]


state 88

    (52) asigna -> variable EQUAL . exp SEMICOLON
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    variable                       shift and go to state 107
    exp                            shift and go to state 108
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 89

    (53) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 120
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 90

    (39) variable -> ID variable_2 .

    EQUAL           reduce using rule 39 (variable -> ID variable_2 .)
    TIMES           reduce using rule 39 (variable -> ID variable_2 .)
    DIVIDE          reduce using rule 39 (variable -> ID variable_2 .)
    PLUS            reduce using rule 39 (variable -> ID variable_2 .)
    MINUS           reduce using rule 39 (variable -> ID variable_2 .)
    LESS_EQUAL      reduce using rule 39 (variable -> ID variable_2 .)
    LESS            reduce using rule 39 (variable -> ID variable_2 .)
    GREATER_EQUAL   reduce using rule 39 (variable -> ID variable_2 .)
    GREATER         reduce using rule 39 (variable -> ID variable_2 .)
    COMPARE         reduce using rule 39 (variable -> ID variable_2 .)
    NOT_EQUAL       reduce using rule 39 (variable -> ID variable_2 .)
    AND             reduce using rule 39 (variable -> ID variable_2 .)
    OR              reduce using rule 39 (variable -> ID variable_2 .)
    SEMICOLON       reduce using rule 39 (variable -> ID variable_2 .)
    COMMA           reduce using rule 39 (variable -> ID variable_2 .)
    RPAR            reduce using rule 39 (variable -> ID variable_2 .)
    R_S_BRACKET     reduce using rule 39 (variable -> ID variable_2 .)
    TO              reduce using rule 39 (variable -> ID variable_2 .)


state 91

    (40) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 121
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 92

    (41) variable_2 -> empty .

    EQUAL           reduce using rule 41 (variable_2 -> empty .)
    TIMES           reduce using rule 41 (variable_2 -> empty .)
    DIVIDE          reduce using rule 41 (variable_2 -> empty .)
    PLUS            reduce using rule 41 (variable_2 -> empty .)
    MINUS           reduce using rule 41 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 41 (variable_2 -> empty .)
    LESS            reduce using rule 41 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 41 (variable_2 -> empty .)
    GREATER         reduce using rule 41 (variable_2 -> empty .)
    COMPARE         reduce using rule 41 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 41 (variable_2 -> empty .)
    AND             reduce using rule 41 (variable_2 -> empty .)
    OR              reduce using rule 41 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 41 (variable_2 -> empty .)
    COMMA           reduce using rule 41 (variable_2 -> empty .)
    RPAR            reduce using rule 41 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 41 (variable_2 -> empty .)
    TO              reduce using rule 41 (variable_2 -> empty .)


state 93

    (56) read -> READ LPAR . variable RPAR SEMICOLON
    (39) variable -> . ID variable_2

    ID              shift and go to state 123

    variable                       shift and go to state 122

state 94

    (57) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (58) write_2 -> . exp
    (59) write_2 -> . CTE_S
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    CTE_S           shift and go to state 126
    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    write_2                        shift and go to state 124
    exp                            shift and go to state 125
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 95

    (62) if_1 -> IF LPAR . exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 127
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 96

    (66) for_l -> FOR LPAR . ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    ID              shift and go to state 128


state 97

    (69) while_l -> WHILE LPAR . exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 129
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 98

    (34) param -> tipo_simple . ID punto_param param_2

    ID              shift and go to state 130


state 99

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param . RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v

    RPAR            shift and go to state 131


state 100

    (35) param -> empty .

    RPAR            reduce using rule 35 (param -> empty .)


state 101

    (104) function_2 -> VOID ID function_punto2 LPAR param . RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v

    RPAR            shift and go to state 132


state 102

    (28) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 133


state 103

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 25 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 104

    (29) vars_7 -> var_array .

    SEMICOLON       reduce using rule 29 (vars_7 -> var_array .)


state 105

    (30) var_array -> empty .

    SEMICOLON       reduce using rule 30 (var_array -> empty .)


state 106

    (11) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body_2 -> estatuto body_2 .)
    RETURN          reduce using rule 11 (body_2 -> estatuto body_2 .)


state 107

    (97) f -> variable .

    TIMES           reduce using rule 97 (f -> variable .)
    DIVIDE          reduce using rule 97 (f -> variable .)
    PLUS            reduce using rule 97 (f -> variable .)
    MINUS           reduce using rule 97 (f -> variable .)
    LESS_EQUAL      reduce using rule 97 (f -> variable .)
    LESS            reduce using rule 97 (f -> variable .)
    GREATER_EQUAL   reduce using rule 97 (f -> variable .)
    GREATER         reduce using rule 97 (f -> variable .)
    COMPARE         reduce using rule 97 (f -> variable .)
    NOT_EQUAL       reduce using rule 97 (f -> variable .)
    AND             reduce using rule 97 (f -> variable .)
    OR              reduce using rule 97 (f -> variable .)
    SEMICOLON       reduce using rule 97 (f -> variable .)
    COMMA           reduce using rule 97 (f -> variable .)
    RPAR            reduce using rule 97 (f -> variable .)
    R_S_BRACKET     reduce using rule 97 (f -> variable .)
    TO              reduce using rule 97 (f -> variable .)


state 108

    (52) asigna -> variable EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 134


state 109

    (73) exp -> t_exp . exp_2
    (74) exp_2 -> . OR exp
    (75) exp_2 -> . empty
    (110) empty -> .

    OR              shift and go to state 136
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    exp_2                          shift and go to state 135
    empty                          shift and go to state 137

state 110

    (76) t_exp -> g_exp . t_exp_2
    (77) t_exp_2 -> . AND t_exp
    (78) t_exp_2 -> . empty
    (110) empty -> .

    AND             shift and go to state 139
    OR              reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    t_exp_2                        shift and go to state 138
    empty                          shift and go to state 140

state 111

    (79) g_exp -> m_exp . g_exp_2
    (80) g_exp_2 -> . LESS_EQUAL g_exp_3
    (81) g_exp_2 -> . LESS g_exp_3
    (82) g_exp_2 -> . GREATER_EQUAL g_exp_3
    (83) g_exp_2 -> . GREATER g_exp_3
    (84) g_exp_2 -> . COMPARE g_exp_3
    (85) g_exp_2 -> . NOT_EQUAL g_exp_3
    (86) g_exp_2 -> . empty
    (110) empty -> .

    LESS_EQUAL      shift and go to state 142
    LESS            shift and go to state 143
    GREATER_EQUAL   shift and go to state 144
    GREATER         shift and go to state 145
    COMPARE         shift and go to state 146
    NOT_EQUAL       shift and go to state 147
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    g_exp_2                        shift and go to state 141
    empty                          shift and go to state 148

state 112

    (88) m_exp -> t . m_exp_2
    (89) m_exp_2 -> . PLUS m_exp
    (90) m_exp_2 -> . MINUS m_exp
    (91) m_exp_2 -> . empty
    (110) empty -> .

    PLUS            shift and go to state 150
    MINUS           shift and go to state 151
    LESS_EQUAL      reduce using rule 110 (empty -> .)
    LESS            reduce using rule 110 (empty -> .)
    GREATER_EQUAL   reduce using rule 110 (empty -> .)
    GREATER         reduce using rule 110 (empty -> .)
    COMPARE         reduce using rule 110 (empty -> .)
    NOT_EQUAL       reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    m_exp_2                        shift and go to state 149
    empty                          shift and go to state 152

state 113

    (92) t -> f . t_2
    (93) t_2 -> . TIMES t
    (94) t_2 -> . DIVIDE t
    (95) t_2 -> . empty
    (110) empty -> .

    TIMES           shift and go to state 154
    DIVIDE          shift and go to state 155
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    LESS_EQUAL      reduce using rule 110 (empty -> .)
    LESS            reduce using rule 110 (empty -> .)
    GREATER_EQUAL   reduce using rule 110 (empty -> .)
    GREATER         reduce using rule 110 (empty -> .)
    COMPARE         reduce using rule 110 (empty -> .)
    NOT_EQUAL       reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    t_2                            shift and go to state 153
    empty                          shift and go to state 156

state 114

    (96) f -> LPAR . m_exp RPAR
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    m_exp                          shift and go to state 157
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 115

    (98) f -> llamada .

    TIMES           reduce using rule 98 (f -> llamada .)
    DIVIDE          reduce using rule 98 (f -> llamada .)
    PLUS            reduce using rule 98 (f -> llamada .)
    MINUS           reduce using rule 98 (f -> llamada .)
    LESS_EQUAL      reduce using rule 98 (f -> llamada .)
    LESS            reduce using rule 98 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 98 (f -> llamada .)
    GREATER         reduce using rule 98 (f -> llamada .)
    COMPARE         reduce using rule 98 (f -> llamada .)
    NOT_EQUAL       reduce using rule 98 (f -> llamada .)
    AND             reduce using rule 98 (f -> llamada .)
    OR              reduce using rule 98 (f -> llamada .)
    SEMICOLON       reduce using rule 98 (f -> llamada .)
    COMMA           reduce using rule 98 (f -> llamada .)
    RPAR            reduce using rule 98 (f -> llamada .)
    R_S_BRACKET     reduce using rule 98 (f -> llamada .)
    TO              reduce using rule 98 (f -> llamada .)


state 116

    (99) f -> f_2 .

    TIMES           reduce using rule 99 (f -> f_2 .)
    DIVIDE          reduce using rule 99 (f -> f_2 .)
    PLUS            reduce using rule 99 (f -> f_2 .)
    MINUS           reduce using rule 99 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 99 (f -> f_2 .)
    LESS            reduce using rule 99 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 99 (f -> f_2 .)
    GREATER         reduce using rule 99 (f -> f_2 .)
    COMPARE         reduce using rule 99 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 99 (f -> f_2 .)
    AND             reduce using rule 99 (f -> f_2 .)
    OR              reduce using rule 99 (f -> f_2 .)
    SEMICOLON       reduce using rule 99 (f -> f_2 .)
    COMMA           reduce using rule 99 (f -> f_2 .)
    RPAR            reduce using rule 99 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 99 (f -> f_2 .)
    TO              reduce using rule 99 (f -> f_2 .)


state 117

    (39) variable -> ID . variable_2
    (53) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (40) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (41) variable_2 -> . empty
    (110) empty -> .

    LPAR            shift and go to state 89
    L_S_BRACKET     shift and go to state 91
    TIMES           reduce using rule 110 (empty -> .)
    DIVIDE          reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    LESS_EQUAL      reduce using rule 110 (empty -> .)
    LESS            reduce using rule 110 (empty -> .)
    GREATER_EQUAL   reduce using rule 110 (empty -> .)
    GREATER         reduce using rule 110 (empty -> .)
    COMPARE         reduce using rule 110 (empty -> .)
    NOT_EQUAL       reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    variable_2                     shift and go to state 90
    empty                          shift and go to state 92

state 118

    (100) f_2 -> CTE_I .

    TIMES           reduce using rule 100 (f_2 -> CTE_I .)
    DIVIDE          reduce using rule 100 (f_2 -> CTE_I .)
    PLUS            reduce using rule 100 (f_2 -> CTE_I .)
    MINUS           reduce using rule 100 (f_2 -> CTE_I .)
    LESS_EQUAL      reduce using rule 100 (f_2 -> CTE_I .)
    LESS            reduce using rule 100 (f_2 -> CTE_I .)
    GREATER_EQUAL   reduce using rule 100 (f_2 -> CTE_I .)
    GREATER         reduce using rule 100 (f_2 -> CTE_I .)
    COMPARE         reduce using rule 100 (f_2 -> CTE_I .)
    NOT_EQUAL       reduce using rule 100 (f_2 -> CTE_I .)
    AND             reduce using rule 100 (f_2 -> CTE_I .)
    OR              reduce using rule 100 (f_2 -> CTE_I .)
    SEMICOLON       reduce using rule 100 (f_2 -> CTE_I .)
    COMMA           reduce using rule 100 (f_2 -> CTE_I .)
    RPAR            reduce using rule 100 (f_2 -> CTE_I .)
    R_S_BRACKET     reduce using rule 100 (f_2 -> CTE_I .)
    TO              reduce using rule 100 (f_2 -> CTE_I .)


state 119

    (101) f_2 -> CTE_F .

    TIMES           reduce using rule 101 (f_2 -> CTE_F .)
    DIVIDE          reduce using rule 101 (f_2 -> CTE_F .)
    PLUS            reduce using rule 101 (f_2 -> CTE_F .)
    MINUS           reduce using rule 101 (f_2 -> CTE_F .)
    LESS_EQUAL      reduce using rule 101 (f_2 -> CTE_F .)
    LESS            reduce using rule 101 (f_2 -> CTE_F .)
    GREATER_EQUAL   reduce using rule 101 (f_2 -> CTE_F .)
    GREATER         reduce using rule 101 (f_2 -> CTE_F .)
    COMPARE         reduce using rule 101 (f_2 -> CTE_F .)
    NOT_EQUAL       reduce using rule 101 (f_2 -> CTE_F .)
    AND             reduce using rule 101 (f_2 -> CTE_F .)
    OR              reduce using rule 101 (f_2 -> CTE_F .)
    SEMICOLON       reduce using rule 101 (f_2 -> CTE_F .)
    COMMA           reduce using rule 101 (f_2 -> CTE_F .)
    RPAR            reduce using rule 101 (f_2 -> CTE_F .)
    R_S_BRACKET     reduce using rule 101 (f_2 -> CTE_F .)
    TO              reduce using rule 101 (f_2 -> CTE_F .)


state 120

    (53) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (54) llamada_2 -> . COMMA exp llamada_2
    (55) llamada_2 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 159
    RPAR            reduce using rule 110 (empty -> .)

    llamada_2                      shift and go to state 158
    empty                          shift and go to state 160

state 121

    (40) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 161


state 122

    (56) read -> READ LPAR variable . RPAR SEMICOLON

    RPAR            shift and go to state 162


state 123

    (39) variable -> ID . variable_2
    (40) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (41) variable_2 -> . empty
    (110) empty -> .

    L_S_BRACKET     shift and go to state 91
    RPAR            reduce using rule 110 (empty -> .)

    variable_2                     shift and go to state 90
    empty                          shift and go to state 92

state 124

    (57) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (60) write_3 -> . COMMA write_2 write_3
    (61) write_3 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 164
    RPAR            reduce using rule 110 (empty -> .)

    write_3                        shift and go to state 163
    empty                          shift and go to state 165

state 125

    (58) write_2 -> exp .

    COMMA           reduce using rule 58 (write_2 -> exp .)
    RPAR            reduce using rule 58 (write_2 -> exp .)


state 126

    (59) write_2 -> CTE_S .

    COMMA           reduce using rule 59 (write_2 -> CTE_S .)
    RPAR            reduce using rule 59 (write_2 -> CTE_S .)


state 127

    (62) if_1 -> IF LPAR exp . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    RPAR            shift and go to state 166


state 128

    (66) for_l -> FOR LPAR ID . RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 167


state 129

    (69) while_l -> WHILE LPAR exp . RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 168


state 130

    (34) param -> tipo_simple ID . punto_param param_2
    (38) punto_param -> . empty
    (110) empty -> .

    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)

    punto_param                    shift and go to state 169
    empty                          shift and go to state 170

state 131

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR . L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v

    L_C_BRACKET     shift and go to state 171


state 132

    (104) function_2 -> VOID ID function_punto2 LPAR param RPAR . L_C_BRACKET body R_C_BRACKET func_agrega_v

    L_C_BRACKET     shift and go to state 172


state 133

    (28) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 173


state 134

    (52) asigna -> variable EQUAL exp SEMICOLON .

    ID              reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    READ            reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    IF              reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    FOR             reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    R_C_BRACKET     reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 52 (asigna -> variable EQUAL exp SEMICOLON .)


state 135

    (73) exp -> t_exp exp_2 .

    SEMICOLON       reduce using rule 73 (exp -> t_exp exp_2 .)
    COMMA           reduce using rule 73 (exp -> t_exp exp_2 .)
    RPAR            reduce using rule 73 (exp -> t_exp exp_2 .)
    R_S_BRACKET     reduce using rule 73 (exp -> t_exp exp_2 .)
    TO              reduce using rule 73 (exp -> t_exp exp_2 .)


state 136

    (74) exp_2 -> OR . exp
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 174
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 137

    (75) exp_2 -> empty .

    SEMICOLON       reduce using rule 75 (exp_2 -> empty .)
    COMMA           reduce using rule 75 (exp_2 -> empty .)
    RPAR            reduce using rule 75 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 75 (exp_2 -> empty .)
    TO              reduce using rule 75 (exp_2 -> empty .)


state 138

    (76) t_exp -> g_exp t_exp_2 .

    OR              reduce using rule 76 (t_exp -> g_exp t_exp_2 .)
    SEMICOLON       reduce using rule 76 (t_exp -> g_exp t_exp_2 .)
    COMMA           reduce using rule 76 (t_exp -> g_exp t_exp_2 .)
    RPAR            reduce using rule 76 (t_exp -> g_exp t_exp_2 .)
    R_S_BRACKET     reduce using rule 76 (t_exp -> g_exp t_exp_2 .)
    TO              reduce using rule 76 (t_exp -> g_exp t_exp_2 .)


state 139

    (77) t_exp_2 -> AND . t_exp
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    t_exp                          shift and go to state 175
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 140

    (78) t_exp_2 -> empty .

    OR              reduce using rule 78 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 78 (t_exp_2 -> empty .)
    COMMA           reduce using rule 78 (t_exp_2 -> empty .)
    RPAR            reduce using rule 78 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 78 (t_exp_2 -> empty .)
    TO              reduce using rule 78 (t_exp_2 -> empty .)


state 141

    (79) g_exp -> m_exp g_exp_2 .

    AND             reduce using rule 79 (g_exp -> m_exp g_exp_2 .)
    OR              reduce using rule 79 (g_exp -> m_exp g_exp_2 .)
    SEMICOLON       reduce using rule 79 (g_exp -> m_exp g_exp_2 .)
    COMMA           reduce using rule 79 (g_exp -> m_exp g_exp_2 .)
    RPAR            reduce using rule 79 (g_exp -> m_exp g_exp_2 .)
    R_S_BRACKET     reduce using rule 79 (g_exp -> m_exp g_exp_2 .)
    TO              reduce using rule 79 (g_exp -> m_exp g_exp_2 .)


state 142

    (80) g_exp_2 -> LESS_EQUAL . g_exp_3
    (87) g_exp_3 -> . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    g_exp_3                        shift and go to state 176
    m_exp                          shift and go to state 177
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 143

    (81) g_exp_2 -> LESS . g_exp_3
    (87) g_exp_3 -> . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    g_exp_3                        shift and go to state 178
    m_exp                          shift and go to state 177
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 144

    (82) g_exp_2 -> GREATER_EQUAL . g_exp_3
    (87) g_exp_3 -> . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    g_exp_3                        shift and go to state 179
    m_exp                          shift and go to state 177
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 145

    (83) g_exp_2 -> GREATER . g_exp_3
    (87) g_exp_3 -> . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    g_exp_3                        shift and go to state 180
    m_exp                          shift and go to state 177
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 146

    (84) g_exp_2 -> COMPARE . g_exp_3
    (87) g_exp_3 -> . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    g_exp_3                        shift and go to state 181
    m_exp                          shift and go to state 177
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 147

    (85) g_exp_2 -> NOT_EQUAL . g_exp_3
    (87) g_exp_3 -> . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    g_exp_3                        shift and go to state 182
    m_exp                          shift and go to state 177
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 148

    (86) g_exp_2 -> empty .

    AND             reduce using rule 86 (g_exp_2 -> empty .)
    OR              reduce using rule 86 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 86 (g_exp_2 -> empty .)
    COMMA           reduce using rule 86 (g_exp_2 -> empty .)
    RPAR            reduce using rule 86 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 86 (g_exp_2 -> empty .)
    TO              reduce using rule 86 (g_exp_2 -> empty .)


state 149

    (88) m_exp -> t m_exp_2 .

    LESS_EQUAL      reduce using rule 88 (m_exp -> t m_exp_2 .)
    LESS            reduce using rule 88 (m_exp -> t m_exp_2 .)
    GREATER_EQUAL   reduce using rule 88 (m_exp -> t m_exp_2 .)
    GREATER         reduce using rule 88 (m_exp -> t m_exp_2 .)
    COMPARE         reduce using rule 88 (m_exp -> t m_exp_2 .)
    NOT_EQUAL       reduce using rule 88 (m_exp -> t m_exp_2 .)
    AND             reduce using rule 88 (m_exp -> t m_exp_2 .)
    OR              reduce using rule 88 (m_exp -> t m_exp_2 .)
    SEMICOLON       reduce using rule 88 (m_exp -> t m_exp_2 .)
    COMMA           reduce using rule 88 (m_exp -> t m_exp_2 .)
    RPAR            reduce using rule 88 (m_exp -> t m_exp_2 .)
    R_S_BRACKET     reduce using rule 88 (m_exp -> t m_exp_2 .)
    TO              reduce using rule 88 (m_exp -> t m_exp_2 .)


state 150

    (89) m_exp_2 -> PLUS . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    m_exp                          shift and go to state 183
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 151

    (90) m_exp_2 -> MINUS . m_exp
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    m_exp                          shift and go to state 184
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 152

    (91) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 91 (m_exp_2 -> empty .)
    LESS            reduce using rule 91 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 91 (m_exp_2 -> empty .)
    GREATER         reduce using rule 91 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 91 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 91 (m_exp_2 -> empty .)
    AND             reduce using rule 91 (m_exp_2 -> empty .)
    OR              reduce using rule 91 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 91 (m_exp_2 -> empty .)
    COMMA           reduce using rule 91 (m_exp_2 -> empty .)
    RPAR            reduce using rule 91 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 91 (m_exp_2 -> empty .)
    TO              reduce using rule 91 (m_exp_2 -> empty .)


state 153

    (92) t -> f t_2 .

    PLUS            reduce using rule 92 (t -> f t_2 .)
    MINUS           reduce using rule 92 (t -> f t_2 .)
    LESS_EQUAL      reduce using rule 92 (t -> f t_2 .)
    LESS            reduce using rule 92 (t -> f t_2 .)
    GREATER_EQUAL   reduce using rule 92 (t -> f t_2 .)
    GREATER         reduce using rule 92 (t -> f t_2 .)
    COMPARE         reduce using rule 92 (t -> f t_2 .)
    NOT_EQUAL       reduce using rule 92 (t -> f t_2 .)
    AND             reduce using rule 92 (t -> f t_2 .)
    OR              reduce using rule 92 (t -> f t_2 .)
    SEMICOLON       reduce using rule 92 (t -> f t_2 .)
    COMMA           reduce using rule 92 (t -> f t_2 .)
    RPAR            reduce using rule 92 (t -> f t_2 .)
    R_S_BRACKET     reduce using rule 92 (t -> f t_2 .)
    TO              reduce using rule 92 (t -> f t_2 .)


state 154

    (93) t_2 -> TIMES . t
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    t                              shift and go to state 185
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 155

    (94) t_2 -> DIVIDE . t
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    t                              shift and go to state 186
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 156

    (95) t_2 -> empty .

    PLUS            reduce using rule 95 (t_2 -> empty .)
    MINUS           reduce using rule 95 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 95 (t_2 -> empty .)
    LESS            reduce using rule 95 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 95 (t_2 -> empty .)
    GREATER         reduce using rule 95 (t_2 -> empty .)
    COMPARE         reduce using rule 95 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 95 (t_2 -> empty .)
    AND             reduce using rule 95 (t_2 -> empty .)
    OR              reduce using rule 95 (t_2 -> empty .)
    SEMICOLON       reduce using rule 95 (t_2 -> empty .)
    COMMA           reduce using rule 95 (t_2 -> empty .)
    RPAR            reduce using rule 95 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 95 (t_2 -> empty .)
    TO              reduce using rule 95 (t_2 -> empty .)


state 157

    (96) f -> LPAR m_exp . RPAR

    RPAR            shift and go to state 187


state 158

    (53) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 188


state 159

    (54) llamada_2 -> COMMA . exp llamada_2
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 189
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 160

    (55) llamada_2 -> empty .

    RPAR            reduce using rule 55 (llamada_2 -> empty .)


state 161

    (40) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (42) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (43) variable_3 -> . empty
    (110) empty -> .

    L_S_BRACKET     shift and go to state 190
    EQUAL           reduce using rule 110 (empty -> .)
    TIMES           reduce using rule 110 (empty -> .)
    DIVIDE          reduce using rule 110 (empty -> .)
    PLUS            reduce using rule 110 (empty -> .)
    MINUS           reduce using rule 110 (empty -> .)
    LESS_EQUAL      reduce using rule 110 (empty -> .)
    LESS            reduce using rule 110 (empty -> .)
    GREATER_EQUAL   reduce using rule 110 (empty -> .)
    GREATER         reduce using rule 110 (empty -> .)
    COMPARE         reduce using rule 110 (empty -> .)
    NOT_EQUAL       reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    SEMICOLON       reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RPAR            reduce using rule 110 (empty -> .)
    R_S_BRACKET     reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    variable_3                     shift and go to state 191
    empty                          shift and go to state 192

state 162

    (56) read -> READ LPAR variable RPAR . SEMICOLON

    SEMICOLON       shift and go to state 193


state 163

    (57) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 194


state 164

    (60) write_3 -> COMMA . write_2 write_3
    (58) write_2 -> . exp
    (59) write_2 -> . CTE_S
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    CTE_S           shift and go to state 126
    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    write_2                        shift and go to state 195
    exp                            shift and go to state 125
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 165

    (61) write_3 -> empty .

    RPAR            reduce using rule 61 (write_3 -> empty .)


state 166

    (62) if_1 -> IF LPAR exp RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    L_C_BRACKET     shift and go to state 196


state 167

    (66) for_l -> FOR LPAR ID RPAR . EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    EQUAL           shift and go to state 197


state 168

    (69) while_l -> WHILE LPAR exp RPAR . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 198


state 169

    (34) param -> tipo_simple ID punto_param . param_2
    (36) param_2 -> . COMMA param
    (37) param_2 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 200
    RPAR            reduce using rule 110 (empty -> .)

    param_2                        shift and go to state 199
    empty                          shift and go to state 201

state 170

    (38) punto_param -> empty .

    COMMA           reduce using rule 38 (punto_param -> empty .)
    RPAR            reduce using rule 38 (punto_param -> empty .)


state 171

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET . body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v
    (10) body -> . vars estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 202
    vars                           shift and go to state 54

state 172

    (104) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET . body R_C_BRACKET func_agrega_v
    (10) body -> . vars estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 203
    vars                           shift and go to state 54

state 173

    (28) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (31) var_mat -> . empty
    (110) empty -> .

    SEMICOLON       reduce using rule 110 (empty -> .)

    var_mat                        shift and go to state 204
    empty                          shift and go to state 205

state 174

    (74) exp_2 -> OR exp .

    SEMICOLON       reduce using rule 74 (exp_2 -> OR exp .)
    COMMA           reduce using rule 74 (exp_2 -> OR exp .)
    RPAR            reduce using rule 74 (exp_2 -> OR exp .)
    R_S_BRACKET     reduce using rule 74 (exp_2 -> OR exp .)
    TO              reduce using rule 74 (exp_2 -> OR exp .)


state 175

    (77) t_exp_2 -> AND t_exp .

    OR              reduce using rule 77 (t_exp_2 -> AND t_exp .)
    SEMICOLON       reduce using rule 77 (t_exp_2 -> AND t_exp .)
    COMMA           reduce using rule 77 (t_exp_2 -> AND t_exp .)
    RPAR            reduce using rule 77 (t_exp_2 -> AND t_exp .)
    R_S_BRACKET     reduce using rule 77 (t_exp_2 -> AND t_exp .)
    TO              reduce using rule 77 (t_exp_2 -> AND t_exp .)


state 176

    (80) g_exp_2 -> LESS_EQUAL g_exp_3 .

    AND             reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    OR              reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    SEMICOLON       reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    COMMA           reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    RPAR            reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    R_S_BRACKET     reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    TO              reduce using rule 80 (g_exp_2 -> LESS_EQUAL g_exp_3 .)


state 177

    (87) g_exp_3 -> m_exp .

    AND             reduce using rule 87 (g_exp_3 -> m_exp .)
    OR              reduce using rule 87 (g_exp_3 -> m_exp .)
    SEMICOLON       reduce using rule 87 (g_exp_3 -> m_exp .)
    COMMA           reduce using rule 87 (g_exp_3 -> m_exp .)
    RPAR            reduce using rule 87 (g_exp_3 -> m_exp .)
    R_S_BRACKET     reduce using rule 87 (g_exp_3 -> m_exp .)
    TO              reduce using rule 87 (g_exp_3 -> m_exp .)


state 178

    (81) g_exp_2 -> LESS g_exp_3 .

    AND             reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)
    OR              reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)
    SEMICOLON       reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)
    COMMA           reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)
    RPAR            reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)
    R_S_BRACKET     reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)
    TO              reduce using rule 81 (g_exp_2 -> LESS g_exp_3 .)


state 179

    (82) g_exp_2 -> GREATER_EQUAL g_exp_3 .

    AND             reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    OR              reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    SEMICOLON       reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    COMMA           reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    RPAR            reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    R_S_BRACKET     reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    TO              reduce using rule 82 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)


state 180

    (83) g_exp_2 -> GREATER g_exp_3 .

    AND             reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)
    OR              reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)
    SEMICOLON       reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)
    COMMA           reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)
    RPAR            reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)
    R_S_BRACKET     reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)
    TO              reduce using rule 83 (g_exp_2 -> GREATER g_exp_3 .)


state 181

    (84) g_exp_2 -> COMPARE g_exp_3 .

    AND             reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)
    OR              reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)
    SEMICOLON       reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)
    COMMA           reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)
    RPAR            reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)
    R_S_BRACKET     reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)
    TO              reduce using rule 84 (g_exp_2 -> COMPARE g_exp_3 .)


state 182

    (85) g_exp_2 -> NOT_EQUAL g_exp_3 .

    AND             reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    OR              reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    SEMICOLON       reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    COMMA           reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    RPAR            reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    R_S_BRACKET     reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    TO              reduce using rule 85 (g_exp_2 -> NOT_EQUAL g_exp_3 .)


state 183

    (89) m_exp_2 -> PLUS m_exp .

    LESS_EQUAL      reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    LESS            reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    GREATER_EQUAL   reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    GREATER         reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    COMPARE         reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    NOT_EQUAL       reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    AND             reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    OR              reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    SEMICOLON       reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    COMMA           reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    RPAR            reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    R_S_BRACKET     reduce using rule 89 (m_exp_2 -> PLUS m_exp .)
    TO              reduce using rule 89 (m_exp_2 -> PLUS m_exp .)


state 184

    (90) m_exp_2 -> MINUS m_exp .

    LESS_EQUAL      reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    LESS            reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    GREATER_EQUAL   reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    GREATER         reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    COMPARE         reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    NOT_EQUAL       reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    AND             reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    OR              reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    SEMICOLON       reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    COMMA           reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    RPAR            reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    R_S_BRACKET     reduce using rule 90 (m_exp_2 -> MINUS m_exp .)
    TO              reduce using rule 90 (m_exp_2 -> MINUS m_exp .)


state 185

    (93) t_2 -> TIMES t .

    PLUS            reduce using rule 93 (t_2 -> TIMES t .)
    MINUS           reduce using rule 93 (t_2 -> TIMES t .)
    LESS_EQUAL      reduce using rule 93 (t_2 -> TIMES t .)
    LESS            reduce using rule 93 (t_2 -> TIMES t .)
    GREATER_EQUAL   reduce using rule 93 (t_2 -> TIMES t .)
    GREATER         reduce using rule 93 (t_2 -> TIMES t .)
    COMPARE         reduce using rule 93 (t_2 -> TIMES t .)
    NOT_EQUAL       reduce using rule 93 (t_2 -> TIMES t .)
    AND             reduce using rule 93 (t_2 -> TIMES t .)
    OR              reduce using rule 93 (t_2 -> TIMES t .)
    SEMICOLON       reduce using rule 93 (t_2 -> TIMES t .)
    COMMA           reduce using rule 93 (t_2 -> TIMES t .)
    RPAR            reduce using rule 93 (t_2 -> TIMES t .)
    R_S_BRACKET     reduce using rule 93 (t_2 -> TIMES t .)
    TO              reduce using rule 93 (t_2 -> TIMES t .)


state 186

    (94) t_2 -> DIVIDE t .

    PLUS            reduce using rule 94 (t_2 -> DIVIDE t .)
    MINUS           reduce using rule 94 (t_2 -> DIVIDE t .)
    LESS_EQUAL      reduce using rule 94 (t_2 -> DIVIDE t .)
    LESS            reduce using rule 94 (t_2 -> DIVIDE t .)
    GREATER_EQUAL   reduce using rule 94 (t_2 -> DIVIDE t .)
    GREATER         reduce using rule 94 (t_2 -> DIVIDE t .)
    COMPARE         reduce using rule 94 (t_2 -> DIVIDE t .)
    NOT_EQUAL       reduce using rule 94 (t_2 -> DIVIDE t .)
    AND             reduce using rule 94 (t_2 -> DIVIDE t .)
    OR              reduce using rule 94 (t_2 -> DIVIDE t .)
    SEMICOLON       reduce using rule 94 (t_2 -> DIVIDE t .)
    COMMA           reduce using rule 94 (t_2 -> DIVIDE t .)
    RPAR            reduce using rule 94 (t_2 -> DIVIDE t .)
    R_S_BRACKET     reduce using rule 94 (t_2 -> DIVIDE t .)
    TO              reduce using rule 94 (t_2 -> DIVIDE t .)


state 187

    (96) f -> LPAR m_exp RPAR .

    TIMES           reduce using rule 96 (f -> LPAR m_exp RPAR .)
    DIVIDE          reduce using rule 96 (f -> LPAR m_exp RPAR .)
    PLUS            reduce using rule 96 (f -> LPAR m_exp RPAR .)
    MINUS           reduce using rule 96 (f -> LPAR m_exp RPAR .)
    LESS_EQUAL      reduce using rule 96 (f -> LPAR m_exp RPAR .)
    LESS            reduce using rule 96 (f -> LPAR m_exp RPAR .)
    GREATER_EQUAL   reduce using rule 96 (f -> LPAR m_exp RPAR .)
    GREATER         reduce using rule 96 (f -> LPAR m_exp RPAR .)
    COMPARE         reduce using rule 96 (f -> LPAR m_exp RPAR .)
    NOT_EQUAL       reduce using rule 96 (f -> LPAR m_exp RPAR .)
    AND             reduce using rule 96 (f -> LPAR m_exp RPAR .)
    OR              reduce using rule 96 (f -> LPAR m_exp RPAR .)
    SEMICOLON       reduce using rule 96 (f -> LPAR m_exp RPAR .)
    COMMA           reduce using rule 96 (f -> LPAR m_exp RPAR .)
    RPAR            reduce using rule 96 (f -> LPAR m_exp RPAR .)
    R_S_BRACKET     reduce using rule 96 (f -> LPAR m_exp RPAR .)
    TO              reduce using rule 96 (f -> LPAR m_exp RPAR .)


state 188

    (53) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 206


state 189

    (54) llamada_2 -> COMMA exp . llamada_2
    (54) llamada_2 -> . COMMA exp llamada_2
    (55) llamada_2 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 159
    RPAR            reduce using rule 110 (empty -> .)

    llamada_2                      shift and go to state 207
    empty                          shift and go to state 160

state 190

    (42) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 208
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 191

    (40) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 40 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 192

    (43) variable_3 -> empty .

    EQUAL           reduce using rule 43 (variable_3 -> empty .)
    TIMES           reduce using rule 43 (variable_3 -> empty .)
    DIVIDE          reduce using rule 43 (variable_3 -> empty .)
    PLUS            reduce using rule 43 (variable_3 -> empty .)
    MINUS           reduce using rule 43 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 43 (variable_3 -> empty .)
    LESS            reduce using rule 43 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 43 (variable_3 -> empty .)
    GREATER         reduce using rule 43 (variable_3 -> empty .)
    COMPARE         reduce using rule 43 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 43 (variable_3 -> empty .)
    AND             reduce using rule 43 (variable_3 -> empty .)
    OR              reduce using rule 43 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 43 (variable_3 -> empty .)
    COMMA           reduce using rule 43 (variable_3 -> empty .)
    RPAR            reduce using rule 43 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 43 (variable_3 -> empty .)
    TO              reduce using rule 43 (variable_3 -> empty .)


state 193

    (56) read -> READ LPAR variable RPAR SEMICOLON .

    ID              reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    READ            reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    WRITE           reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    IF              reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    FOR             reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    WHILE           reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)
    RETURN          reduce using rule 56 (read -> READ LPAR variable RPAR SEMICOLON .)


state 194

    (57) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 209


state 195

    (60) write_3 -> COMMA write_2 . write_3
    (60) write_3 -> . COMMA write_2 write_3
    (61) write_3 -> . empty
    (110) empty -> .

    COMMA           shift and go to state 164
    RPAR            reduce using rule 110 (empty -> .)

    write_3                        shift and go to state 210
    empty                          shift and go to state 165

state 196

    (62) if_1 -> IF LPAR exp RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79
    R_C_BRACKET     reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 211
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73
    empty                          shift and go to state 80

state 197

    (66) for_l -> FOR LPAR ID RPAR EQUAL . exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 212
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 198

    (69) while_l -> WHILE LPAR exp RPAR L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79
    R_C_BRACKET     reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 213
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73
    empty                          shift and go to state 80

state 199

    (34) param -> tipo_simple ID punto_param param_2 .

    RPAR            reduce using rule 34 (param -> tipo_simple ID punto_param param_2 .)


state 200

    (36) param_2 -> COMMA . param
    (34) param -> . tipo_simple ID punto_param param_2
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (110) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 110 (empty -> .)

    param                          shift and go to state 214
    tipo_simple                    shift and go to state 98
    empty                          shift and go to state 100

state 201

    (37) param_2 -> empty .

    RPAR            reduce using rule 37 (param_2 -> empty .)


state 202

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body . RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v

    RETURN          shift and go to state 215


state 203

    (104) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body . R_C_BRACKET func_agrega_v

    R_C_BRACKET     shift and go to state 216


state 204

    (28) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 28 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 205

    (31) var_mat -> empty .

    SEMICOLON       reduce using rule 31 (var_mat -> empty .)


state 206

    (53) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 53 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 207

    (54) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 54 (llamada_2 -> COMMA exp llamada_2 .)


state 208

    (42) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 217


state 209

    (57) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 57 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 210

    (60) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 60 (write_3 -> COMMA write_2 write_3 .)


state 211

    (62) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON
    (63) if_2 -> . estatuto if_2
    (64) if_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 218
    if_2                           shift and go to state 219
    empty                          shift and go to state 220
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 212

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp . TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    TO              shift and go to state 221


state 213

    (69) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON
    (70) while_l_2 -> . estatuto while_l_2
    (71) while_l_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 222
    while_l_2                      shift and go to state 223
    empty                          shift and go to state 224
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 214

    (36) param_2 -> COMMA param .

    RPAR            reduce using rule 36 (param_2 -> COMMA param .)


state 215

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN . LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v

    LPAR            shift and go to state 225


state 216

    (104) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET . func_agrega_v
    (109) func_agrega_v -> . empty
    (110) empty -> .

    SEMICOLON       reduce using rule 110 (empty -> .)

    func_agrega_v                  shift and go to state 226
    empty                          shift and go to state 227

state 217

    (42) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 42 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 218

    (63) if_2 -> estatuto . if_2
    (63) if_2 -> . estatuto if_2
    (64) if_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 218
    if_2                           shift and go to state 228
    empty                          shift and go to state 220
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 219

    (62) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON

    R_C_BRACKET     shift and go to state 229


state 220

    (64) if_2 -> empty .
    (72) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 64 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 64 (if_2 -> empty .)
    ID              reduce using rule 72 (func_extra -> empty .)
    READ            reduce using rule 72 (func_extra -> empty .)
    WRITE           reduce using rule 72 (func_extra -> empty .)
    IF              reduce using rule 72 (func_extra -> empty .)
    FOR             reduce using rule 72 (func_extra -> empty .)
    WHILE           reduce using rule 72 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 72 (func_extra -> empty .) ]


state 221

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO . exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 230
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 222

    (70) while_l_2 -> estatuto . while_l_2
    (70) while_l_2 -> . estatuto while_l_2
    (71) while_l_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 222
    while_l_2                      shift and go to state 231
    empty                          shift and go to state 224
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 223

    (69) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 232


state 224

    (71) while_l_2 -> empty .
    (72) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 71 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 71 (while_l_2 -> empty .)
    ID              reduce using rule 72 (func_extra -> empty .)
    READ            reduce using rule 72 (func_extra -> empty .)
    WRITE           reduce using rule 72 (func_extra -> empty .)
    IF              reduce using rule 72 (func_extra -> empty .)
    FOR             reduce using rule 72 (func_extra -> empty .)
    WHILE           reduce using rule 72 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 72 (func_extra -> empty .) ]


state 225

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR . exp RPAR SEMICOLON R_C_BRACKET func_agrega_v
    (73) exp -> . t_exp exp_2
    (76) t_exp -> . g_exp t_exp_2
    (79) g_exp -> . m_exp g_exp_2
    (88) m_exp -> . t m_exp_2
    (92) t -> . f t_2
    (96) f -> . LPAR m_exp RPAR
    (97) f -> . variable
    (98) f -> . llamada
    (99) f -> . f_2
    (39) variable -> . ID variable_2
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (100) f_2 -> . CTE_I
    (101) f_2 -> . CTE_F

    LPAR            shift and go to state 114
    ID              shift and go to state 117
    CTE_I           shift and go to state 118
    CTE_F           shift and go to state 119

    exp                            shift and go to state 233
    t_exp                          shift and go to state 109
    g_exp                          shift and go to state 110
    m_exp                          shift and go to state 111
    t                              shift and go to state 112
    f                              shift and go to state 113
    variable                       shift and go to state 107
    llamada                        shift and go to state 115
    f_2                            shift and go to state 116

state 226

    (104) function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v .

    SEMICOLON       reduce using rule 104 (function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v .)


state 227

    (109) func_agrega_v -> empty .

    SEMICOLON       reduce using rule 109 (func_agrega_v -> empty .)


state 228

    (63) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 63 (if_2 -> estatuto if_2 .)


state 229

    (62) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON
    (65) if_3 -> . ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET

    ELSE            shift and go to state 235

    if_3                           shift and go to state 234

state 230

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 236


state 231

    (70) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 70 (while_l_2 -> estatuto while_l_2 .)


state 232

    (69) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 237


state 233

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp . RPAR SEMICOLON R_C_BRACKET func_agrega_v

    RPAR            shift and go to state 238


state 234

    (62) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON

    SEMICOLON       shift and go to state 239


state 235

    (65) if_3 -> ELSE . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 240


state 236

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 241


state 237

    (69) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 69 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)


state 238

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR . SEMICOLON R_C_BRACKET func_agrega_v

    SEMICOLON       shift and go to state 242


state 239

    (62) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .

    ID              reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    READ            reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    WRITE           reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    IF              reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    FOR             reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    WHILE           reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    R_C_BRACKET     reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    RETURN          reduce using rule 62 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)


state 240

    (65) if_3 -> ELSE L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79
    R_C_BRACKET     reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 243
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73
    empty                          shift and go to state 80

state 241

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2
    (110) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79
    R_C_BRACKET     reduce using rule 110 (empty -> .)

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 244
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73
    empty                          shift and go to state 80

state 242

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON . R_C_BRACKET func_agrega_v

    R_C_BRACKET     shift and go to state 245


state 243

    (65) if_3 -> ELSE L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (63) if_2 -> . estatuto if_2
    (64) if_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 218
    if_2                           shift and go to state 246
    empty                          shift and go to state 220
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 244

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON
    (67) for_l_2 -> . estatuto for_l_2
    (68) for_l_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 247
    for_l_2                        shift and go to state 248
    empty                          shift and go to state 249
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 245

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET . func_agrega_v
    (109) func_agrega_v -> . empty
    (110) empty -> .

    SEMICOLON       reduce using rule 110 (empty -> .)

    func_agrega_v                  shift and go to state 250
    empty                          shift and go to state 227

state 246

    (65) if_3 -> ELSE L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 251


state 247

    (67) for_l_2 -> estatuto . for_l_2
    (67) for_l_2 -> . estatuto for_l_2
    (68) for_l_2 -> . empty
    (44) estatuto -> . asigna
    (45) estatuto -> . llamada
    (46) estatuto -> . read
    (47) estatuto -> . write
    (48) estatuto -> . if_1
    (49) estatuto -> . for_l
    (50) estatuto -> . while_l
    (51) estatuto -> . func_extra
    (110) empty -> .
    (52) asigna -> . variable EQUAL exp SEMICOLON
    (53) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (56) read -> . READ LPAR variable RPAR SEMICOLON
    (57) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (62) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (66) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (69) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) func_extra -> . empty
    (39) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 110 (empty -> .)
    ID              shift and go to state 74
    READ            shift and go to state 75
    WRITE           shift and go to state 76
    IF              shift and go to state 77
    FOR             shift and go to state 78
    WHILE           shift and go to state 79

  ! ID              [ reduce using rule 110 (empty -> .) ]
  ! READ            [ reduce using rule 110 (empty -> .) ]
  ! WRITE           [ reduce using rule 110 (empty -> .) ]
  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]

    estatuto                       shift and go to state 247
    for_l_2                        shift and go to state 252
    empty                          shift and go to state 249
    asigna                         shift and go to state 65
    llamada                        shift and go to state 66
    read                           shift and go to state 67
    write                          shift and go to state 68
    if_1                           shift and go to state 69
    for_l                          shift and go to state 70
    while_l                        shift and go to state 71
    func_extra                     shift and go to state 72
    variable                       shift and go to state 73

state 248

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 253


state 249

    (68) for_l_2 -> empty .
    (72) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 68 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 68 (for_l_2 -> empty .)
    ID              reduce using rule 72 (func_extra -> empty .)
    READ            reduce using rule 72 (func_extra -> empty .)
    WRITE           reduce using rule 72 (func_extra -> empty .)
    IF              reduce using rule 72 (func_extra -> empty .)
    FOR             reduce using rule 72 (func_extra -> empty .)
    WHILE           reduce using rule 72 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 72 (func_extra -> empty .) ]


state 250

    (103) function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v .

    SEMICOLON       reduce using rule 103 (function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v .)


state 251

    (65) if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 65 (if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 252

    (67) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 67 (for_l_2 -> estatuto for_l_2 .)


state 253

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 254


state 254

    (66) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 66 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for READ in state 54 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for READ in state 64 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 64 resolved as shift
WARNING: shift/reduce conflict for IF in state 64 resolved as shift
WARNING: shift/reduce conflict for FOR in state 64 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 64 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for READ in state 85 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 196 resolved as shift
WARNING: shift/reduce conflict for READ in state 196 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 196 resolved as shift
WARNING: shift/reduce conflict for IF in state 196 resolved as shift
WARNING: shift/reduce conflict for FOR in state 196 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 196 resolved as shift
WARNING: shift/reduce conflict for ID in state 198 resolved as shift
WARNING: shift/reduce conflict for READ in state 198 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 198 resolved as shift
WARNING: shift/reduce conflict for IF in state 198 resolved as shift
WARNING: shift/reduce conflict for FOR in state 198 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 198 resolved as shift
WARNING: shift/reduce conflict for ID in state 211 resolved as shift
WARNING: shift/reduce conflict for READ in state 211 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for READ in state 213 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 218 resolved as shift
WARNING: shift/reduce conflict for READ in state 218 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 218 resolved as shift
WARNING: shift/reduce conflict for IF in state 218 resolved as shift
WARNING: shift/reduce conflict for FOR in state 218 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for READ in state 222 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 240 resolved as shift
WARNING: shift/reduce conflict for READ in state 240 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 240 resolved as shift
WARNING: shift/reduce conflict for IF in state 240 resolved as shift
WARNING: shift/reduce conflict for FOR in state 240 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 240 resolved as shift
WARNING: shift/reduce conflict for ID in state 241 resolved as shift
WARNING: shift/reduce conflict for READ in state 241 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 241 resolved as shift
WARNING: shift/reduce conflict for IF in state 241 resolved as shift
WARNING: shift/reduce conflict for FOR in state 241 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 241 resolved as shift
WARNING: shift/reduce conflict for ID in state 243 resolved as shift
WARNING: shift/reduce conflict for READ in state 243 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 243 resolved as shift
WARNING: shift/reduce conflict for IF in state 243 resolved as shift
WARNING: shift/reduce conflict for FOR in state 243 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 243 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for READ in state 244 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 244 resolved as shift
WARNING: shift/reduce conflict for IF in state 244 resolved as shift
WARNING: shift/reduce conflict for FOR in state 244 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for READ in state 247 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 247 resolved as shift
WARNING: shift/reduce conflict for IF in state 247 resolved as shift
WARNING: shift/reduce conflict for FOR in state 247 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 247 resolved as shift
WARNING: reduce/reduce conflict in state 46 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 46
WARNING: reduce/reduce conflict in state 87 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 87
WARNING: reduce/reduce conflict in state 220 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 220
WARNING: reduce/reduce conflict in state 224 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 224
WARNING: reduce/reduce conflict in state 249 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 249
WARNING: Rule (vars_6 -> empty) is never reduced
