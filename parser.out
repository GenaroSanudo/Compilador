Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM program_point ID COLON modules main
Rule 2     program_point -> empty
Rule 3     modules -> modules_2 modules_point modules_3
Rule 4     modules_point -> empty
Rule 5     modules_2 -> vars
Rule 6     modules_2 -> empty
Rule 7     modules_3 -> function
Rule 8     modules_3 -> empty
Rule 9     main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON
Rule 10    body -> vars estatuto body_2
Rule 11    body_2 -> estatuto body_2
Rule 12    body_2 -> empty
Rule 13    tipo_simple -> INT
Rule 14    tipo_simple -> FLOAT
Rule 15    tipo_simple -> CHAR
Rule 16    tipo_comp -> DATAFRAME
Rule 17    vars -> VAR vars_2 SEMICOLON vars_8
Rule 18    vars_2 -> tipo_comp vars_3
Rule 19    vars_2 -> tipo_simple vars_4
Rule 20    vars_3 -> ID vars_5
Rule 21    vars_4 -> vars_3
Rule 22    vars_4 -> ID vars_6
Rule 23    vars_5 -> COMMA vars_3
Rule 24    vars_5 -> empty
Rule 25    vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
Rule 26    vars_6 -> empty
Rule 27    punto_id_especial -> empty
Rule 28    vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat
Rule 29    vars_7 -> var_array
Rule 30    var_array -> empty
Rule 31    var_mat -> empty
Rule 32    vars_8 -> vars
Rule 33    vars_8 -> empty
Rule 34    param -> tipo_simple param_2 punto_param ID
Rule 35    param -> empty
Rule 36    param_2 -> COMMA param
Rule 37    punto_param -> empty
Rule 38    variable -> ID variable_2
Rule 39    variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3
Rule 40    variable_2 -> empty
Rule 41    variable_3 -> L_S_BRACKET exp R_S_BRACKET
Rule 42    variable_3 -> empty
Rule 43    estatuto -> asigna
Rule 44    estatuto -> llamada
Rule 45    estatuto -> read
Rule 46    estatuto -> write
Rule 47    estatuto -> if_1
Rule 48    estatuto -> for_l
Rule 49    estatuto -> while_l
Rule 50    estatuto -> func_extra
Rule 51    asigna -> variable EQUAL exp SEMICOLON
Rule 52    llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON
Rule 53    llamada_2 -> COMMA exp llamada_2
Rule 54    llamada_2 -> empty
Rule 55    read -> READ LPAR variable RPAR SEMICOLON
Rule 56    write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON
Rule 57    write_2 -> exp
Rule 58    write_2 -> CTE_S
Rule 59    write_3 -> COMMA write_2 write_3
Rule 60    write_3 -> empty
Rule 61    if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
Rule 62    if_2 -> estatuto if_2
Rule 63    if_2 -> empty
Rule 64    if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET
Rule 65    for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
Rule 66    for_l_2 -> estatuto for_l_2
Rule 67    for_l_2 -> empty
Rule 68    while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
Rule 69    while_l_2 -> estatuto while_l_2
Rule 70    while_l_2 -> empty
Rule 71    func_extra -> empty
Rule 72    exp -> t_exp exp_2
Rule 73    exp_2 -> OR exp
Rule 74    exp_2 -> empty
Rule 75    t_exp -> g_exp t_exp_2
Rule 76    t_exp_2 -> AND t_exp
Rule 77    t_exp_2 -> empty
Rule 78    g_exp -> m_exp g_exp_2
Rule 79    g_exp_2 -> LESS_EQUAL g_exp_3
Rule 80    g_exp_2 -> LESS g_exp_3
Rule 81    g_exp_2 -> GREATER_EQUAL g_exp_3
Rule 82    g_exp_2 -> GREATER g_exp_3
Rule 83    g_exp_2 -> COMPARE g_exp_3
Rule 84    g_exp_2 -> NOT_EQUAL g_exp_3
Rule 85    g_exp_2 -> empty
Rule 86    g_exp_3 -> m_exp
Rule 87    m_exp -> t m_exp_2
Rule 88    m_exp_2 -> PLUS m_exp
Rule 89    m_exp_2 -> MINUS m_exp
Rule 90    m_exp_2 -> empty
Rule 91    t -> f t_2
Rule 92    t_2 -> TIMES t
Rule 93    t_2 -> DIVIDE t
Rule 94    t_2 -> empty
Rule 95    f -> LPAR m_exp RPAR
Rule 96    f -> variable
Rule 97    f -> llamada
Rule 98    f -> f_2
Rule 99    f_2 -> CTE_I
Rule 100   f_2 -> CTE_F
Rule 101   function -> FUNC function_2 SEMICOLON
Rule 102   function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
Rule 103   function_2 -> VOID ID LPAR param RPAR L_C_BRACKET body R_C_BRACKET
Rule 104   empty -> <empty>

Terminals, with rules where they appear

AND                  : 76
CHAR                 : 15
COLON                : 1
COMMA                : 23 36 53 59
COMPARE              : 83
CTE_F                : 100
CTE_I                : 25 28 99
CTE_S                : 58
DATAFRAME            : 16
DIVIDE               : 93
ELSE                 : 64
EQUAL                : 51 65
FLOAT                : 14
FOR                  : 65
FUNC                 : 101
GREATER              : 82
GREATER_EQUAL        : 81
ID                   : 1 20 22 34 38 52 65 102 103
IF                   : 61
INT                  : 13
LESS                 : 80
LESS_EQUAL           : 79
LPAR                 : 9 52 55 56 61 65 68 95 102 102 103
L_C_BRACKET          : 9 61 64 65 68 102 103
L_S_BRACKET          : 25 28 39 41
MAIN                 : 9
MINUS                : 89
NOT_EQUAL            : 84
OR                   : 73
PLUS                 : 88
PROGRAM              : 1
READ                 : 55
RETURN               : 102
RPAR                 : 9 52 55 56 61 65 65 68 95 102 102 103
R_C_BRACKET          : 9 61 64 65 68 102 103
R_S_BRACKET          : 25 28 39 41
SEMICOLON            : 9 17 51 52 55 56 61 65 68 101 102
STRING               : 
TIMES                : 92
TO                   : 65
VAR                  : 17
VOID                 : 103
WHILE                : 68
WRITE                : 56
error                : 

Nonterminals, with rules where they appear

asigna               : 43
body                 : 9 102 103
body_2               : 10 11
empty                : 2 4 6 8 12 24 26 27 30 31 33 35 37 40 42 54 60 63 67 70 71 74 77 85 90 94
estatuto             : 10 11 61 62 64 65 66 68 69
exp                  : 39 41 51 52 53 57 61 65 65 68 73 102
exp_2                : 72
f                    : 91
f_2                  : 98
for_l                : 48
for_l_2              : 65 66
func_extra           : 50
function             : 7
function_2           : 101
g_exp                : 75
g_exp_2              : 78
g_exp_3              : 79 80 81 82 83 84
if_1                 : 47
if_2                 : 61 62 64
if_3                 : 61
llamada              : 44 97
llamada_2            : 52 53
m_exp                : 78 86 88 89 95
m_exp_2              : 87
main                 : 1
modules              : 1
modules_2            : 3
modules_3            : 3
modules_point        : 3
param                : 36 102 103
param_2              : 34
program              : 0
program_point        : 1
punto_id_especial    : 25
punto_param          : 34
read                 : 45
t                    : 87 92 93
t_2                  : 91
t_exp                : 72 76
t_exp_2              : 75
tipo_comp            : 18
tipo_simple          : 19 34 102
var_array            : 29
var_mat              : 28
variable             : 51 55 96
variable_2           : 38
variable_3           : 39
vars                 : 5 10 32
vars_2               : 17
vars_3               : 18 21 23
vars_4               : 19
vars_5               : 20
vars_6               : 22
vars_7               : 25
vars_8               : 17
while_l              : 49
while_l_2            : 68 69
write                : 46
write_2              : 56 59
write_3              : 56 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM program_point ID COLON modules main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . program_point ID COLON modules main
    (2) program_point -> . empty
    (104) empty -> .

    ID              reduce using rule 104 (empty -> .)

    program_point                  shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) program -> PROGRAM program_point . ID COLON modules main

    ID              shift and go to state 5


state 4

    (2) program_point -> empty .

    ID              reduce using rule 2 (program_point -> empty .)


state 5

    (1) program -> PROGRAM program_point ID . COLON modules main

    COLON           shift and go to state 6


state 6

    (1) program -> PROGRAM program_point ID COLON . modules main
    (3) modules -> . modules_2 modules_point modules_3
    (5) modules_2 -> . vars
    (6) modules_2 -> . empty
    (17) vars -> . VAR vars_2 SEMICOLON vars_8
    (104) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    modules                        shift and go to state 7
    modules_2                      shift and go to state 8
    vars                           shift and go to state 9
    empty                          shift and go to state 10

state 7

    (1) program -> PROGRAM program_point ID COLON modules . main
    (9) main -> . MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    MAIN            shift and go to state 13

    main                           shift and go to state 12

state 8

    (3) modules -> modules_2 . modules_point modules_3
    (4) modules_point -> . empty
    (104) empty -> .

    FUNC            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    modules_point                  shift and go to state 14
    empty                          shift and go to state 15

state 9

    (5) modules_2 -> vars .

    FUNC            reduce using rule 5 (modules_2 -> vars .)
    MAIN            reduce using rule 5 (modules_2 -> vars .)


state 10

    (6) modules_2 -> empty .

    FUNC            reduce using rule 6 (modules_2 -> empty .)
    MAIN            reduce using rule 6 (modules_2 -> empty .)


state 11

    (17) vars -> VAR . vars_2 SEMICOLON vars_8
    (18) vars_2 -> . tipo_comp vars_3
    (19) vars_2 -> . tipo_simple vars_4
    (16) tipo_comp -> . DATAFRAME
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    DATAFRAME       shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    vars_2                         shift and go to state 16
    tipo_comp                      shift and go to state 17
    tipo_simple                    shift and go to state 18

state 12

    (1) program -> PROGRAM program_point ID COLON modules main .

    $end            reduce using rule 1 (program -> PROGRAM program_point ID COLON modules main .)


state 13

    (9) main -> MAIN . LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 23


state 14

    (3) modules -> modules_2 modules_point . modules_3
    (7) modules_3 -> . function
    (8) modules_3 -> . empty
    (101) function -> . FUNC function_2 SEMICOLON
    (104) empty -> .

    FUNC            shift and go to state 27
    MAIN            reduce using rule 104 (empty -> .)

    modules_3                      shift and go to state 24
    function                       shift and go to state 25
    empty                          shift and go to state 26

state 15

    (4) modules_point -> empty .

    FUNC            reduce using rule 4 (modules_point -> empty .)
    MAIN            reduce using rule 4 (modules_point -> empty .)


state 16

    (17) vars -> VAR vars_2 . SEMICOLON vars_8

    SEMICOLON       shift and go to state 28


state 17

    (18) vars_2 -> tipo_comp . vars_3
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 29

state 18

    (19) vars_2 -> tipo_simple . vars_4
    (21) vars_4 -> . vars_3
    (22) vars_4 -> . ID vars_6
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 33

    vars_4                         shift and go to state 31
    vars_3                         shift and go to state 32

state 19

    (16) tipo_comp -> DATAFRAME .

    ID              reduce using rule 16 (tipo_comp -> DATAFRAME .)


state 20

    (13) tipo_simple -> INT .

    ID              reduce using rule 13 (tipo_simple -> INT .)
    COMMA           reduce using rule 13 (tipo_simple -> INT .)


state 21

    (14) tipo_simple -> FLOAT .

    ID              reduce using rule 14 (tipo_simple -> FLOAT .)
    COMMA           reduce using rule 14 (tipo_simple -> FLOAT .)


state 22

    (15) tipo_simple -> CHAR .

    ID              reduce using rule 15 (tipo_simple -> CHAR .)
    COMMA           reduce using rule 15 (tipo_simple -> CHAR .)


state 23

    (9) main -> MAIN LPAR . RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 34


state 24

    (3) modules -> modules_2 modules_point modules_3 .

    MAIN            reduce using rule 3 (modules -> modules_2 modules_point modules_3 .)


state 25

    (7) modules_3 -> function .

    MAIN            reduce using rule 7 (modules_3 -> function .)


state 26

    (8) modules_3 -> empty .

    MAIN            reduce using rule 8 (modules_3 -> empty .)


state 27

    (101) function -> FUNC . function_2 SEMICOLON
    (102) function_2 -> . tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (103) function_2 -> . VOID ID LPAR param RPAR L_C_BRACKET body R_C_BRACKET
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR

    VOID            shift and go to state 37
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    function_2                     shift and go to state 35
    tipo_simple                    shift and go to state 36

state 28

    (17) vars -> VAR vars_2 SEMICOLON . vars_8
    (32) vars_8 -> . vars
    (33) vars_8 -> . empty
    (17) vars -> . VAR vars_2 SEMICOLON vars_8
    (104) empty -> .

    VAR             shift and go to state 11
    FUNC            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)
    ID              reduce using rule 104 (empty -> .)
    READ            reduce using rule 104 (empty -> .)
    WRITE           reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    FOR             reduce using rule 104 (empty -> .)
    WHILE           reduce using rule 104 (empty -> .)
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)

    vars_8                         shift and go to state 38
    vars                           shift and go to state 39
    empty                          shift and go to state 40

state 29

    (18) vars_2 -> tipo_comp vars_3 .

    SEMICOLON       reduce using rule 18 (vars_2 -> tipo_comp vars_3 .)


state 30

    (20) vars_3 -> ID . vars_5
    (23) vars_5 -> . COMMA vars_3
    (24) vars_5 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 104 (empty -> .)

    vars_5                         shift and go to state 41
    empty                          shift and go to state 43

state 31

    (19) vars_2 -> tipo_simple vars_4 .

    SEMICOLON       reduce using rule 19 (vars_2 -> tipo_simple vars_4 .)


state 32

    (21) vars_4 -> vars_3 .

    SEMICOLON       reduce using rule 21 (vars_4 -> vars_3 .)


state 33

    (22) vars_4 -> ID . vars_6
    (20) vars_3 -> ID . vars_5
    (25) vars_6 -> . punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7
    (26) vars_6 -> . empty
    (23) vars_5 -> . COMMA vars_3
    (24) vars_5 -> . empty
    (27) punto_id_especial -> . empty
    (104) empty -> .

    COMMA           shift and go to state 42
    SEMICOLON       reduce using rule 104 (empty -> .)
    L_S_BRACKET     reduce using rule 104 (empty -> .)

    vars_6                         shift and go to state 44
    vars_5                         shift and go to state 41
    punto_id_especial              shift and go to state 45
    empty                          shift and go to state 46

state 34

    (9) main -> MAIN LPAR RPAR . L_C_BRACKET body R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 47


state 35

    (101) function -> FUNC function_2 . SEMICOLON

    SEMICOLON       shift and go to state 48


state 36

    (102) function_2 -> tipo_simple . ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    ID              shift and go to state 49


state 37

    (103) function_2 -> VOID . ID LPAR param RPAR L_C_BRACKET body R_C_BRACKET

    ID              shift and go to state 50


state 38

    (17) vars -> VAR vars_2 SEMICOLON vars_8 .

    FUNC            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    MAIN            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    ID              reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    READ            reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WRITE           reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    IF              reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    FOR             reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    WHILE           reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    R_C_BRACKET     reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)
    RETURN          reduce using rule 17 (vars -> VAR vars_2 SEMICOLON vars_8 .)


state 39

    (32) vars_8 -> vars .

    FUNC            reduce using rule 32 (vars_8 -> vars .)
    MAIN            reduce using rule 32 (vars_8 -> vars .)
    ID              reduce using rule 32 (vars_8 -> vars .)
    READ            reduce using rule 32 (vars_8 -> vars .)
    WRITE           reduce using rule 32 (vars_8 -> vars .)
    IF              reduce using rule 32 (vars_8 -> vars .)
    FOR             reduce using rule 32 (vars_8 -> vars .)
    WHILE           reduce using rule 32 (vars_8 -> vars .)
    R_C_BRACKET     reduce using rule 32 (vars_8 -> vars .)
    RETURN          reduce using rule 32 (vars_8 -> vars .)


state 40

    (33) vars_8 -> empty .

    FUNC            reduce using rule 33 (vars_8 -> empty .)
    MAIN            reduce using rule 33 (vars_8 -> empty .)
    ID              reduce using rule 33 (vars_8 -> empty .)
    READ            reduce using rule 33 (vars_8 -> empty .)
    WRITE           reduce using rule 33 (vars_8 -> empty .)
    IF              reduce using rule 33 (vars_8 -> empty .)
    FOR             reduce using rule 33 (vars_8 -> empty .)
    WHILE           reduce using rule 33 (vars_8 -> empty .)
    R_C_BRACKET     reduce using rule 33 (vars_8 -> empty .)
    RETURN          reduce using rule 33 (vars_8 -> empty .)


state 41

    (20) vars_3 -> ID vars_5 .

    SEMICOLON       reduce using rule 20 (vars_3 -> ID vars_5 .)


state 42

    (23) vars_5 -> COMMA . vars_3
    (20) vars_3 -> . ID vars_5

    ID              shift and go to state 30

    vars_3                         shift and go to state 51

state 43

    (24) vars_5 -> empty .

    SEMICOLON       reduce using rule 24 (vars_5 -> empty .)


state 44

    (22) vars_4 -> ID vars_6 .

    SEMICOLON       reduce using rule 22 (vars_4 -> ID vars_6 .)


state 45

    (25) vars_6 -> punto_id_especial . L_S_BRACKET CTE_I R_S_BRACKET vars_7

    L_S_BRACKET     shift and go to state 52


state 46

    (26) vars_6 -> empty .
    (24) vars_5 -> empty .
    (27) punto_id_especial -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (vars_5 -> empty .)
    SEMICOLON       reduce using rule 24 (vars_5 -> empty .)
    L_S_BRACKET     reduce using rule 27 (punto_id_especial -> empty .)

  ! SEMICOLON       [ reduce using rule 26 (vars_6 -> empty .) ]


state 47

    (9) main -> MAIN LPAR RPAR L_C_BRACKET . body R_C_BRACKET SEMICOLON
    (10) body -> . vars estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 53
    vars                           shift and go to state 54

state 48

    (101) function -> FUNC function_2 SEMICOLON .

    MAIN            reduce using rule 101 (function -> FUNC function_2 SEMICOLON .)


state 49

    (102) function_2 -> tipo_simple ID . LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    LPAR            shift and go to state 55


state 50

    (103) function_2 -> VOID ID . LPAR param RPAR L_C_BRACKET body R_C_BRACKET

    LPAR            shift and go to state 56


state 51

    (23) vars_5 -> COMMA vars_3 .

    SEMICOLON       reduce using rule 23 (vars_5 -> COMMA vars_3 .)


state 52

    (25) vars_6 -> punto_id_especial L_S_BRACKET . CTE_I R_S_BRACKET vars_7

    CTE_I           shift and go to state 57


state 53

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 58


state 54

    (10) body -> vars . estatuto body_2
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2
    (104) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 59
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68
    empty                          shift and go to state 75

state 55

    (102) function_2 -> tipo_simple ID LPAR . param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (34) param -> . tipo_simple param_2 punto_param ID
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (104) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 104 (empty -> .)

    tipo_simple                    shift and go to state 76
    param                          shift and go to state 77
    empty                          shift and go to state 78

state 56

    (103) function_2 -> VOID ID LPAR . param RPAR L_C_BRACKET body R_C_BRACKET
    (34) param -> . tipo_simple param_2 punto_param ID
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (104) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAR            reduce using rule 104 (empty -> .)

    param                          shift and go to state 79
    tipo_simple                    shift and go to state 76
    empty                          shift and go to state 78

state 57

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I . R_S_BRACKET vars_7

    R_S_BRACKET     shift and go to state 80


state 58

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 81


state 59

    (10) body -> vars estatuto . body_2
    (11) body_2 -> . estatuto body_2
    (12) body_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 82
    body_2                         shift and go to state 83
    empty                          shift and go to state 84
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 60

    (43) estatuto -> asigna .

    ID              reduce using rule 43 (estatuto -> asigna .)
    READ            reduce using rule 43 (estatuto -> asigna .)
    WRITE           reduce using rule 43 (estatuto -> asigna .)
    IF              reduce using rule 43 (estatuto -> asigna .)
    FOR             reduce using rule 43 (estatuto -> asigna .)
    WHILE           reduce using rule 43 (estatuto -> asigna .)
    R_C_BRACKET     reduce using rule 43 (estatuto -> asigna .)
    RETURN          reduce using rule 43 (estatuto -> asigna .)


state 61

    (44) estatuto -> llamada .

    ID              reduce using rule 44 (estatuto -> llamada .)
    READ            reduce using rule 44 (estatuto -> llamada .)
    WRITE           reduce using rule 44 (estatuto -> llamada .)
    IF              reduce using rule 44 (estatuto -> llamada .)
    FOR             reduce using rule 44 (estatuto -> llamada .)
    WHILE           reduce using rule 44 (estatuto -> llamada .)
    R_C_BRACKET     reduce using rule 44 (estatuto -> llamada .)
    RETURN          reduce using rule 44 (estatuto -> llamada .)


state 62

    (45) estatuto -> read .

    ID              reduce using rule 45 (estatuto -> read .)
    READ            reduce using rule 45 (estatuto -> read .)
    WRITE           reduce using rule 45 (estatuto -> read .)
    IF              reduce using rule 45 (estatuto -> read .)
    FOR             reduce using rule 45 (estatuto -> read .)
    WHILE           reduce using rule 45 (estatuto -> read .)
    R_C_BRACKET     reduce using rule 45 (estatuto -> read .)
    RETURN          reduce using rule 45 (estatuto -> read .)


state 63

    (46) estatuto -> write .

    ID              reduce using rule 46 (estatuto -> write .)
    READ            reduce using rule 46 (estatuto -> write .)
    WRITE           reduce using rule 46 (estatuto -> write .)
    IF              reduce using rule 46 (estatuto -> write .)
    FOR             reduce using rule 46 (estatuto -> write .)
    WHILE           reduce using rule 46 (estatuto -> write .)
    R_C_BRACKET     reduce using rule 46 (estatuto -> write .)
    RETURN          reduce using rule 46 (estatuto -> write .)


state 64

    (47) estatuto -> if_1 .

    ID              reduce using rule 47 (estatuto -> if_1 .)
    READ            reduce using rule 47 (estatuto -> if_1 .)
    WRITE           reduce using rule 47 (estatuto -> if_1 .)
    IF              reduce using rule 47 (estatuto -> if_1 .)
    FOR             reduce using rule 47 (estatuto -> if_1 .)
    WHILE           reduce using rule 47 (estatuto -> if_1 .)
    R_C_BRACKET     reduce using rule 47 (estatuto -> if_1 .)
    RETURN          reduce using rule 47 (estatuto -> if_1 .)


state 65

    (48) estatuto -> for_l .

    ID              reduce using rule 48 (estatuto -> for_l .)
    READ            reduce using rule 48 (estatuto -> for_l .)
    WRITE           reduce using rule 48 (estatuto -> for_l .)
    IF              reduce using rule 48 (estatuto -> for_l .)
    FOR             reduce using rule 48 (estatuto -> for_l .)
    WHILE           reduce using rule 48 (estatuto -> for_l .)
    R_C_BRACKET     reduce using rule 48 (estatuto -> for_l .)
    RETURN          reduce using rule 48 (estatuto -> for_l .)


state 66

    (49) estatuto -> while_l .

    ID              reduce using rule 49 (estatuto -> while_l .)
    READ            reduce using rule 49 (estatuto -> while_l .)
    WRITE           reduce using rule 49 (estatuto -> while_l .)
    IF              reduce using rule 49 (estatuto -> while_l .)
    FOR             reduce using rule 49 (estatuto -> while_l .)
    WHILE           reduce using rule 49 (estatuto -> while_l .)
    R_C_BRACKET     reduce using rule 49 (estatuto -> while_l .)
    RETURN          reduce using rule 49 (estatuto -> while_l .)


state 67

    (50) estatuto -> func_extra .

    ID              reduce using rule 50 (estatuto -> func_extra .)
    READ            reduce using rule 50 (estatuto -> func_extra .)
    WRITE           reduce using rule 50 (estatuto -> func_extra .)
    IF              reduce using rule 50 (estatuto -> func_extra .)
    FOR             reduce using rule 50 (estatuto -> func_extra .)
    WHILE           reduce using rule 50 (estatuto -> func_extra .)
    R_C_BRACKET     reduce using rule 50 (estatuto -> func_extra .)
    RETURN          reduce using rule 50 (estatuto -> func_extra .)


state 68

    (51) asigna -> variable . EQUAL exp SEMICOLON

    EQUAL           shift and go to state 85


state 69

    (52) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (38) variable -> ID . variable_2
    (39) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (40) variable_2 -> . empty
    (104) empty -> .

    LPAR            shift and go to state 86
    L_S_BRACKET     shift and go to state 88
    EQUAL           reduce using rule 104 (empty -> .)

    variable_2                     shift and go to state 87
    empty                          shift and go to state 89

state 70

    (55) read -> READ . LPAR variable RPAR SEMICOLON

    LPAR            shift and go to state 90


state 71

    (56) write -> WRITE . LPAR write_2 write_3 RPAR SEMICOLON

    LPAR            shift and go to state 91


state 72

    (61) if_1 -> IF . LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    LPAR            shift and go to state 92


state 73

    (65) for_l -> FOR . LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 93


state 74

    (68) while_l -> WHILE . LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    LPAR            shift and go to state 94


state 75

    (71) func_extra -> empty .

    ID              reduce using rule 71 (func_extra -> empty .)
    READ            reduce using rule 71 (func_extra -> empty .)
    WRITE           reduce using rule 71 (func_extra -> empty .)
    IF              reduce using rule 71 (func_extra -> empty .)
    FOR             reduce using rule 71 (func_extra -> empty .)
    WHILE           reduce using rule 71 (func_extra -> empty .)
    R_C_BRACKET     reduce using rule 71 (func_extra -> empty .)
    RETURN          reduce using rule 71 (func_extra -> empty .)


state 76

    (34) param -> tipo_simple . param_2 punto_param ID
    (36) param_2 -> . COMMA param

    COMMA           shift and go to state 96

    param_2                        shift and go to state 95

state 77

    (102) function_2 -> tipo_simple ID LPAR param . RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    RPAR            shift and go to state 97


state 78

    (35) param -> empty .

    RPAR            reduce using rule 35 (param -> empty .)
    ID              reduce using rule 35 (param -> empty .)


state 79

    (103) function_2 -> VOID ID LPAR param . RPAR L_C_BRACKET body R_C_BRACKET

    RPAR            shift and go to state 98


state 80

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET . vars_7
    (28) vars_7 -> . L_S_BRACKET CTE_I R_S_BRACKET var_mat
    (29) vars_7 -> . var_array
    (30) var_array -> . empty
    (104) empty -> .

    L_S_BRACKET     shift and go to state 99
    SEMICOLON       reduce using rule 104 (empty -> .)

    vars_7                         shift and go to state 100
    var_array                      shift and go to state 101
    empty                          shift and go to state 102

state 81

    (9) main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .

    $end            reduce using rule 9 (main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON .)


state 82

    (11) body_2 -> estatuto . body_2
    (11) body_2 -> . estatuto body_2
    (12) body_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 82
    body_2                         shift and go to state 103
    empty                          shift and go to state 84
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 83

    (10) body -> vars estatuto body_2 .

    R_C_BRACKET     reduce using rule 10 (body -> vars estatuto body_2 .)
    RETURN          reduce using rule 10 (body -> vars estatuto body_2 .)


state 84

    (12) body_2 -> empty .
    (71) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 12 (body_2 -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (body_2 -> empty .)
    R_C_BRACKET     reduce using rule 12 (body_2 -> empty .)
    RETURN          reduce using rule 12 (body_2 -> empty .)
    ID              reduce using rule 71 (func_extra -> empty .)
    READ            reduce using rule 71 (func_extra -> empty .)
    WRITE           reduce using rule 71 (func_extra -> empty .)
    IF              reduce using rule 71 (func_extra -> empty .)
    FOR             reduce using rule 71 (func_extra -> empty .)
    WHILE           reduce using rule 71 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 71 (func_extra -> empty .) ]
  ! RETURN          [ reduce using rule 71 (func_extra -> empty .) ]


state 85

    (51) asigna -> variable EQUAL . exp SEMICOLON
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    variable                       shift and go to state 104
    exp                            shift and go to state 105
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 86

    (52) llamada -> ID LPAR . exp llamada_2 RPAR SEMICOLON
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 117
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 87

    (38) variable -> ID variable_2 .

    EQUAL           reduce using rule 38 (variable -> ID variable_2 .)
    TIMES           reduce using rule 38 (variable -> ID variable_2 .)
    DIVIDE          reduce using rule 38 (variable -> ID variable_2 .)
    PLUS            reduce using rule 38 (variable -> ID variable_2 .)
    MINUS           reduce using rule 38 (variable -> ID variable_2 .)
    LESS_EQUAL      reduce using rule 38 (variable -> ID variable_2 .)
    LESS            reduce using rule 38 (variable -> ID variable_2 .)
    GREATER_EQUAL   reduce using rule 38 (variable -> ID variable_2 .)
    GREATER         reduce using rule 38 (variable -> ID variable_2 .)
    COMPARE         reduce using rule 38 (variable -> ID variable_2 .)
    NOT_EQUAL       reduce using rule 38 (variable -> ID variable_2 .)
    AND             reduce using rule 38 (variable -> ID variable_2 .)
    OR              reduce using rule 38 (variable -> ID variable_2 .)
    SEMICOLON       reduce using rule 38 (variable -> ID variable_2 .)
    COMMA           reduce using rule 38 (variable -> ID variable_2 .)
    RPAR            reduce using rule 38 (variable -> ID variable_2 .)
    R_S_BRACKET     reduce using rule 38 (variable -> ID variable_2 .)
    TO              reduce using rule 38 (variable -> ID variable_2 .)


state 88

    (39) variable_2 -> L_S_BRACKET . exp R_S_BRACKET variable_3
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 118
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 89

    (40) variable_2 -> empty .

    EQUAL           reduce using rule 40 (variable_2 -> empty .)
    TIMES           reduce using rule 40 (variable_2 -> empty .)
    DIVIDE          reduce using rule 40 (variable_2 -> empty .)
    PLUS            reduce using rule 40 (variable_2 -> empty .)
    MINUS           reduce using rule 40 (variable_2 -> empty .)
    LESS_EQUAL      reduce using rule 40 (variable_2 -> empty .)
    LESS            reduce using rule 40 (variable_2 -> empty .)
    GREATER_EQUAL   reduce using rule 40 (variable_2 -> empty .)
    GREATER         reduce using rule 40 (variable_2 -> empty .)
    COMPARE         reduce using rule 40 (variable_2 -> empty .)
    NOT_EQUAL       reduce using rule 40 (variable_2 -> empty .)
    AND             reduce using rule 40 (variable_2 -> empty .)
    OR              reduce using rule 40 (variable_2 -> empty .)
    SEMICOLON       reduce using rule 40 (variable_2 -> empty .)
    COMMA           reduce using rule 40 (variable_2 -> empty .)
    RPAR            reduce using rule 40 (variable_2 -> empty .)
    R_S_BRACKET     reduce using rule 40 (variable_2 -> empty .)
    TO              reduce using rule 40 (variable_2 -> empty .)


state 90

    (55) read -> READ LPAR . variable RPAR SEMICOLON
    (38) variable -> . ID variable_2

    ID              shift and go to state 120

    variable                       shift and go to state 119

state 91

    (56) write -> WRITE LPAR . write_2 write_3 RPAR SEMICOLON
    (57) write_2 -> . exp
    (58) write_2 -> . CTE_S
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    CTE_S           shift and go to state 123
    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    write_2                        shift and go to state 121
    exp                            shift and go to state 122
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 92

    (61) if_1 -> IF LPAR . exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 124
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 93

    (65) for_l -> FOR LPAR . ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    ID              shift and go to state 125


state 94

    (68) while_l -> WHILE LPAR . exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 126
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 95

    (34) param -> tipo_simple param_2 . punto_param ID
    (37) punto_param -> . empty
    (104) empty -> .

    ID              reduce using rule 104 (empty -> .)

    punto_param                    shift and go to state 127
    empty                          shift and go to state 128

state 96

    (36) param_2 -> COMMA . param
    (34) param -> . tipo_simple param_2 punto_param ID
    (35) param -> . empty
    (13) tipo_simple -> . INT
    (14) tipo_simple -> . FLOAT
    (15) tipo_simple -> . CHAR
    (104) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    ID              reduce using rule 104 (empty -> .)

    param                          shift and go to state 129
    tipo_simple                    shift and go to state 76
    empty                          shift and go to state 78

state 97

    (102) function_2 -> tipo_simple ID LPAR param RPAR . L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    L_C_BRACKET     shift and go to state 130


state 98

    (103) function_2 -> VOID ID LPAR param RPAR . L_C_BRACKET body R_C_BRACKET

    L_C_BRACKET     shift and go to state 131


state 99

    (28) vars_7 -> L_S_BRACKET . CTE_I R_S_BRACKET var_mat

    CTE_I           shift and go to state 132


state 100

    (25) vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .

    SEMICOLON       reduce using rule 25 (vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7 .)


state 101

    (29) vars_7 -> var_array .

    SEMICOLON       reduce using rule 29 (vars_7 -> var_array .)


state 102

    (30) var_array -> empty .

    SEMICOLON       reduce using rule 30 (var_array -> empty .)


state 103

    (11) body_2 -> estatuto body_2 .

    R_C_BRACKET     reduce using rule 11 (body_2 -> estatuto body_2 .)
    RETURN          reduce using rule 11 (body_2 -> estatuto body_2 .)


state 104

    (96) f -> variable .

    TIMES           reduce using rule 96 (f -> variable .)
    DIVIDE          reduce using rule 96 (f -> variable .)
    PLUS            reduce using rule 96 (f -> variable .)
    MINUS           reduce using rule 96 (f -> variable .)
    LESS_EQUAL      reduce using rule 96 (f -> variable .)
    LESS            reduce using rule 96 (f -> variable .)
    GREATER_EQUAL   reduce using rule 96 (f -> variable .)
    GREATER         reduce using rule 96 (f -> variable .)
    COMPARE         reduce using rule 96 (f -> variable .)
    NOT_EQUAL       reduce using rule 96 (f -> variable .)
    AND             reduce using rule 96 (f -> variable .)
    OR              reduce using rule 96 (f -> variable .)
    SEMICOLON       reduce using rule 96 (f -> variable .)
    COMMA           reduce using rule 96 (f -> variable .)
    RPAR            reduce using rule 96 (f -> variable .)
    R_S_BRACKET     reduce using rule 96 (f -> variable .)
    TO              reduce using rule 96 (f -> variable .)


state 105

    (51) asigna -> variable EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 133


state 106

    (72) exp -> t_exp . exp_2
    (73) exp_2 -> . OR exp
    (74) exp_2 -> . empty
    (104) empty -> .

    OR              shift and go to state 135
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    exp_2                          shift and go to state 134
    empty                          shift and go to state 136

state 107

    (75) t_exp -> g_exp . t_exp_2
    (76) t_exp_2 -> . AND t_exp
    (77) t_exp_2 -> . empty
    (104) empty -> .

    AND             shift and go to state 138
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    t_exp_2                        shift and go to state 137
    empty                          shift and go to state 139

state 108

    (78) g_exp -> m_exp . g_exp_2
    (79) g_exp_2 -> . LESS_EQUAL g_exp_3
    (80) g_exp_2 -> . LESS g_exp_3
    (81) g_exp_2 -> . GREATER_EQUAL g_exp_3
    (82) g_exp_2 -> . GREATER g_exp_3
    (83) g_exp_2 -> . COMPARE g_exp_3
    (84) g_exp_2 -> . NOT_EQUAL g_exp_3
    (85) g_exp_2 -> . empty
    (104) empty -> .

    LESS_EQUAL      shift and go to state 141
    LESS            shift and go to state 142
    GREATER_EQUAL   shift and go to state 143
    GREATER         shift and go to state 144
    COMPARE         shift and go to state 145
    NOT_EQUAL       shift and go to state 146
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    g_exp_2                        shift and go to state 140
    empty                          shift and go to state 147

state 109

    (87) m_exp -> t . m_exp_2
    (88) m_exp_2 -> . PLUS m_exp
    (89) m_exp_2 -> . MINUS m_exp
    (90) m_exp_2 -> . empty
    (104) empty -> .

    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    LESS_EQUAL      reduce using rule 104 (empty -> .)
    LESS            reduce using rule 104 (empty -> .)
    GREATER_EQUAL   reduce using rule 104 (empty -> .)
    GREATER         reduce using rule 104 (empty -> .)
    COMPARE         reduce using rule 104 (empty -> .)
    NOT_EQUAL       reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    m_exp_2                        shift and go to state 148
    empty                          shift and go to state 151

state 110

    (91) t -> f . t_2
    (92) t_2 -> . TIMES t
    (93) t_2 -> . DIVIDE t
    (94) t_2 -> . empty
    (104) empty -> .

    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 154
    PLUS            reduce using rule 104 (empty -> .)
    MINUS           reduce using rule 104 (empty -> .)
    LESS_EQUAL      reduce using rule 104 (empty -> .)
    LESS            reduce using rule 104 (empty -> .)
    GREATER_EQUAL   reduce using rule 104 (empty -> .)
    GREATER         reduce using rule 104 (empty -> .)
    COMPARE         reduce using rule 104 (empty -> .)
    NOT_EQUAL       reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    t_2                            shift and go to state 152
    empty                          shift and go to state 155

state 111

    (95) f -> LPAR . m_exp RPAR
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    m_exp                          shift and go to state 156
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 112

    (97) f -> llamada .

    TIMES           reduce using rule 97 (f -> llamada .)
    DIVIDE          reduce using rule 97 (f -> llamada .)
    PLUS            reduce using rule 97 (f -> llamada .)
    MINUS           reduce using rule 97 (f -> llamada .)
    LESS_EQUAL      reduce using rule 97 (f -> llamada .)
    LESS            reduce using rule 97 (f -> llamada .)
    GREATER_EQUAL   reduce using rule 97 (f -> llamada .)
    GREATER         reduce using rule 97 (f -> llamada .)
    COMPARE         reduce using rule 97 (f -> llamada .)
    NOT_EQUAL       reduce using rule 97 (f -> llamada .)
    AND             reduce using rule 97 (f -> llamada .)
    OR              reduce using rule 97 (f -> llamada .)
    SEMICOLON       reduce using rule 97 (f -> llamada .)
    COMMA           reduce using rule 97 (f -> llamada .)
    RPAR            reduce using rule 97 (f -> llamada .)
    R_S_BRACKET     reduce using rule 97 (f -> llamada .)
    TO              reduce using rule 97 (f -> llamada .)


state 113

    (98) f -> f_2 .

    TIMES           reduce using rule 98 (f -> f_2 .)
    DIVIDE          reduce using rule 98 (f -> f_2 .)
    PLUS            reduce using rule 98 (f -> f_2 .)
    MINUS           reduce using rule 98 (f -> f_2 .)
    LESS_EQUAL      reduce using rule 98 (f -> f_2 .)
    LESS            reduce using rule 98 (f -> f_2 .)
    GREATER_EQUAL   reduce using rule 98 (f -> f_2 .)
    GREATER         reduce using rule 98 (f -> f_2 .)
    COMPARE         reduce using rule 98 (f -> f_2 .)
    NOT_EQUAL       reduce using rule 98 (f -> f_2 .)
    AND             reduce using rule 98 (f -> f_2 .)
    OR              reduce using rule 98 (f -> f_2 .)
    SEMICOLON       reduce using rule 98 (f -> f_2 .)
    COMMA           reduce using rule 98 (f -> f_2 .)
    RPAR            reduce using rule 98 (f -> f_2 .)
    R_S_BRACKET     reduce using rule 98 (f -> f_2 .)
    TO              reduce using rule 98 (f -> f_2 .)


state 114

    (38) variable -> ID . variable_2
    (52) llamada -> ID . LPAR exp llamada_2 RPAR SEMICOLON
    (39) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (40) variable_2 -> . empty
    (104) empty -> .

    LPAR            shift and go to state 86
    L_S_BRACKET     shift and go to state 88
    TIMES           reduce using rule 104 (empty -> .)
    DIVIDE          reduce using rule 104 (empty -> .)
    PLUS            reduce using rule 104 (empty -> .)
    MINUS           reduce using rule 104 (empty -> .)
    LESS_EQUAL      reduce using rule 104 (empty -> .)
    LESS            reduce using rule 104 (empty -> .)
    GREATER_EQUAL   reduce using rule 104 (empty -> .)
    GREATER         reduce using rule 104 (empty -> .)
    COMPARE         reduce using rule 104 (empty -> .)
    NOT_EQUAL       reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    variable_2                     shift and go to state 87
    empty                          shift and go to state 89

state 115

    (99) f_2 -> CTE_I .

    TIMES           reduce using rule 99 (f_2 -> CTE_I .)
    DIVIDE          reduce using rule 99 (f_2 -> CTE_I .)
    PLUS            reduce using rule 99 (f_2 -> CTE_I .)
    MINUS           reduce using rule 99 (f_2 -> CTE_I .)
    LESS_EQUAL      reduce using rule 99 (f_2 -> CTE_I .)
    LESS            reduce using rule 99 (f_2 -> CTE_I .)
    GREATER_EQUAL   reduce using rule 99 (f_2 -> CTE_I .)
    GREATER         reduce using rule 99 (f_2 -> CTE_I .)
    COMPARE         reduce using rule 99 (f_2 -> CTE_I .)
    NOT_EQUAL       reduce using rule 99 (f_2 -> CTE_I .)
    AND             reduce using rule 99 (f_2 -> CTE_I .)
    OR              reduce using rule 99 (f_2 -> CTE_I .)
    SEMICOLON       reduce using rule 99 (f_2 -> CTE_I .)
    COMMA           reduce using rule 99 (f_2 -> CTE_I .)
    RPAR            reduce using rule 99 (f_2 -> CTE_I .)
    R_S_BRACKET     reduce using rule 99 (f_2 -> CTE_I .)
    TO              reduce using rule 99 (f_2 -> CTE_I .)


state 116

    (100) f_2 -> CTE_F .

    TIMES           reduce using rule 100 (f_2 -> CTE_F .)
    DIVIDE          reduce using rule 100 (f_2 -> CTE_F .)
    PLUS            reduce using rule 100 (f_2 -> CTE_F .)
    MINUS           reduce using rule 100 (f_2 -> CTE_F .)
    LESS_EQUAL      reduce using rule 100 (f_2 -> CTE_F .)
    LESS            reduce using rule 100 (f_2 -> CTE_F .)
    GREATER_EQUAL   reduce using rule 100 (f_2 -> CTE_F .)
    GREATER         reduce using rule 100 (f_2 -> CTE_F .)
    COMPARE         reduce using rule 100 (f_2 -> CTE_F .)
    NOT_EQUAL       reduce using rule 100 (f_2 -> CTE_F .)
    AND             reduce using rule 100 (f_2 -> CTE_F .)
    OR              reduce using rule 100 (f_2 -> CTE_F .)
    SEMICOLON       reduce using rule 100 (f_2 -> CTE_F .)
    COMMA           reduce using rule 100 (f_2 -> CTE_F .)
    RPAR            reduce using rule 100 (f_2 -> CTE_F .)
    R_S_BRACKET     reduce using rule 100 (f_2 -> CTE_F .)
    TO              reduce using rule 100 (f_2 -> CTE_F .)


state 117

    (52) llamada -> ID LPAR exp . llamada_2 RPAR SEMICOLON
    (53) llamada_2 -> . COMMA exp llamada_2
    (54) llamada_2 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 158
    RPAR            reduce using rule 104 (empty -> .)

    llamada_2                      shift and go to state 157
    empty                          shift and go to state 159

state 118

    (39) variable_2 -> L_S_BRACKET exp . R_S_BRACKET variable_3

    R_S_BRACKET     shift and go to state 160


state 119

    (55) read -> READ LPAR variable . RPAR SEMICOLON

    RPAR            shift and go to state 161


state 120

    (38) variable -> ID . variable_2
    (39) variable_2 -> . L_S_BRACKET exp R_S_BRACKET variable_3
    (40) variable_2 -> . empty
    (104) empty -> .

    L_S_BRACKET     shift and go to state 88
    RPAR            reduce using rule 104 (empty -> .)

    variable_2                     shift and go to state 87
    empty                          shift and go to state 89

state 121

    (56) write -> WRITE LPAR write_2 . write_3 RPAR SEMICOLON
    (59) write_3 -> . COMMA write_2 write_3
    (60) write_3 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 163
    RPAR            reduce using rule 104 (empty -> .)

    write_3                        shift and go to state 162
    empty                          shift and go to state 164

state 122

    (57) write_2 -> exp .

    COMMA           reduce using rule 57 (write_2 -> exp .)
    RPAR            reduce using rule 57 (write_2 -> exp .)


state 123

    (58) write_2 -> CTE_S .

    COMMA           reduce using rule 58 (write_2 -> CTE_S .)
    RPAR            reduce using rule 58 (write_2 -> CTE_S .)


state 124

    (61) if_1 -> IF LPAR exp . RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    RPAR            shift and go to state 165


state 125

    (65) for_l -> FOR LPAR ID . RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 166


state 126

    (68) while_l -> WHILE LPAR exp . RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 167


state 127

    (34) param -> tipo_simple param_2 punto_param . ID

    ID              shift and go to state 168


state 128

    (37) punto_param -> empty .

    ID              reduce using rule 37 (punto_param -> empty .)


state 129

    (36) param_2 -> COMMA param .

    ID              reduce using rule 36 (param_2 -> COMMA param .)


state 130

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET . body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET
    (10) body -> . vars estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 169
    vars                           shift and go to state 54

state 131

    (103) function_2 -> VOID ID LPAR param RPAR L_C_BRACKET . body R_C_BRACKET
    (10) body -> . vars estatuto body_2
    (17) vars -> . VAR vars_2 SEMICOLON vars_8

    VAR             shift and go to state 11

    body                           shift and go to state 170
    vars                           shift and go to state 54

state 132

    (28) vars_7 -> L_S_BRACKET CTE_I . R_S_BRACKET var_mat

    R_S_BRACKET     shift and go to state 171


state 133

    (51) asigna -> variable EQUAL exp SEMICOLON .

    ID              reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    READ            reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    IF              reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    FOR             reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    R_C_BRACKET     reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 51 (asigna -> variable EQUAL exp SEMICOLON .)


state 134

    (72) exp -> t_exp exp_2 .

    SEMICOLON       reduce using rule 72 (exp -> t_exp exp_2 .)
    COMMA           reduce using rule 72 (exp -> t_exp exp_2 .)
    RPAR            reduce using rule 72 (exp -> t_exp exp_2 .)
    R_S_BRACKET     reduce using rule 72 (exp -> t_exp exp_2 .)
    TO              reduce using rule 72 (exp -> t_exp exp_2 .)


state 135

    (73) exp_2 -> OR . exp
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 172
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 136

    (74) exp_2 -> empty .

    SEMICOLON       reduce using rule 74 (exp_2 -> empty .)
    COMMA           reduce using rule 74 (exp_2 -> empty .)
    RPAR            reduce using rule 74 (exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 74 (exp_2 -> empty .)
    TO              reduce using rule 74 (exp_2 -> empty .)


state 137

    (75) t_exp -> g_exp t_exp_2 .

    OR              reduce using rule 75 (t_exp -> g_exp t_exp_2 .)
    SEMICOLON       reduce using rule 75 (t_exp -> g_exp t_exp_2 .)
    COMMA           reduce using rule 75 (t_exp -> g_exp t_exp_2 .)
    RPAR            reduce using rule 75 (t_exp -> g_exp t_exp_2 .)
    R_S_BRACKET     reduce using rule 75 (t_exp -> g_exp t_exp_2 .)
    TO              reduce using rule 75 (t_exp -> g_exp t_exp_2 .)


state 138

    (76) t_exp_2 -> AND . t_exp
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    t_exp                          shift and go to state 173
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 139

    (77) t_exp_2 -> empty .

    OR              reduce using rule 77 (t_exp_2 -> empty .)
    SEMICOLON       reduce using rule 77 (t_exp_2 -> empty .)
    COMMA           reduce using rule 77 (t_exp_2 -> empty .)
    RPAR            reduce using rule 77 (t_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 77 (t_exp_2 -> empty .)
    TO              reduce using rule 77 (t_exp_2 -> empty .)


state 140

    (78) g_exp -> m_exp g_exp_2 .

    AND             reduce using rule 78 (g_exp -> m_exp g_exp_2 .)
    OR              reduce using rule 78 (g_exp -> m_exp g_exp_2 .)
    SEMICOLON       reduce using rule 78 (g_exp -> m_exp g_exp_2 .)
    COMMA           reduce using rule 78 (g_exp -> m_exp g_exp_2 .)
    RPAR            reduce using rule 78 (g_exp -> m_exp g_exp_2 .)
    R_S_BRACKET     reduce using rule 78 (g_exp -> m_exp g_exp_2 .)
    TO              reduce using rule 78 (g_exp -> m_exp g_exp_2 .)


state 141

    (79) g_exp_2 -> LESS_EQUAL . g_exp_3
    (86) g_exp_3 -> . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    g_exp_3                        shift and go to state 174
    m_exp                          shift and go to state 175
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 142

    (80) g_exp_2 -> LESS . g_exp_3
    (86) g_exp_3 -> . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    g_exp_3                        shift and go to state 176
    m_exp                          shift and go to state 175
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 143

    (81) g_exp_2 -> GREATER_EQUAL . g_exp_3
    (86) g_exp_3 -> . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    g_exp_3                        shift and go to state 177
    m_exp                          shift and go to state 175
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 144

    (82) g_exp_2 -> GREATER . g_exp_3
    (86) g_exp_3 -> . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    g_exp_3                        shift and go to state 178
    m_exp                          shift and go to state 175
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 145

    (83) g_exp_2 -> COMPARE . g_exp_3
    (86) g_exp_3 -> . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    g_exp_3                        shift and go to state 179
    m_exp                          shift and go to state 175
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 146

    (84) g_exp_2 -> NOT_EQUAL . g_exp_3
    (86) g_exp_3 -> . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    g_exp_3                        shift and go to state 180
    m_exp                          shift and go to state 175
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 147

    (85) g_exp_2 -> empty .

    AND             reduce using rule 85 (g_exp_2 -> empty .)
    OR              reduce using rule 85 (g_exp_2 -> empty .)
    SEMICOLON       reduce using rule 85 (g_exp_2 -> empty .)
    COMMA           reduce using rule 85 (g_exp_2 -> empty .)
    RPAR            reduce using rule 85 (g_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 85 (g_exp_2 -> empty .)
    TO              reduce using rule 85 (g_exp_2 -> empty .)


state 148

    (87) m_exp -> t m_exp_2 .

    LESS_EQUAL      reduce using rule 87 (m_exp -> t m_exp_2 .)
    LESS            reduce using rule 87 (m_exp -> t m_exp_2 .)
    GREATER_EQUAL   reduce using rule 87 (m_exp -> t m_exp_2 .)
    GREATER         reduce using rule 87 (m_exp -> t m_exp_2 .)
    COMPARE         reduce using rule 87 (m_exp -> t m_exp_2 .)
    NOT_EQUAL       reduce using rule 87 (m_exp -> t m_exp_2 .)
    AND             reduce using rule 87 (m_exp -> t m_exp_2 .)
    OR              reduce using rule 87 (m_exp -> t m_exp_2 .)
    SEMICOLON       reduce using rule 87 (m_exp -> t m_exp_2 .)
    COMMA           reduce using rule 87 (m_exp -> t m_exp_2 .)
    RPAR            reduce using rule 87 (m_exp -> t m_exp_2 .)
    R_S_BRACKET     reduce using rule 87 (m_exp -> t m_exp_2 .)
    TO              reduce using rule 87 (m_exp -> t m_exp_2 .)


state 149

    (88) m_exp_2 -> PLUS . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    m_exp                          shift and go to state 181
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 150

    (89) m_exp_2 -> MINUS . m_exp
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    m_exp                          shift and go to state 182
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 151

    (90) m_exp_2 -> empty .

    LESS_EQUAL      reduce using rule 90 (m_exp_2 -> empty .)
    LESS            reduce using rule 90 (m_exp_2 -> empty .)
    GREATER_EQUAL   reduce using rule 90 (m_exp_2 -> empty .)
    GREATER         reduce using rule 90 (m_exp_2 -> empty .)
    COMPARE         reduce using rule 90 (m_exp_2 -> empty .)
    NOT_EQUAL       reduce using rule 90 (m_exp_2 -> empty .)
    AND             reduce using rule 90 (m_exp_2 -> empty .)
    OR              reduce using rule 90 (m_exp_2 -> empty .)
    SEMICOLON       reduce using rule 90 (m_exp_2 -> empty .)
    COMMA           reduce using rule 90 (m_exp_2 -> empty .)
    RPAR            reduce using rule 90 (m_exp_2 -> empty .)
    R_S_BRACKET     reduce using rule 90 (m_exp_2 -> empty .)
    TO              reduce using rule 90 (m_exp_2 -> empty .)


state 152

    (91) t -> f t_2 .

    PLUS            reduce using rule 91 (t -> f t_2 .)
    MINUS           reduce using rule 91 (t -> f t_2 .)
    LESS_EQUAL      reduce using rule 91 (t -> f t_2 .)
    LESS            reduce using rule 91 (t -> f t_2 .)
    GREATER_EQUAL   reduce using rule 91 (t -> f t_2 .)
    GREATER         reduce using rule 91 (t -> f t_2 .)
    COMPARE         reduce using rule 91 (t -> f t_2 .)
    NOT_EQUAL       reduce using rule 91 (t -> f t_2 .)
    AND             reduce using rule 91 (t -> f t_2 .)
    OR              reduce using rule 91 (t -> f t_2 .)
    SEMICOLON       reduce using rule 91 (t -> f t_2 .)
    COMMA           reduce using rule 91 (t -> f t_2 .)
    RPAR            reduce using rule 91 (t -> f t_2 .)
    R_S_BRACKET     reduce using rule 91 (t -> f t_2 .)
    TO              reduce using rule 91 (t -> f t_2 .)


state 153

    (92) t_2 -> TIMES . t
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    t                              shift and go to state 183
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 154

    (93) t_2 -> DIVIDE . t
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    t                              shift and go to state 184
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 155

    (94) t_2 -> empty .

    PLUS            reduce using rule 94 (t_2 -> empty .)
    MINUS           reduce using rule 94 (t_2 -> empty .)
    LESS_EQUAL      reduce using rule 94 (t_2 -> empty .)
    LESS            reduce using rule 94 (t_2 -> empty .)
    GREATER_EQUAL   reduce using rule 94 (t_2 -> empty .)
    GREATER         reduce using rule 94 (t_2 -> empty .)
    COMPARE         reduce using rule 94 (t_2 -> empty .)
    NOT_EQUAL       reduce using rule 94 (t_2 -> empty .)
    AND             reduce using rule 94 (t_2 -> empty .)
    OR              reduce using rule 94 (t_2 -> empty .)
    SEMICOLON       reduce using rule 94 (t_2 -> empty .)
    COMMA           reduce using rule 94 (t_2 -> empty .)
    RPAR            reduce using rule 94 (t_2 -> empty .)
    R_S_BRACKET     reduce using rule 94 (t_2 -> empty .)
    TO              reduce using rule 94 (t_2 -> empty .)


state 156

    (95) f -> LPAR m_exp . RPAR

    RPAR            shift and go to state 185


state 157

    (52) llamada -> ID LPAR exp llamada_2 . RPAR SEMICOLON

    RPAR            shift and go to state 186


state 158

    (53) llamada_2 -> COMMA . exp llamada_2
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 187
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 159

    (54) llamada_2 -> empty .

    RPAR            reduce using rule 54 (llamada_2 -> empty .)


state 160

    (39) variable_2 -> L_S_BRACKET exp R_S_BRACKET . variable_3
    (41) variable_3 -> . L_S_BRACKET exp R_S_BRACKET
    (42) variable_3 -> . empty
    (104) empty -> .

    L_S_BRACKET     shift and go to state 188
    EQUAL           reduce using rule 104 (empty -> .)
    TIMES           reduce using rule 104 (empty -> .)
    DIVIDE          reduce using rule 104 (empty -> .)
    PLUS            reduce using rule 104 (empty -> .)
    MINUS           reduce using rule 104 (empty -> .)
    LESS_EQUAL      reduce using rule 104 (empty -> .)
    LESS            reduce using rule 104 (empty -> .)
    GREATER_EQUAL   reduce using rule 104 (empty -> .)
    GREATER         reduce using rule 104 (empty -> .)
    COMPARE         reduce using rule 104 (empty -> .)
    NOT_EQUAL       reduce using rule 104 (empty -> .)
    AND             reduce using rule 104 (empty -> .)
    OR              reduce using rule 104 (empty -> .)
    SEMICOLON       reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RPAR            reduce using rule 104 (empty -> .)
    R_S_BRACKET     reduce using rule 104 (empty -> .)
    TO              reduce using rule 104 (empty -> .)

    variable_3                     shift and go to state 189
    empty                          shift and go to state 190

state 161

    (55) read -> READ LPAR variable RPAR . SEMICOLON

    SEMICOLON       shift and go to state 191


state 162

    (56) write -> WRITE LPAR write_2 write_3 . RPAR SEMICOLON

    RPAR            shift and go to state 192


state 163

    (59) write_3 -> COMMA . write_2 write_3
    (57) write_2 -> . exp
    (58) write_2 -> . CTE_S
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    CTE_S           shift and go to state 123
    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    write_2                        shift and go to state 193
    exp                            shift and go to state 122
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 164

    (60) write_3 -> empty .

    RPAR            reduce using rule 60 (write_3 -> empty .)


state 165

    (61) if_1 -> IF LPAR exp RPAR . L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON

    L_C_BRACKET     shift and go to state 194


state 166

    (65) for_l -> FOR LPAR ID RPAR . EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    EQUAL           shift and go to state 195


state 167

    (68) while_l -> WHILE LPAR exp RPAR . L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 196


state 168

    (34) param -> tipo_simple param_2 punto_param ID .

    RPAR            reduce using rule 34 (param -> tipo_simple param_2 punto_param ID .)
    ID              reduce using rule 34 (param -> tipo_simple param_2 punto_param ID .)


state 169

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body . RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET

    RETURN          shift and go to state 197


state 170

    (103) function_2 -> VOID ID LPAR param RPAR L_C_BRACKET body . R_C_BRACKET

    R_C_BRACKET     shift and go to state 198


state 171

    (28) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET . var_mat
    (31) var_mat -> . empty
    (104) empty -> .

    SEMICOLON       reduce using rule 104 (empty -> .)

    var_mat                        shift and go to state 199
    empty                          shift and go to state 200

state 172

    (73) exp_2 -> OR exp .

    SEMICOLON       reduce using rule 73 (exp_2 -> OR exp .)
    COMMA           reduce using rule 73 (exp_2 -> OR exp .)
    RPAR            reduce using rule 73 (exp_2 -> OR exp .)
    R_S_BRACKET     reduce using rule 73 (exp_2 -> OR exp .)
    TO              reduce using rule 73 (exp_2 -> OR exp .)


state 173

    (76) t_exp_2 -> AND t_exp .

    OR              reduce using rule 76 (t_exp_2 -> AND t_exp .)
    SEMICOLON       reduce using rule 76 (t_exp_2 -> AND t_exp .)
    COMMA           reduce using rule 76 (t_exp_2 -> AND t_exp .)
    RPAR            reduce using rule 76 (t_exp_2 -> AND t_exp .)
    R_S_BRACKET     reduce using rule 76 (t_exp_2 -> AND t_exp .)
    TO              reduce using rule 76 (t_exp_2 -> AND t_exp .)


state 174

    (79) g_exp_2 -> LESS_EQUAL g_exp_3 .

    AND             reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    OR              reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    SEMICOLON       reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    COMMA           reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    RPAR            reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    R_S_BRACKET     reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)
    TO              reduce using rule 79 (g_exp_2 -> LESS_EQUAL g_exp_3 .)


state 175

    (86) g_exp_3 -> m_exp .

    AND             reduce using rule 86 (g_exp_3 -> m_exp .)
    OR              reduce using rule 86 (g_exp_3 -> m_exp .)
    SEMICOLON       reduce using rule 86 (g_exp_3 -> m_exp .)
    COMMA           reduce using rule 86 (g_exp_3 -> m_exp .)
    RPAR            reduce using rule 86 (g_exp_3 -> m_exp .)
    R_S_BRACKET     reduce using rule 86 (g_exp_3 -> m_exp .)
    TO              reduce using rule 86 (g_exp_3 -> m_exp .)


state 176

    (80) g_exp_2 -> LESS g_exp_3 .

    AND             reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)
    OR              reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)
    SEMICOLON       reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)
    COMMA           reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)
    RPAR            reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)
    R_S_BRACKET     reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)
    TO              reduce using rule 80 (g_exp_2 -> LESS g_exp_3 .)


state 177

    (81) g_exp_2 -> GREATER_EQUAL g_exp_3 .

    AND             reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    OR              reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    SEMICOLON       reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    COMMA           reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    RPAR            reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    R_S_BRACKET     reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)
    TO              reduce using rule 81 (g_exp_2 -> GREATER_EQUAL g_exp_3 .)


state 178

    (82) g_exp_2 -> GREATER g_exp_3 .

    AND             reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)
    OR              reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)
    SEMICOLON       reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)
    COMMA           reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)
    RPAR            reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)
    R_S_BRACKET     reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)
    TO              reduce using rule 82 (g_exp_2 -> GREATER g_exp_3 .)


state 179

    (83) g_exp_2 -> COMPARE g_exp_3 .

    AND             reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)
    OR              reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)
    SEMICOLON       reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)
    COMMA           reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)
    RPAR            reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)
    R_S_BRACKET     reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)
    TO              reduce using rule 83 (g_exp_2 -> COMPARE g_exp_3 .)


state 180

    (84) g_exp_2 -> NOT_EQUAL g_exp_3 .

    AND             reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    OR              reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    SEMICOLON       reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    COMMA           reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    RPAR            reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    R_S_BRACKET     reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)
    TO              reduce using rule 84 (g_exp_2 -> NOT_EQUAL g_exp_3 .)


state 181

    (88) m_exp_2 -> PLUS m_exp .

    LESS_EQUAL      reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    LESS            reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    GREATER_EQUAL   reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    GREATER         reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    COMPARE         reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    NOT_EQUAL       reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    AND             reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    OR              reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    SEMICOLON       reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    COMMA           reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    RPAR            reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    R_S_BRACKET     reduce using rule 88 (m_exp_2 -> PLUS m_exp .)
    TO              reduce using rule 88 (m_exp_2 -> PLUS m_exp .)


state 182

    (89) m_exp_2 -> MINUS m_exp .

    LESS_EQUAL      reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    LESS            reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    GREATER_EQUAL   reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    GREATER         reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    COMPARE         reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    NOT_EQUAL       reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    AND             reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    OR              reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    SEMICOLON       reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    COMMA           reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    RPAR            reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    R_S_BRACKET     reduce using rule 89 (m_exp_2 -> MINUS m_exp .)
    TO              reduce using rule 89 (m_exp_2 -> MINUS m_exp .)


state 183

    (92) t_2 -> TIMES t .

    PLUS            reduce using rule 92 (t_2 -> TIMES t .)
    MINUS           reduce using rule 92 (t_2 -> TIMES t .)
    LESS_EQUAL      reduce using rule 92 (t_2 -> TIMES t .)
    LESS            reduce using rule 92 (t_2 -> TIMES t .)
    GREATER_EQUAL   reduce using rule 92 (t_2 -> TIMES t .)
    GREATER         reduce using rule 92 (t_2 -> TIMES t .)
    COMPARE         reduce using rule 92 (t_2 -> TIMES t .)
    NOT_EQUAL       reduce using rule 92 (t_2 -> TIMES t .)
    AND             reduce using rule 92 (t_2 -> TIMES t .)
    OR              reduce using rule 92 (t_2 -> TIMES t .)
    SEMICOLON       reduce using rule 92 (t_2 -> TIMES t .)
    COMMA           reduce using rule 92 (t_2 -> TIMES t .)
    RPAR            reduce using rule 92 (t_2 -> TIMES t .)
    R_S_BRACKET     reduce using rule 92 (t_2 -> TIMES t .)
    TO              reduce using rule 92 (t_2 -> TIMES t .)


state 184

    (93) t_2 -> DIVIDE t .

    PLUS            reduce using rule 93 (t_2 -> DIVIDE t .)
    MINUS           reduce using rule 93 (t_2 -> DIVIDE t .)
    LESS_EQUAL      reduce using rule 93 (t_2 -> DIVIDE t .)
    LESS            reduce using rule 93 (t_2 -> DIVIDE t .)
    GREATER_EQUAL   reduce using rule 93 (t_2 -> DIVIDE t .)
    GREATER         reduce using rule 93 (t_2 -> DIVIDE t .)
    COMPARE         reduce using rule 93 (t_2 -> DIVIDE t .)
    NOT_EQUAL       reduce using rule 93 (t_2 -> DIVIDE t .)
    AND             reduce using rule 93 (t_2 -> DIVIDE t .)
    OR              reduce using rule 93 (t_2 -> DIVIDE t .)
    SEMICOLON       reduce using rule 93 (t_2 -> DIVIDE t .)
    COMMA           reduce using rule 93 (t_2 -> DIVIDE t .)
    RPAR            reduce using rule 93 (t_2 -> DIVIDE t .)
    R_S_BRACKET     reduce using rule 93 (t_2 -> DIVIDE t .)
    TO              reduce using rule 93 (t_2 -> DIVIDE t .)


state 185

    (95) f -> LPAR m_exp RPAR .

    TIMES           reduce using rule 95 (f -> LPAR m_exp RPAR .)
    DIVIDE          reduce using rule 95 (f -> LPAR m_exp RPAR .)
    PLUS            reduce using rule 95 (f -> LPAR m_exp RPAR .)
    MINUS           reduce using rule 95 (f -> LPAR m_exp RPAR .)
    LESS_EQUAL      reduce using rule 95 (f -> LPAR m_exp RPAR .)
    LESS            reduce using rule 95 (f -> LPAR m_exp RPAR .)
    GREATER_EQUAL   reduce using rule 95 (f -> LPAR m_exp RPAR .)
    GREATER         reduce using rule 95 (f -> LPAR m_exp RPAR .)
    COMPARE         reduce using rule 95 (f -> LPAR m_exp RPAR .)
    NOT_EQUAL       reduce using rule 95 (f -> LPAR m_exp RPAR .)
    AND             reduce using rule 95 (f -> LPAR m_exp RPAR .)
    OR              reduce using rule 95 (f -> LPAR m_exp RPAR .)
    SEMICOLON       reduce using rule 95 (f -> LPAR m_exp RPAR .)
    COMMA           reduce using rule 95 (f -> LPAR m_exp RPAR .)
    RPAR            reduce using rule 95 (f -> LPAR m_exp RPAR .)
    R_S_BRACKET     reduce using rule 95 (f -> LPAR m_exp RPAR .)
    TO              reduce using rule 95 (f -> LPAR m_exp RPAR .)


state 186

    (52) llamada -> ID LPAR exp llamada_2 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 201


state 187

    (53) llamada_2 -> COMMA exp . llamada_2
    (53) llamada_2 -> . COMMA exp llamada_2
    (54) llamada_2 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 158
    RPAR            reduce using rule 104 (empty -> .)

    llamada_2                      shift and go to state 202
    empty                          shift and go to state 159

state 188

    (41) variable_3 -> L_S_BRACKET . exp R_S_BRACKET
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 203
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 189

    (39) variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .

    EQUAL           reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TIMES           reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    DIVIDE          reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    PLUS            reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    MINUS           reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS_EQUAL      reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    LESS            reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER_EQUAL   reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    GREATER         reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMPARE         reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    NOT_EQUAL       reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    AND             reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    OR              reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    SEMICOLON       reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    COMMA           reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    RPAR            reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    R_S_BRACKET     reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)
    TO              reduce using rule 39 (variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3 .)


state 190

    (42) variable_3 -> empty .

    EQUAL           reduce using rule 42 (variable_3 -> empty .)
    TIMES           reduce using rule 42 (variable_3 -> empty .)
    DIVIDE          reduce using rule 42 (variable_3 -> empty .)
    PLUS            reduce using rule 42 (variable_3 -> empty .)
    MINUS           reduce using rule 42 (variable_3 -> empty .)
    LESS_EQUAL      reduce using rule 42 (variable_3 -> empty .)
    LESS            reduce using rule 42 (variable_3 -> empty .)
    GREATER_EQUAL   reduce using rule 42 (variable_3 -> empty .)
    GREATER         reduce using rule 42 (variable_3 -> empty .)
    COMPARE         reduce using rule 42 (variable_3 -> empty .)
    NOT_EQUAL       reduce using rule 42 (variable_3 -> empty .)
    AND             reduce using rule 42 (variable_3 -> empty .)
    OR              reduce using rule 42 (variable_3 -> empty .)
    SEMICOLON       reduce using rule 42 (variable_3 -> empty .)
    COMMA           reduce using rule 42 (variable_3 -> empty .)
    RPAR            reduce using rule 42 (variable_3 -> empty .)
    R_S_BRACKET     reduce using rule 42 (variable_3 -> empty .)
    TO              reduce using rule 42 (variable_3 -> empty .)


state 191

    (55) read -> READ LPAR variable RPAR SEMICOLON .

    ID              reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    READ            reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    WRITE           reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    IF              reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    FOR             reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    WHILE           reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)
    RETURN          reduce using rule 55 (read -> READ LPAR variable RPAR SEMICOLON .)


state 192

    (56) write -> WRITE LPAR write_2 write_3 RPAR . SEMICOLON

    SEMICOLON       shift and go to state 204


state 193

    (59) write_3 -> COMMA write_2 . write_3
    (59) write_3 -> . COMMA write_2 write_3
    (60) write_3 -> . empty
    (104) empty -> .

    COMMA           shift and go to state 163
    RPAR            reduce using rule 104 (empty -> .)

    write_3                        shift and go to state 205
    empty                          shift and go to state 164

state 194

    (61) if_1 -> IF LPAR exp RPAR L_C_BRACKET . estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2
    (104) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74
    R_C_BRACKET     reduce using rule 104 (empty -> .)

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 206
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68
    empty                          shift and go to state 75

state 195

    (65) for_l -> FOR LPAR ID RPAR EQUAL . exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 207
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 196

    (68) while_l -> WHILE LPAR exp RPAR L_C_BRACKET . estatuto while_l_2 R_C_BRACKET SEMICOLON
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2
    (104) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74
    R_C_BRACKET     reduce using rule 104 (empty -> .)

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 208
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68
    empty                          shift and go to state 75

state 197

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN . LPAR exp RPAR SEMICOLON R_C_BRACKET

    LPAR            shift and go to state 209


state 198

    (103) function_2 -> VOID ID LPAR param RPAR L_C_BRACKET body R_C_BRACKET .

    SEMICOLON       reduce using rule 103 (function_2 -> VOID ID LPAR param RPAR L_C_BRACKET body R_C_BRACKET .)


state 199

    (28) vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .

    SEMICOLON       reduce using rule 28 (vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat .)


state 200

    (31) var_mat -> empty .

    SEMICOLON       reduce using rule 31 (var_mat -> empty .)


state 201

    (52) llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .

    ID              reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    READ            reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WRITE           reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    IF              reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    FOR             reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    WHILE           reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RETURN          reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TIMES           reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    DIVIDE          reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    PLUS            reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    MINUS           reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS_EQUAL      reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    LESS            reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER_EQUAL   reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    GREATER         reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMPARE         reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    NOT_EQUAL       reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    AND             reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    OR              reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    SEMICOLON       reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    COMMA           reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    RPAR            reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    R_S_BRACKET     reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)
    TO              reduce using rule 52 (llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON .)


state 202

    (53) llamada_2 -> COMMA exp llamada_2 .

    RPAR            reduce using rule 53 (llamada_2 -> COMMA exp llamada_2 .)


state 203

    (41) variable_3 -> L_S_BRACKET exp . R_S_BRACKET

    R_S_BRACKET     shift and go to state 210


state 204

    (56) write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .

    ID              reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    READ            reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WRITE           reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    IF              reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    FOR             reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    WHILE           reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    R_C_BRACKET     reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)
    RETURN          reduce using rule 56 (write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON .)


state 205

    (59) write_3 -> COMMA write_2 write_3 .

    RPAR            reduce using rule 59 (write_3 -> COMMA write_2 write_3 .)


state 206

    (61) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto . if_2 R_C_BRACKET if_3 SEMICOLON
    (62) if_2 -> . estatuto if_2
    (63) if_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 211
    if_2                           shift and go to state 212
    empty                          shift and go to state 213
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 207

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp . TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    TO              shift and go to state 214


state 208

    (68) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto . while_l_2 R_C_BRACKET SEMICOLON
    (69) while_l_2 -> . estatuto while_l_2
    (70) while_l_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 215
    while_l_2                      shift and go to state 216
    empty                          shift and go to state 217
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 209

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR . exp RPAR SEMICOLON R_C_BRACKET
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 218
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 210

    (41) variable_3 -> L_S_BRACKET exp R_S_BRACKET .

    EQUAL           reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TIMES           reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    DIVIDE          reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    PLUS            reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    MINUS           reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    LESS            reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    GREATER         reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMPARE         reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    NOT_EQUAL       reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    AND             reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    OR              reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    SEMICOLON       reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    COMMA           reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    RPAR            reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)
    TO              reduce using rule 41 (variable_3 -> L_S_BRACKET exp R_S_BRACKET .)


state 211

    (62) if_2 -> estatuto . if_2
    (62) if_2 -> . estatuto if_2
    (63) if_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 211
    if_2                           shift and go to state 219
    empty                          shift and go to state 213
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 212

    (61) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 . R_C_BRACKET if_3 SEMICOLON

    R_C_BRACKET     shift and go to state 220


state 213

    (63) if_2 -> empty .
    (71) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 63 (if_2 -> empty .)
    R_C_BRACKET     reduce using rule 63 (if_2 -> empty .)
    ID              reduce using rule 71 (func_extra -> empty .)
    READ            reduce using rule 71 (func_extra -> empty .)
    WRITE           reduce using rule 71 (func_extra -> empty .)
    IF              reduce using rule 71 (func_extra -> empty .)
    FOR             reduce using rule 71 (func_extra -> empty .)
    WHILE           reduce using rule 71 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 71 (func_extra -> empty .) ]


state 214

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO . exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (72) exp -> . t_exp exp_2
    (75) t_exp -> . g_exp t_exp_2
    (78) g_exp -> . m_exp g_exp_2
    (87) m_exp -> . t m_exp_2
    (91) t -> . f t_2
    (95) f -> . LPAR m_exp RPAR
    (96) f -> . variable
    (97) f -> . llamada
    (98) f -> . f_2
    (38) variable -> . ID variable_2
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (99) f_2 -> . CTE_I
    (100) f_2 -> . CTE_F

    LPAR            shift and go to state 111
    ID              shift and go to state 114
    CTE_I           shift and go to state 115
    CTE_F           shift and go to state 116

    exp                            shift and go to state 221
    t_exp                          shift and go to state 106
    g_exp                          shift and go to state 107
    m_exp                          shift and go to state 108
    t                              shift and go to state 109
    f                              shift and go to state 110
    variable                       shift and go to state 104
    llamada                        shift and go to state 112
    f_2                            shift and go to state 113

state 215

    (69) while_l_2 -> estatuto . while_l_2
    (69) while_l_2 -> . estatuto while_l_2
    (70) while_l_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 215
    while_l_2                      shift and go to state 222
    empty                          shift and go to state 217
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 216

    (68) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 223


state 217

    (70) while_l_2 -> empty .
    (71) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 70 (while_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 70 (while_l_2 -> empty .)
    ID              reduce using rule 71 (func_extra -> empty .)
    READ            reduce using rule 71 (func_extra -> empty .)
    WRITE           reduce using rule 71 (func_extra -> empty .)
    IF              reduce using rule 71 (func_extra -> empty .)
    FOR             reduce using rule 71 (func_extra -> empty .)
    WHILE           reduce using rule 71 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 71 (func_extra -> empty .) ]


state 218

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp . RPAR SEMICOLON R_C_BRACKET

    RPAR            shift and go to state 224


state 219

    (62) if_2 -> estatuto if_2 .

    R_C_BRACKET     reduce using rule 62 (if_2 -> estatuto if_2 .)


state 220

    (61) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET . if_3 SEMICOLON
    (64) if_3 -> . ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET

    ELSE            shift and go to state 226

    if_3                           shift and go to state 225

state 221

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp . RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    RPAR            shift and go to state 227


state 222

    (69) while_l_2 -> estatuto while_l_2 .

    R_C_BRACKET     reduce using rule 69 (while_l_2 -> estatuto while_l_2 .)


state 223

    (68) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 228


state 224

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR . SEMICOLON R_C_BRACKET

    SEMICOLON       shift and go to state 229


state 225

    (61) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 . SEMICOLON

    SEMICOLON       shift and go to state 230


state 226

    (64) if_3 -> ELSE . L_C_BRACKET estatuto if_2 R_C_BRACKET

    L_C_BRACKET     shift and go to state 231


state 227

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR . L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON

    L_C_BRACKET     shift and go to state 232


state 228

    (68) while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 68 (while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON .)


state 229

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON . R_C_BRACKET

    R_C_BRACKET     shift and go to state 233


state 230

    (61) if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .

    ID              reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    READ            reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    WRITE           reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    IF              reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    FOR             reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    WHILE           reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    R_C_BRACKET     reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)
    RETURN          reduce using rule 61 (if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON .)


state 231

    (64) if_3 -> ELSE L_C_BRACKET . estatuto if_2 R_C_BRACKET
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2
    (104) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74
    R_C_BRACKET     reduce using rule 104 (empty -> .)

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 234
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68
    empty                          shift and go to state 75

state 232

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET . estatuto for_l_2 R_C_BRACKET SEMICOLON
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2
    (104) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74
    R_C_BRACKET     reduce using rule 104 (empty -> .)

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 235
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68
    empty                          shift and go to state 75

state 233

    (102) function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET .

    SEMICOLON       reduce using rule 102 (function_2 -> tipo_simple ID LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET .)


state 234

    (64) if_3 -> ELSE L_C_BRACKET estatuto . if_2 R_C_BRACKET
    (62) if_2 -> . estatuto if_2
    (63) if_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 211
    if_2                           shift and go to state 236
    empty                          shift and go to state 213
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 235

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto . for_l_2 R_C_BRACKET SEMICOLON
    (66) for_l_2 -> . estatuto for_l_2
    (67) for_l_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 237
    for_l_2                        shift and go to state 238
    empty                          shift and go to state 239
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 236

    (64) if_3 -> ELSE L_C_BRACKET estatuto if_2 . R_C_BRACKET

    R_C_BRACKET     shift and go to state 240


state 237

    (66) for_l_2 -> estatuto . for_l_2
    (66) for_l_2 -> . estatuto for_l_2
    (67) for_l_2 -> . empty
    (43) estatuto -> . asigna
    (44) estatuto -> . llamada
    (45) estatuto -> . read
    (46) estatuto -> . write
    (47) estatuto -> . if_1
    (48) estatuto -> . for_l
    (49) estatuto -> . while_l
    (50) estatuto -> . func_extra
    (104) empty -> .
    (51) asigna -> . variable EQUAL exp SEMICOLON
    (52) llamada -> . ID LPAR exp llamada_2 RPAR SEMICOLON
    (55) read -> . READ LPAR variable RPAR SEMICOLON
    (56) write -> . WRITE LPAR write_2 write_3 RPAR SEMICOLON
    (61) if_1 -> . IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON
    (65) for_l -> . FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON
    (68) while_l -> . WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON
    (71) func_extra -> . empty
    (38) variable -> . ID variable_2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    R_C_BRACKET     reduce using rule 104 (empty -> .)
    ID              shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    FOR             shift and go to state 73
    WHILE           shift and go to state 74

  ! ID              [ reduce using rule 104 (empty -> .) ]
  ! READ            [ reduce using rule 104 (empty -> .) ]
  ! WRITE           [ reduce using rule 104 (empty -> .) ]
  ! IF              [ reduce using rule 104 (empty -> .) ]
  ! FOR             [ reduce using rule 104 (empty -> .) ]
  ! WHILE           [ reduce using rule 104 (empty -> .) ]

    estatuto                       shift and go to state 237
    for_l_2                        shift and go to state 241
    empty                          shift and go to state 239
    asigna                         shift and go to state 60
    llamada                        shift and go to state 61
    read                           shift and go to state 62
    write                          shift and go to state 63
    if_1                           shift and go to state 64
    for_l                          shift and go to state 65
    while_l                        shift and go to state 66
    func_extra                     shift and go to state 67
    variable                       shift and go to state 68

state 238

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 . R_C_BRACKET SEMICOLON

    R_C_BRACKET     shift and go to state 242


state 239

    (67) for_l_2 -> empty .
    (71) func_extra -> empty .

  ! reduce/reduce conflict for R_C_BRACKET resolved using rule 67 (for_l_2 -> empty .)
    R_C_BRACKET     reduce using rule 67 (for_l_2 -> empty .)
    ID              reduce using rule 71 (func_extra -> empty .)
    READ            reduce using rule 71 (func_extra -> empty .)
    WRITE           reduce using rule 71 (func_extra -> empty .)
    IF              reduce using rule 71 (func_extra -> empty .)
    FOR             reduce using rule 71 (func_extra -> empty .)
    WHILE           reduce using rule 71 (func_extra -> empty .)

  ! R_C_BRACKET     [ reduce using rule 71 (func_extra -> empty .) ]


state 240

    (64) if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET .

    SEMICOLON       reduce using rule 64 (if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET .)


state 241

    (66) for_l_2 -> estatuto for_l_2 .

    R_C_BRACKET     reduce using rule 66 (for_l_2 -> estatuto for_l_2 .)


state 242

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 243


state 243

    (65) for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .

    ID              reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    READ            reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WRITE           reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    IF              reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    FOR             reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    WHILE           reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    R_C_BRACKET     reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)
    RETURN          reduce using rule 65 (for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for READ in state 54 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for READ in state 59 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for READ in state 82 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for FOR in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for READ in state 194 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 194 resolved as shift
WARNING: shift/reduce conflict for IF in state 194 resolved as shift
WARNING: shift/reduce conflict for FOR in state 194 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 196 resolved as shift
WARNING: shift/reduce conflict for READ in state 196 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 196 resolved as shift
WARNING: shift/reduce conflict for IF in state 196 resolved as shift
WARNING: shift/reduce conflict for FOR in state 196 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 196 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for READ in state 206 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 206 resolved as shift
WARNING: shift/reduce conflict for IF in state 206 resolved as shift
WARNING: shift/reduce conflict for FOR in state 206 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 206 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for READ in state 208 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 208 resolved as shift
WARNING: shift/reduce conflict for ID in state 211 resolved as shift
WARNING: shift/reduce conflict for READ in state 211 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for READ in state 215 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 215 resolved as shift
WARNING: shift/reduce conflict for IF in state 215 resolved as shift
WARNING: shift/reduce conflict for FOR in state 215 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 215 resolved as shift
WARNING: shift/reduce conflict for ID in state 231 resolved as shift
WARNING: shift/reduce conflict for READ in state 231 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 231 resolved as shift
WARNING: shift/reduce conflict for IF in state 231 resolved as shift
WARNING: shift/reduce conflict for FOR in state 231 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 231 resolved as shift
WARNING: shift/reduce conflict for ID in state 232 resolved as shift
WARNING: shift/reduce conflict for READ in state 232 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 232 resolved as shift
WARNING: shift/reduce conflict for IF in state 232 resolved as shift
WARNING: shift/reduce conflict for FOR in state 232 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 232 resolved as shift
WARNING: shift/reduce conflict for ID in state 234 resolved as shift
WARNING: shift/reduce conflict for READ in state 234 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 234 resolved as shift
WARNING: shift/reduce conflict for IF in state 234 resolved as shift
WARNING: shift/reduce conflict for FOR in state 234 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 234 resolved as shift
WARNING: shift/reduce conflict for ID in state 235 resolved as shift
WARNING: shift/reduce conflict for READ in state 235 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 235 resolved as shift
WARNING: shift/reduce conflict for FOR in state 235 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 235 resolved as shift
WARNING: shift/reduce conflict for ID in state 237 resolved as shift
WARNING: shift/reduce conflict for READ in state 237 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 237 resolved as shift
WARNING: shift/reduce conflict for IF in state 237 resolved as shift
WARNING: shift/reduce conflict for FOR in state 237 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 237 resolved as shift
WARNING: reduce/reduce conflict in state 46 resolved using rule (vars_5 -> empty)
WARNING: rejected rule (vars_6 -> empty) in state 46
WARNING: reduce/reduce conflict in state 84 resolved using rule (body_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 84
WARNING: reduce/reduce conflict in state 213 resolved using rule (if_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 213
WARNING: reduce/reduce conflict in state 217 resolved using rule (while_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 217
WARNING: reduce/reduce conflict in state 239 resolved using rule (for_l_2 -> empty)
WARNING: rejected rule (func_extra -> empty) in state 239
WARNING: Rule (vars_6 -> empty) is never reduced
