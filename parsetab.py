
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA COMPARE CTE_F CTE_I CTE_S DATAFRAME DIVIDE ELSE EQUAL FLOAT FOR FUNC GREATER GREATER_EQUAL ID IF INT LESS LESS_EQUAL LPAR L_C_BRACKET L_S_BRACKET MAIN MINUS NOT_EQUAL OR PLUS PROGRAM READ RETURN RPAR R_C_BRACKET R_S_BRACKET SEMICOLON STRING TIMES TO VAR VOID WHILE WRITE\n    program : PROGRAM program_point ID COLON modules main\n    \n    program_point : empty\n    \n    modules : modules_2 modules_point modules_3\n    \n    modules_point : empty\n    \n    modules_2 : vars\n                | empty\n    \n    modules_3 : function\n                    | empty\n    \n    main : MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON\n    \n    body : vars estatuto body_2\n    \n    body_2 : estatuto body_2\n                | empty\n    \n    tipo_simple : INT \n                | FLOAT\n                | CHAR\n    \n    tipo_comp : DATAFRAME\n    \n    vars : VAR vars_2 SEMICOLON vars_8\n    \n    vars_2 : tipo_comp vars_3\n                        | tipo_simple vars_4\n    \n    vars_3 : ID vars_5\n    \n    vars_4 : vars_3 \n                | ID vars_6\n    \n    vars_5 : COMMA vars_3\n            | empty\n    \n    vars_6 : punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7\n                | empty\n    \n    punto_id_especial : empty\n    \n    vars_7 : L_S_BRACKET CTE_I R_S_BRACKET var_mat\n                | var_array\n    \n    var_array : empty\n    \n    var_mat : empty\n    \n    vars_8 : vars \n                | empty\n    \n    param : tipo_simple ID punto_param param_2\n                | empty\n    \n    param_2 : COMMA param\n                | empty\n    \n    punto_param : empty\n    \n    variable : ID variable_2\n    \n    variable_2 : L_S_BRACKET exp R_S_BRACKET variable_3 \n                    | empty\n    \n    variable_3 : L_S_BRACKET exp R_S_BRACKET\n                    | empty\n    \n    estatuto : asigna\n                | llamada\n                | read\n                | write\n                | if_1\n                | for_l\n                | while_l\n                | func_extra\n    \n    asigna : variable EQUAL exp SEMICOLON\n    \n    llamada : ID LPAR exp llamada_2 RPAR SEMICOLON\n    \n    llamada_2 : COMMA exp llamada_2 \n                | empty\n    \n    read : READ LPAR variable RPAR SEMICOLON\n    \n    write : WRITE LPAR write_2 write_3 RPAR SEMICOLON\n    \n    write_2 : exp\n                | CTE_S\n    \n    write_3 : COMMA write_2 write_3 \n                | empty\n    \n    if_1 : IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON\n    \n    if_2 : estatuto if_2 \n            | empty\n    \n    if_3 : ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET\n    \n    for_l : FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON\n    \n    for_l_2 : estatuto for_l_2\n                | empty\n    \n    while_l : WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON\n    \n    while_l_2 : estatuto while_l_2\n                    | empty\n    \n    func_extra : empty\n    \n    exp : t_exp add_operator_4 exp_2 \n    \n    exp_2 : OR add_operator exp \n            | empty\n    \n    t_exp : g_exp add_operator_4 t_exp_2 \n    \n    t_exp_2 : AND add_operator t_exp \n                | empty\n    \n    g_exp : m_exp g_exp_2 add_operator_3\n    \n    g_exp_2 : LESS_EQUAL add_operator m_exp \n                | LESS add_operator m_exp \n                | GREATER_EQUAL add_operator m_exp \n                | GREATER add_operator m_exp \n                | COMPARE add_operator m_exp \n                | NOT_EQUAL add_operator m_exp \n                | empty\n    \n    m_exp : t add_operator_2 m_exp_2\n    \n    m_exp_2 : PLUS add_operator m_exp \n                | MINUS add_operator m_exp\n                | empty\n    \n    t : f add_operator_1 t_2\n    \n    t_2 : TIMES add_operator t \n            | DIVIDE add_operator t\n            | empty\n    \n    f : LPAR add_floor exp RPAR remove_floor\n            | variable\n            | llamada\n            | f_2\n    \n    f_2 : CTE_I add_constant_i\n            | CTE_F add_constant_f\n    \n    add_floor : empty\n    \n    remove_floor : empty\n    \n    add_operator : empty \n    \n    add_operator_1 : empty \n    \n    add_operator_2 : empty \n    \n    add_operator_3 : empty \n    \n    add_operator_4 : empty \n    \n    add_constant_i : empty\n    \n    add_constant_f : empty\n    \n    function : FUNC function_2 SEMICOLON function_3\n    \n    function_2 : tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v\n                    | VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v\n    \n    function_3 : function\n                    | empty\n    \n    function_punto1 : empty\n    \n    function_punto2 : empty\n    \n    func_agrega_v : empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,84,],[0,-1,-9,]),'ID':([2,3,4,17,18,19,20,21,22,28,36,37,38,39,40,42,54,64,65,66,67,68,69,70,71,72,80,85,87,88,89,91,93,94,95,96,97,98,114,134,139,140,141,142,143,144,150,151,157,162,173,176,180,181,182,183,184,185,186,188,189,192,193,198,201,204,205,206,214,215,222,223,224,225,227,230,232,234,247,249,250,251,253,254,266,268,269,270,272,273,276,278,283,],[-118,5,-2,30,33,-16,-13,-14,-15,-118,49,50,-17,-32,-33,30,74,74,-44,-45,-46,-47,-48,-49,-50,-51,-72,74,-72,117,117,117,123,117,117,128,117,130,-118,-52,-118,-118,-118,-118,-118,-118,117,-101,117,117,-118,-118,117,-103,117,117,117,117,117,-118,-118,-118,-118,117,-56,74,117,74,117,117,117,117,117,117,-53,-57,74,74,74,-72,117,74,-72,117,-69,-62,74,74,74,74,74,-72,-66,]),'COLON':([5,],[6,]),'VAR':([6,28,47,169,170,],[11,11,11,11,11,]),'FUNC':([6,8,9,10,14,15,28,38,39,40,48,],[-118,-118,-5,-6,27,-4,-118,-17,-32,-33,27,]),'MAIN':([6,7,8,9,10,14,15,24,25,26,28,38,39,40,48,55,56,57,],[-118,13,-118,-5,-6,-118,-4,-3,-7,-8,-118,-17,-32,-33,-118,-110,-113,-114,]),'DATAFRAME':([11,],[19,]),'INT':([11,27,81,82,208,],[20,20,20,20,20,]),'FLOAT':([11,27,81,82,208,],[21,21,21,21,21,]),'CHAR':([11,27,81,82,208,],[22,22,22,22,22,]),'LPAR':([13,49,50,58,59,60,61,74,75,76,77,78,79,88,89,91,94,95,97,114,117,139,140,141,142,143,144,150,151,157,162,173,176,180,181,182,183,184,185,186,188,189,192,193,198,205,214,215,222,223,224,225,236,250,254,],[23,-118,-118,81,-115,82,-116,89,93,94,95,96,97,114,114,114,114,114,114,-118,89,-118,-118,-118,-118,-118,-118,114,-101,114,114,-118,-118,114,-103,114,114,114,114,114,-118,-118,-118,-118,114,114,114,114,114,114,114,114,254,114,114,]),'SEMICOLON':([16,29,30,31,32,33,35,41,43,44,46,51,63,83,90,92,103,104,105,107,108,109,110,111,112,113,115,116,117,118,119,135,136,137,138,145,146,147,148,149,152,153,154,155,159,160,171,172,174,175,177,178,179,187,190,191,194,196,199,200,202,212,213,216,217,218,219,220,221,226,227,237,238,239,240,241,242,243,244,245,246,255,256,261,263,267,274,279,280,282,],[28,-18,-118,-19,-21,-118,48,-20,-24,-22,-24,-23,84,-118,-39,-41,-25,-29,-30,-96,134,-118,-118,-118,-118,-118,-97,-98,-118,-118,-118,-118,-107,-118,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,-118,201,-118,-73,-75,-76,-78,-79,-106,-87,-90,-91,-94,227,-40,-43,230,-28,-31,-80,-81,-82,-83,-84,-85,-118,-53,-118,-74,-77,-88,-89,-92,-93,-95,-102,-42,-112,-117,266,268,271,-118,-111,-65,283,]),'RPAR':([23,81,82,90,92,99,100,101,107,109,110,111,112,113,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,135,136,137,138,145,146,147,148,149,152,153,154,155,156,158,159,161,163,167,168,172,174,175,177,178,179,187,190,191,194,195,197,199,200,203,207,208,209,216,217,218,219,220,221,226,227,228,231,235,238,239,240,241,242,243,244,245,246,259,262,],[34,-118,-118,-39,-41,131,-35,132,-96,-118,-118,-118,-118,-118,-97,-98,-118,-118,-118,-118,160,-118,-118,-58,-59,164,165,166,-118,-118,-107,-118,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,196,-55,-118,202,-61,-118,-38,-73,-75,-76,-78,-79,-106,-87,-90,-91,-94,226,-118,-40,-43,-118,-34,-118,-37,-80,-81,-82,-83,-84,-85,-118,-53,-54,-60,-36,-74,-77,-88,-89,-92,-93,-95,-102,-42,265,267,]),'VOID':([27,],[37,]),'READ':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,201,204,206,227,230,232,234,247,249,251,253,266,268,269,270,272,273,276,278,283,],[-118,-17,-32,-33,75,75,-44,-45,-46,-47,-48,-49,-50,-51,-72,75,-72,-52,-56,75,75,-53,-57,75,75,75,-72,75,-72,-69,-62,75,75,75,75,75,-72,-66,]),'WRITE':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,201,204,206,227,230,232,234,247,249,251,253,266,268,269,270,272,273,276,278,283,],[-118,-17,-32,-33,76,76,-44,-45,-46,-47,-48,-49,-50,-51,-72,76,-72,-52,-56,76,76,-53,-57,76,76,76,-72,76,-72,-69,-62,76,76,76,76,76,-72,-66,]),'IF':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,201,204,206,227,230,232,234,247,249,251,253,266,268,269,270,272,273,276,278,283,],[-118,-17,-32,-33,77,77,-44,-45,-46,-47,-48,-49,-50,-51,-72,77,-72,-52,-56,77,77,-53,-57,77,77,77,-72,77,-72,-69,-62,77,77,77,77,77,-72,-66,]),'FOR':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,201,204,206,227,230,232,234,247,249,251,253,266,268,269,270,272,273,276,278,283,],[-118,-17,-32,-33,78,78,-44,-45,-46,-47,-48,-49,-50,-51,-72,78,-72,-52,-56,78,78,-53,-57,78,78,78,-72,78,-72,-69,-62,78,78,78,78,78,-72,-66,]),'WHILE':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,201,204,206,227,230,232,234,247,249,251,253,266,268,269,270,272,273,276,278,283,],[-118,-17,-32,-33,79,79,-44,-45,-46,-47,-48,-49,-50,-51,-72,79,-72,-52,-56,79,79,-53,-57,79,79,79,-72,79,-72,-69,-62,79,79,79,79,79,-72,-66,]),'R_C_BRACKET':([28,38,39,40,53,54,64,65,66,67,68,69,70,71,72,80,85,86,87,106,134,201,204,206,211,227,230,232,234,247,248,249,251,252,253,257,260,266,268,269,270,271,272,273,275,276,277,278,281,283,],[-118,-17,-32,-33,63,-118,-118,-44,-45,-46,-47,-48,-49,-50,-51,-72,-118,-10,-12,-11,-52,-56,-118,-118,237,-53,-57,-118,-118,-118,258,-64,-118,261,-71,-63,-70,-69,-62,-118,-118,274,-118,-118,280,-118,282,-68,-67,-66,]),'RETURN':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,86,87,106,134,201,210,227,230,266,268,283,],[-118,-17,-32,-33,-118,-118,-44,-45,-46,-47,-48,-49,-50,-51,-72,-118,-10,-12,-11,-52,-56,236,-53,-57,-69,-62,-66,]),'COMMA':([30,33,90,92,107,109,110,111,112,113,115,116,117,118,119,120,124,125,126,130,135,136,137,138,145,146,147,148,149,152,153,154,155,159,167,168,172,174,175,177,178,179,187,190,191,194,197,199,200,203,216,217,218,219,220,221,226,227,238,239,240,241,242,243,244,245,246,],[42,42,-39,-41,-96,-118,-118,-118,-118,-118,-97,-98,-118,-118,-118,157,162,-58,-59,-118,-118,-107,-118,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,-118,208,-38,-73,-75,-76,-78,-79,-106,-87,-90,-91,-94,157,-40,-43,162,-80,-81,-82,-83,-84,-85,-118,-53,-74,-77,-88,-89,-92,-93,-95,-102,-42,]),'L_S_BRACKET':([33,45,46,74,83,117,123,159,],[-118,52,-27,91,102,91,91,198,]),'L_C_BRACKET':([34,131,132,164,166,264,265,],[47,169,170,204,206,269,270,]),'CTE_I':([52,88,89,91,94,95,97,102,114,139,140,141,142,143,144,150,151,157,162,173,176,180,181,182,183,184,185,186,188,189,192,193,198,205,214,215,222,223,224,225,250,254,],[62,118,118,118,118,118,118,133,-118,-118,-118,-118,-118,-118,-118,118,-101,118,118,-118,-118,118,-103,118,118,118,118,118,-118,-118,-118,-118,118,118,118,118,118,118,118,118,118,118,]),'R_S_BRACKET':([62,90,92,107,109,110,111,112,113,115,116,117,118,119,121,133,135,136,137,138,145,146,147,148,149,152,153,154,155,159,172,174,175,177,178,179,187,190,191,194,199,200,216,217,218,219,220,221,226,227,229,238,239,240,241,242,243,244,245,246,],[83,-39,-41,-96,-118,-118,-118,-118,-118,-97,-98,-118,-118,-118,159,171,-118,-107,-118,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,-118,-73,-75,-76,-78,-79,-106,-87,-90,-91,-94,-40,-43,-80,-81,-82,-83,-84,-85,-118,-53,246,-74,-77,-88,-89,-92,-93,-95,-102,-42,]),'EQUAL':([73,74,90,92,159,165,199,200,246,],[88,-118,-39,-41,-118,205,-40,-43,-42,]),'CTE_F':([88,89,91,94,95,97,114,139,140,141,142,143,144,150,151,157,162,173,176,180,181,182,183,184,185,186,188,189,192,193,198,205,214,215,222,223,224,225,250,254,],[119,119,119,119,119,119,-118,-118,-118,-118,-118,-118,-118,119,-101,119,119,-118,-118,119,-103,119,119,119,119,119,-118,-118,-118,-118,119,119,119,119,119,119,119,119,119,119,]),'TIMES':([90,92,107,113,115,116,117,118,119,148,149,152,153,154,155,159,199,200,226,227,244,245,246,],[-39,-41,-96,-118,-97,-98,-118,-118,-118,192,-104,-99,-108,-100,-109,-118,-40,-43,-118,-53,-95,-102,-42,]),'DIVIDE':([90,92,107,113,115,116,117,118,119,148,149,152,153,154,155,159,199,200,226,227,244,245,246,],[-39,-41,-96,-118,-97,-98,-118,-118,-118,193,-104,-99,-108,-100,-109,-118,-40,-43,-118,-53,-95,-102,-42,]),'PLUS':([90,92,107,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,191,194,199,200,226,227,242,243,244,245,246,],[-39,-41,-96,-118,-118,-97,-98,-118,-118,-118,188,-105,-118,-104,-99,-108,-100,-109,-118,-91,-94,-40,-43,-118,-53,-92,-93,-95,-102,-42,]),'MINUS':([90,92,107,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,191,194,199,200,226,227,242,243,244,245,246,],[-39,-41,-96,-118,-118,-97,-98,-118,-118,-118,189,-105,-118,-104,-99,-108,-100,-109,-118,-91,-94,-40,-43,-118,-53,-92,-93,-95,-102,-42,]),'LESS_EQUAL':([90,92,107,111,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,187,190,191,194,199,200,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,139,-118,-118,-97,-98,-118,-118,-118,-118,-105,-118,-104,-99,-108,-100,-109,-118,-87,-90,-91,-94,-40,-43,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'LESS':([90,92,107,111,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,187,190,191,194,199,200,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,140,-118,-118,-97,-98,-118,-118,-118,-118,-105,-118,-104,-99,-108,-100,-109,-118,-87,-90,-91,-94,-40,-43,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'GREATER_EQUAL':([90,92,107,111,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,187,190,191,194,199,200,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,141,-118,-118,-97,-98,-118,-118,-118,-118,-105,-118,-104,-99,-108,-100,-109,-118,-87,-90,-91,-94,-40,-43,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'GREATER':([90,92,107,111,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,187,190,191,194,199,200,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,142,-118,-118,-97,-98,-118,-118,-118,-118,-105,-118,-104,-99,-108,-100,-109,-118,-87,-90,-91,-94,-40,-43,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'COMPARE':([90,92,107,111,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,187,190,191,194,199,200,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,143,-118,-118,-97,-98,-118,-118,-118,-118,-105,-118,-104,-99,-108,-100,-109,-118,-87,-90,-91,-94,-40,-43,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'NOT_EQUAL':([90,92,107,111,112,113,115,116,117,118,119,146,147,148,149,152,153,154,155,159,187,190,191,194,199,200,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,144,-118,-118,-97,-98,-118,-118,-118,-118,-105,-118,-104,-99,-108,-100,-109,-118,-87,-90,-91,-94,-40,-43,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'AND':([90,92,107,110,111,112,113,115,116,117,118,119,136,137,138,145,146,147,148,149,152,153,154,155,159,178,179,187,190,191,194,199,200,216,217,218,219,220,221,226,227,240,241,242,243,244,245,246,],[-39,-41,-96,-118,-118,-118,-118,-97,-98,-118,-118,-118,-107,176,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,-118,-79,-106,-87,-90,-91,-94,-40,-43,-80,-81,-82,-83,-84,-85,-118,-53,-88,-89,-92,-93,-95,-102,-42,]),'OR':([90,92,107,109,110,111,112,113,115,116,117,118,119,135,136,137,138,145,146,147,148,149,152,153,154,155,159,175,177,178,179,187,190,191,194,199,200,216,217,218,219,220,221,226,227,239,240,241,242,243,244,245,246,],[-39,-41,-96,-118,-118,-118,-118,-118,-97,-98,-118,-118,-118,173,-107,-118,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,-118,-76,-78,-79,-106,-87,-90,-91,-94,-40,-43,-80,-81,-82,-83,-84,-85,-118,-53,-77,-88,-89,-92,-93,-95,-102,-42,]),'TO':([90,92,107,109,110,111,112,113,115,116,117,118,119,135,136,137,138,145,146,147,148,149,152,153,154,155,159,172,174,175,177,178,179,187,190,191,194,199,200,216,217,218,219,220,221,226,227,233,238,239,240,241,242,243,244,245,246,],[-39,-41,-96,-118,-118,-118,-118,-118,-97,-98,-118,-118,-118,-118,-107,-118,-118,-86,-118,-105,-118,-104,-99,-108,-100,-109,-118,-73,-75,-76,-78,-79,-106,-87,-90,-91,-94,-40,-43,-80,-81,-82,-83,-84,-85,-118,-53,250,-74,-77,-88,-89,-92,-93,-95,-102,-42,]),'CTE_S':([94,162,],[126,126,]),'ELSE':([258,],[264,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_point':([2,],[3,]),'empty':([2,6,8,14,28,30,33,48,49,50,54,64,74,81,82,83,85,109,110,111,112,113,114,117,118,119,120,123,124,130,135,137,138,139,140,141,142,143,144,146,148,159,167,171,173,176,188,189,192,193,197,203,204,206,208,226,232,234,237,247,251,269,270,272,273,274,276,],[4,10,15,26,40,43,46,57,59,61,80,87,92,100,100,105,87,136,136,145,147,149,151,92,153,155,158,92,163,168,174,177,179,181,181,181,181,181,181,190,194,200,209,213,181,181,181,181,181,181,158,163,80,80,100,245,249,253,256,249,253,80,80,249,278,256,278,]),'modules':([6,],[7,]),'modules_2':([6,],[8,]),'vars':([6,28,47,169,170,],[9,39,54,54,54,]),'main':([7,],[12,]),'modules_point':([8,],[14,]),'vars_2':([11,],[16,]),'tipo_comp':([11,],[17,]),'tipo_simple':([11,27,81,82,208,],[18,36,98,98,98,]),'modules_3':([14,],[24,]),'function':([14,48,],[25,56,]),'vars_3':([17,18,42,],[29,32,51,]),'vars_4':([18,],[31,]),'function_2':([27,],[35,]),'vars_8':([28,],[38,]),'vars_5':([30,33,],[41,41,]),'vars_6':([33,],[44,]),'punto_id_especial':([33,],[45,]),'body':([47,169,170,],[53,210,211,]),'function_3':([48,],[55,]),'function_punto1':([49,],[58,]),'function_punto2':([50,],[60,]),'estatuto':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[64,85,85,232,234,247,251,247,251,272,273,247,276,276,]),'asigna':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'llamada':([54,64,85,88,89,91,94,95,97,150,157,162,180,182,183,184,185,186,198,204,205,206,214,215,222,223,224,225,232,234,247,250,251,254,269,270,272,273,276,],[66,66,66,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,66,115,66,115,115,115,115,115,115,66,66,66,115,66,115,66,66,66,66,66,]),'read':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'write':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'if_1':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'for_l':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'while_l':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'func_extra':([54,64,85,204,206,232,234,247,251,269,270,272,273,276,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'variable':([54,64,85,88,89,91,93,94,95,97,150,157,162,180,182,183,184,185,186,198,204,205,206,214,215,222,223,224,225,232,234,247,250,251,254,269,270,272,273,276,],[73,73,73,107,107,107,122,107,107,107,107,107,107,107,107,107,107,107,107,107,73,107,73,107,107,107,107,107,107,73,73,73,107,73,107,73,73,73,73,73,]),'body_2':([64,85,],[86,106,]),'variable_2':([74,117,123,],[90,90,90,]),'param':([81,82,208,],[99,101,235,]),'vars_7':([83,],[103,]),'var_array':([83,],[104,]),'exp':([88,89,91,94,95,97,150,157,162,198,205,214,250,254,],[108,120,121,125,127,129,195,197,125,229,233,238,259,262,]),'t_exp':([88,89,91,94,95,97,150,157,162,198,205,214,215,250,254,],[109,109,109,109,109,109,109,109,109,109,109,109,239,109,109,]),'g_exp':([88,89,91,94,95,97,150,157,162,198,205,214,215,250,254,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'m_exp':([88,89,91,94,95,97,150,157,162,180,182,183,184,185,186,198,205,214,215,222,223,250,254,],[111,111,111,111,111,111,111,111,111,216,217,218,219,220,221,111,111,111,111,240,241,111,111,]),'t':([88,89,91,94,95,97,150,157,162,180,182,183,184,185,186,198,205,214,215,222,223,224,225,250,254,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,242,243,112,112,]),'f':([88,89,91,94,95,97,150,157,162,180,182,183,184,185,186,198,205,214,215,222,223,224,225,250,254,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'f_2':([88,89,91,94,95,97,150,157,162,180,182,183,184,185,186,198,205,214,215,222,223,224,225,250,254,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'write_2':([94,162,],[124,203,]),'add_operator_4':([109,110,],[135,137,]),'g_exp_2':([111,],[138,]),'add_operator_2':([112,],[146,]),'add_operator_1':([113,],[148,]),'add_floor':([114,],[150,]),'add_constant_i':([118,],[152,]),'add_constant_f':([119,],[154,]),'llamada_2':([120,197,],[156,228,]),'write_3':([124,203,],[161,231,]),'punto_param':([130,],[167,]),'exp_2':([135,],[172,]),'t_exp_2':([137,],[175,]),'add_operator_3':([138,],[178,]),'add_operator':([139,140,141,142,143,144,173,176,188,189,192,193,],[180,182,183,184,185,186,214,215,222,223,224,225,]),'m_exp_2':([146,],[187,]),'t_2':([148,],[191,]),'variable_3':([159,],[199,]),'param_2':([167,],[207,]),'var_mat':([171,],[212,]),'remove_floor':([226,],[244,]),'if_2':([232,247,272,],[248,257,275,]),'while_l_2':([234,251,],[252,260,]),'func_agrega_v':([237,274,],[255,279,]),'if_3':([258,],[263,]),'for_l_2':([273,276,],[277,281,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM program_point ID COLON modules main','program',6,'p_program','parser_1.py',31),
  ('program_point -> empty','program_point',1,'p_program_point','parser_1.py',36),
  ('modules -> modules_2 modules_point modules_3','modules',3,'p_modules','parser_1.py',43),
  ('modules_point -> empty','modules_point',1,'p_modules_point','parser_1.py',48),
  ('modules_2 -> vars','modules_2',1,'p_modules_2','parser_1.py',61),
  ('modules_2 -> empty','modules_2',1,'p_modules_2','parser_1.py',62),
  ('modules_3 -> function','modules_3',1,'p_modules_3','parser_1.py',67),
  ('modules_3 -> empty','modules_3',1,'p_modules_3','parser_1.py',68),
  ('main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON','main',7,'p_main','parser_1.py',73),
  ('body -> vars estatuto body_2','body',3,'p_body','parser_1.py',78),
  ('body_2 -> estatuto body_2','body_2',2,'p_body_2','parser_1.py',84),
  ('body_2 -> empty','body_2',1,'p_body_2','parser_1.py',85),
  ('tipo_simple -> INT','tipo_simple',1,'p_tipo_simple','parser_1.py',90),
  ('tipo_simple -> FLOAT','tipo_simple',1,'p_tipo_simple','parser_1.py',91),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','parser_1.py',92),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','parser_1.py',99),
  ('vars -> VAR vars_2 SEMICOLON vars_8','vars',4,'p_vars','parser_1.py',106),
  ('vars_2 -> tipo_comp vars_3','vars_2',2,'p_vars_2','parser_1.py',112),
  ('vars_2 -> tipo_simple vars_4','vars_2',2,'p_vars_2','parser_1.py',113),
  ('vars_3 -> ID vars_5','vars_3',2,'p_vars_3','parser_1.py',118),
  ('vars_4 -> vars_3','vars_4',1,'p_vars_4','parser_1.py',128),
  ('vars_4 -> ID vars_6','vars_4',2,'p_vars_4','parser_1.py',129),
  ('vars_5 -> COMMA vars_3','vars_5',2,'p_vars_5','parser_1.py',134),
  ('vars_5 -> empty','vars_5',1,'p_vars_5','parser_1.py',135),
  ('vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7','vars_6',5,'p_vars_6','parser_1.py',140),
  ('vars_6 -> empty','vars_6',1,'p_vars_6','parser_1.py',141),
  ('punto_id_especial -> empty','punto_id_especial',1,'p_punto_id_especial','parser_1.py',145),
  ('vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat','vars_7',4,'p_vars_7','parser_1.py',152),
  ('vars_7 -> var_array','vars_7',1,'p_vars_7','parser_1.py',153),
  ('var_array -> empty','var_array',1,'p_var_array','parser_1.py',158),
  ('var_mat -> empty','var_mat',1,'p_var_mat','parser_1.py',168),
  ('vars_8 -> vars','vars_8',1,'p_vars_8','parser_1.py',179),
  ('vars_8 -> empty','vars_8',1,'p_vars_8','parser_1.py',180),
  ('param -> tipo_simple ID punto_param param_2','param',4,'p_param','parser_1.py',185),
  ('param -> empty','param',1,'p_param','parser_1.py',186),
  ('param_2 -> COMMA param','param_2',2,'p_param_2','parser_1.py',191),
  ('param_2 -> empty','param_2',1,'p_param_2','parser_1.py',192),
  ('punto_param -> empty','punto_param',1,'p_punto_param','parser_1.py',197),
  ('variable -> ID variable_2','variable',2,'p_variable','parser_1.py',205),
  ('variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3','variable_2',4,'p_variable_2','parser_1.py',210),
  ('variable_2 -> empty','variable_2',1,'p_variable_2','parser_1.py',211),
  ('variable_3 -> L_S_BRACKET exp R_S_BRACKET','variable_3',3,'p_variable_3','parser_1.py',216),
  ('variable_3 -> empty','variable_3',1,'p_variable_3','parser_1.py',217),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','parser_1.py',222),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','parser_1.py',223),
  ('estatuto -> read','estatuto',1,'p_estatuto','parser_1.py',224),
  ('estatuto -> write','estatuto',1,'p_estatuto','parser_1.py',225),
  ('estatuto -> if_1','estatuto',1,'p_estatuto','parser_1.py',226),
  ('estatuto -> for_l','estatuto',1,'p_estatuto','parser_1.py',227),
  ('estatuto -> while_l','estatuto',1,'p_estatuto','parser_1.py',228),
  ('estatuto -> func_extra','estatuto',1,'p_estatuto','parser_1.py',229),
  ('asigna -> variable EQUAL exp SEMICOLON','asigna',4,'p_asigna','parser_1.py',234),
  ('llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON','llamada',6,'p_llamada','parser_1.py',239),
  ('llamada_2 -> COMMA exp llamada_2','llamada_2',3,'p_llamada_2','parser_1.py',244),
  ('llamada_2 -> empty','llamada_2',1,'p_llamada_2','parser_1.py',245),
  ('read -> READ LPAR variable RPAR SEMICOLON','read',5,'p_read','parser_1.py',250),
  ('write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON','write',6,'p_write','parser_1.py',255),
  ('write_2 -> exp','write_2',1,'p_write_2','parser_1.py',260),
  ('write_2 -> CTE_S','write_2',1,'p_write_2','parser_1.py',261),
  ('write_3 -> COMMA write_2 write_3','write_3',3,'p_write_3','parser_1.py',266),
  ('write_3 -> empty','write_3',1,'p_write_3','parser_1.py',267),
  ('if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON','if_1',10,'p_if_1','parser_1.py',272),
  ('if_2 -> estatuto if_2','if_2',2,'p_if_2','parser_1.py',277),
  ('if_2 -> empty','if_2',1,'p_if_2','parser_1.py',278),
  ('if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET','if_3',5,'p_if_3','parser_1.py',283),
  ('for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON','for_l',14,'p_for_l','parser_1.py',288),
  ('for_l_2 -> estatuto for_l_2','for_l_2',2,'p_for_l_2','parser_1.py',293),
  ('for_l_2 -> empty','for_l_2',1,'p_for_l_2','parser_1.py',294),
  ('while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON','while_l',9,'p_while_l','parser_1.py',299),
  ('while_l_2 -> estatuto while_l_2','while_l_2',2,'p_while_l_2','parser_1.py',304),
  ('while_l_2 -> empty','while_l_2',1,'p_while_l_2','parser_1.py',305),
  ('func_extra -> empty','func_extra',1,'p_func_extra','parser_1.py',310),
  ('exp -> t_exp add_operator_4 exp_2','exp',3,'p_exp','parser_1.py',315),
  ('exp_2 -> OR add_operator exp','exp_2',3,'p_exp_2','parser_1.py',320),
  ('exp_2 -> empty','exp_2',1,'p_exp_2','parser_1.py',321),
  ('t_exp -> g_exp add_operator_4 t_exp_2','t_exp',3,'p_t_exp','parser_1.py',326),
  ('t_exp_2 -> AND add_operator t_exp','t_exp_2',3,'p_t_exp_2','parser_1.py',331),
  ('t_exp_2 -> empty','t_exp_2',1,'p_t_exp_2','parser_1.py',332),
  ('g_exp -> m_exp g_exp_2 add_operator_3','g_exp',3,'p_g_exp','parser_1.py',337),
  ('g_exp_2 -> LESS_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',342),
  ('g_exp_2 -> LESS add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',343),
  ('g_exp_2 -> GREATER_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',344),
  ('g_exp_2 -> GREATER add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',345),
  ('g_exp_2 -> COMPARE add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',346),
  ('g_exp_2 -> NOT_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',347),
  ('g_exp_2 -> empty','g_exp_2',1,'p_g_exp_2','parser_1.py',348),
  ('m_exp -> t add_operator_2 m_exp_2','m_exp',3,'p_m_exp','parser_1.py',353),
  ('m_exp_2 -> PLUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',358),
  ('m_exp_2 -> MINUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',359),
  ('m_exp_2 -> empty','m_exp_2',1,'p_m_exp_2','parser_1.py',360),
  ('t -> f add_operator_1 t_2','t',3,'p_t','parser_1.py',365),
  ('t_2 -> TIMES add_operator t','t_2',3,'p_t_2','parser_1.py',370),
  ('t_2 -> DIVIDE add_operator t','t_2',3,'p_t_2','parser_1.py',371),
  ('t_2 -> empty','t_2',1,'p_t_2','parser_1.py',372),
  ('f -> LPAR add_floor exp RPAR remove_floor','f',5,'p_f','parser_1.py',377),
  ('f -> variable','f',1,'p_f','parser_1.py',378),
  ('f -> llamada','f',1,'p_f','parser_1.py',379),
  ('f -> f_2','f',1,'p_f','parser_1.py',380),
  ('f_2 -> CTE_I add_constant_i','f_2',2,'p_f_2','parser_1.py',385),
  ('f_2 -> CTE_F add_constant_f','f_2',2,'p_f_2','parser_1.py',386),
  ('add_floor -> empty','add_floor',1,'p_add_floor','parser_1.py',391),
  ('remove_floor -> empty','remove_floor',1,'p_remove_floor','parser_1.py',398),
  ('add_operator -> empty','add_operator',1,'p_add_operator','parser_1.py',405),
  ('add_operator_1 -> empty','add_operator_1',1,'p_add_operator_1','parser_1.py',414),
  ('add_operator_2 -> empty','add_operator_2',1,'p_add_operator_2','parser_1.py',444),
  ('add_operator_3 -> empty','add_operator_3',1,'p_add_operator_3','parser_1.py',474),
  ('add_operator_4 -> empty','add_operator_4',1,'p_add_operator_4','parser_1.py',506),
  ('add_constant_i -> empty','add_constant_i',1,'p_add_constant_i','parser_1.py',535),
  ('add_constant_f -> empty','add_constant_f',1,'p_add_constant_f','parser_1.py',545),
  ('function -> FUNC function_2 SEMICOLON function_3','function',4,'p_function','parser_1.py',555),
  ('function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v','function_2',15,'p_function_2','parser_1.py',560),
  ('function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v','function_2',10,'p_function_2','parser_1.py',561),
  ('function_3 -> function','function_3',1,'p_function_3','parser_1.py',566),
  ('function_3 -> empty','function_3',1,'p_function_3','parser_1.py',567),
  ('function_punto1 -> empty','function_punto1',1,'p_function_punto1','parser_1.py',572),
  ('function_punto2 -> empty','function_punto2',1,'p_function_punto2','parser_1.py',582),
  ('func_agrega_v -> empty','func_agrega_v',1,'p_func_agrega_v','parser_1.py',590),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',601),
]
