
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA COMPARE CTE_F CTE_I CTE_S DATAFRAME DIVIDE ELSE EQUAL FLOAT FOR FUNC GREATER GREATER_EQUAL ID IF INT LESS LESS_EQUAL LPAR L_C_BRACKET L_S_BRACKET MAIN MINUS NOT_EQUAL OR PLUS PROGRAM READ RETURN RPAR R_C_BRACKET R_S_BRACKET SEMICOLON STRING TIMES TO VAR VOID WHILE WRITE\n    program : PROGRAM program_point ID COLON modules main\n    \n    program_point : empty\n    \n    modules : modules_2 modules_point modules_3\n    \n    modules_point : empty\n    \n    modules_2 : vars\n                | empty\n    \n    modules_3 : function\n                    | empty\n    \n    main : MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON\n    \n    main_point : empty\n    \n    body : vars func_agrega_v estatuto body_2\n    \n    body_2 : estatuto body_2\n                | empty\n    \n    tipo_simple : INT \n                | FLOAT\n                | CHAR\n    \n    tipo_comp : DATAFRAME\n    \n    vars : VAR vars_2 SEMICOLON vars_8\n    \n    vars_2 : tipo_comp vars_3\n                        | tipo_simple vars_4\n    \n    vars_3 : ID vars_5\n    \n    vars_4 : vars_3 \n                | ID vars_6\n    \n    vars_5 : COMMA vars_3\n            | empty\n    \n    vars_6 : punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7\n                | empty\n    \n    punto_id_especial : empty\n    \n    vars_7 : L_S_BRACKET CTE_I R_S_BRACKET var_mat\n                | var_array\n    \n    var_array : empty\n    \n    var_mat : empty\n    \n    vars_8 : vars \n                | empty\n    \n    param : tipo_simple ID punto_param param_2\n                | empty\n    \n    param_2 : COMMA param\n                | empty\n    \n    punto_param : empty\n    \n    variable : ID variable_2 variable_point\n    \n    variable_point : empty\n    \n    variable_2 : L_S_BRACKET exp R_S_BRACKET variable_3 \n                    | empty\n    \n    variable_3 : L_S_BRACKET exp R_S_BRACKET\n                    | empty\n    \n    estatuto : asigna\n                | llamada\n                | read\n                | write\n                | if_1\n                | for_l\n                | while_l\n                | func_extra\n    \n    asigna : variable EQUAL add_operator exp asigna_point SEMICOLON\n    \n    asigna_point : empty\n    \n    llamada : ID LPAR exp llamada_2 RPAR SEMICOLON\n    \n    llamada_2 : COMMA exp llamada_2 \n                | empty\n    \n    read : READ LPAR variable read_point RPAR SEMICOLON\n    \n    read_point : empty\n    \n    write : WRITE LPAR write_2 write_3 RPAR SEMICOLON\n    \n    write_2 : exp write_point\n                | CTE_S add_constant_s write_point\n    \n    write_3 : COMMA write_2 write_3 \n                | empty\n    \n    write_point : empty\n    \n    if_1 : IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2\n    \n    if_2 :  estatuto if_2 \n            | empty\n    \n    if_3 : ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET\n            | empty\n    \n    if_point : empty\n    \n    if_point_2 : empty\n    \n    if_point_3 : empty\n    \n    for_l : FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4\n    \n    for_l_2 : estatuto for_l_2\n                | empty\n    \n    for_point_1 : empty\n    \n    for_point_2 : empty\n    \n    for_point_3 : empty\n    \n    for_point_4 : empty\n    \n    while_l : WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3\n    \n    while_l_2 : estatuto while_l_2\n                    | empty\n    \n    while_point : empty\n    \n    while_point_2 : empty\n    \n    while_point_3 : empty\n    \n    func_extra : empty\n    \n    exp : t_exp add_operator_4 exp_2 \n    \n    exp_2 : OR add_operator exp \n            | empty\n    \n    t_exp : g_exp add_operator_4 t_exp_2 \n    \n    t_exp_2 : AND add_operator t_exp \n                | empty\n    \n    g_exp : m_exp g_exp_2 add_operator_3\n    \n    g_exp_2 : LESS_EQUAL add_operator m_exp \n                | LESS add_operator m_exp \n                | GREATER_EQUAL add_operator m_exp \n                | GREATER add_operator m_exp \n                | COMPARE add_operator m_exp \n                | NOT_EQUAL add_operator m_exp \n                | empty\n    \n    m_exp : t add_operator_2 m_exp_2\n    \n    m_exp_2 : PLUS add_operator m_exp \n                | MINUS add_operator m_exp\n                | empty\n    \n    t : f add_operator_1 t_2\n    \n    t_2 : TIMES add_operator t \n            | DIVIDE add_operator t\n            | empty\n    \n    f : LPAR add_floor exp RPAR remove_floor\n            | variable\n            | llamada\n            | f_2\n    \n    f_2 : CTE_I add_constant_i\n            | CTE_F add_constant_f\n    \n    add_floor : empty\n    \n    remove_floor : empty\n    \n    add_operator : empty \n    \n    add_operator_1 : empty \n    \n    add_operator_2 : empty \n    \n    add_operator_3 : empty \n    \n    add_operator_4 : empty \n    \n    add_constant_i : empty\n    \n    add_constant_s : empty\n    \n    add_constant_f : empty\n    \n    function : FUNC function_2 SEMICOLON function_3\n    \n    function_2 : tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET \n                    | VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET\n    \n    function_3 : function\n                    | empty\n    \n    function_punto1 : empty\n    \n    function_punto2 : empty\n    \n    func_agrega_v : empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,79,],[0,-1,-9,]),'ID':([2,3,4,17,18,19,20,21,22,29,37,38,39,40,41,43,64,69,70,71,80,81,82,83,84,85,86,87,88,96,101,103,104,105,107,109,110,111,112,121,122,124,146,155,156,158,164,165,166,167,168,169,183,203,206,210,211,212,213,214,215,217,218,221,222,224,232,234,235,237,239,240,247,248,249,250,252,253,255,269,272,274,276,277,278,283,285,294,298,299,300,301,302,303,304,305,306,308,310,314,315,316,],[-135,5,-2,31,34,-17,-14,-15,-16,-135,50,51,-18,-33,-34,31,-135,90,-134,97,90,-46,-47,-48,-49,-50,-51,-52,-53,-88,90,-88,-135,123,123,140,123,123,145,123,-119,-135,123,123,-117,123,-135,-135,-135,-135,-135,-135,123,-135,-135,123,123,123,123,123,123,-135,-135,-135,-135,123,123,123,-54,-56,123,123,123,123,123,123,-59,-61,90,90,90,90,-88,123,90,90,-88,-135,-135,-67,-73,90,90,-82,-87,90,90,90,-88,-135,-75,-81,]),'COLON':([5,],[6,]),'VAR':([6,29,54,117,118,],[11,11,11,11,11,]),'FUNC':([6,8,9,10,14,15,29,39,40,41,49,],[-135,-135,-5,-6,28,-4,-135,-18,-33,-34,28,]),'MAIN':([6,7,8,9,10,14,15,25,26,27,29,39,40,41,49,55,56,57,],[-135,13,-135,-5,-6,-135,-4,-3,-7,-8,-135,-18,-33,-34,-135,-127,-130,-131,]),'DATAFRAME':([11,],[19,]),'INT':([11,28,65,66,148,],[20,20,20,20,20,]),'FLOAT':([11,28,65,66,148,],[21,21,21,21,21,]),'CHAR':([11,28,65,66,148,],[22,22,22,22,22,]),'LPAR':([13,23,24,50,51,58,59,60,61,90,91,92,93,94,95,104,105,107,110,111,113,114,121,122,123,124,146,155,156,158,164,165,166,167,168,169,183,195,203,206,210,211,212,213,214,215,217,218,221,222,224,232,234,239,240,247,248,249,250,277,],[-135,35,-10,-135,-135,65,-132,66,-133,105,109,110,111,112,-135,-135,124,124,124,124,146,-85,124,-119,105,-135,124,124,-117,124,-135,-135,-135,-135,-135,-135,124,234,-135,-135,124,124,124,124,124,124,-135,-135,-135,-135,124,124,124,124,124,124,124,124,124,124,]),'SEMICOLON':([16,30,31,32,33,34,36,42,44,45,47,52,67,68,76,77,78,106,108,119,123,126,127,128,129,130,131,132,133,134,135,136,137,152,153,154,160,161,162,163,170,171,172,173,174,175,176,177,178,179,196,197,198,200,202,204,205,207,208,209,216,219,220,223,225,226,227,228,236,237,241,242,243,244,245,246,260,261,262,263,264,265,266,267,268,273,281,286,287,289,293,311,313,],[29,-19,-135,-20,-22,-135,49,-21,-25,-23,-25,-24,-135,79,-26,-30,-31,-135,-43,-135,-135,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,-29,-32,-135,-135,-123,-135,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,-129,235,-55,237,-89,-91,-92,-94,-95,-122,-103,-106,-107,-110,-42,-45,252,253,-135,-56,-96,-97,-98,-99,-100,-101,-111,-118,-90,-93,-104,-105,-108,-109,-44,279,-135,-128,294,-71,298,-70,314,]),'VOID':([28,],[38,]),'READ':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,235,237,252,253,255,269,272,274,276,278,283,285,294,298,299,300,301,302,303,304,305,306,308,310,314,315,316,],[-135,-18,-33,-34,-135,91,-134,91,-46,-47,-48,-49,-50,-51,-52,-53,-88,91,-88,-54,-56,-59,-61,91,91,91,91,-88,91,91,-88,-135,-135,-67,-73,91,91,-82,-87,91,91,91,-88,-135,-75,-81,]),'WRITE':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,235,237,252,253,255,269,272,274,276,278,283,285,294,298,299,300,301,302,303,304,305,306,308,310,314,315,316,],[-135,-18,-33,-34,-135,92,-134,92,-46,-47,-48,-49,-50,-51,-52,-53,-88,92,-88,-54,-56,-59,-61,92,92,92,92,-88,92,92,-88,-135,-135,-67,-73,92,92,-82,-87,92,92,92,-88,-135,-75,-81,]),'IF':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,235,237,252,253,255,269,272,274,276,278,283,285,294,298,299,300,301,302,303,304,305,306,308,310,314,315,316,],[-135,-18,-33,-34,-135,93,-134,93,-46,-47,-48,-49,-50,-51,-52,-53,-88,93,-88,-54,-56,-59,-61,93,93,93,93,-88,93,93,-88,-135,-135,-67,-73,93,93,-82,-87,93,93,93,-88,-135,-75,-81,]),'FOR':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,235,237,252,253,255,269,272,274,276,278,283,285,294,298,299,300,301,302,303,304,305,306,308,310,314,315,316,],[-135,-18,-33,-34,-135,94,-134,94,-46,-47,-48,-49,-50,-51,-52,-53,-88,94,-88,-54,-56,-59,-61,94,94,94,94,-88,94,94,-88,-135,-135,-67,-73,94,94,-82,-87,94,94,94,-88,-135,-75,-81,]),'WHILE':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,235,237,252,253,255,269,272,274,276,278,283,285,294,298,299,300,301,302,303,304,305,306,308,310,314,315,316,],[-135,-18,-33,-34,-135,95,-134,95,-46,-47,-48,-49,-50,-51,-52,-53,-88,95,-88,-54,-56,-59,-61,95,95,95,95,-88,95,95,-88,-135,-135,-67,-73,95,95,-82,-87,95,95,95,-88,-135,-75,-81,]),'R_C_BRACKET':([29,39,40,41,63,64,69,70,80,81,82,83,84,85,86,87,88,96,101,102,103,120,151,235,237,252,253,255,269,272,274,275,276,278,279,280,283,284,285,292,294,298,299,300,301,302,303,304,305,306,307,308,309,310,312,314,315,316,],[-135,-18,-33,-34,68,-135,-135,-134,-135,-46,-47,-48,-49,-50,-51,-52,-53,-88,-135,-11,-13,-12,196,-54,-56,-59,-61,-135,-135,-135,-135,281,-69,-135,286,-68,-135,293,-84,-83,-135,-135,-67,-73,-135,-135,-82,-87,-135,-135,311,-135,313,-77,-76,-135,-75,-81,]),'RETURN':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,102,103,120,150,235,237,252,253,294,298,299,300,303,304,314,315,316,],[-135,-18,-33,-34,-135,-135,-134,-135,-46,-47,-48,-49,-50,-51,-52,-53,-88,-135,-11,-13,-12,195,-54,-56,-59,-61,-135,-135,-67,-73,-82,-87,-135,-75,-81,]),'COMMA':([31,34,97,106,108,115,116,123,125,126,127,128,129,130,131,132,133,134,135,136,137,141,142,143,160,161,162,163,170,171,172,173,174,175,176,177,178,179,185,186,187,188,201,202,204,205,207,208,209,216,219,220,223,225,226,229,230,236,237,241,242,243,244,245,246,260,261,262,263,264,265,266,267,268,],[43,43,-135,-135,-43,148,-39,-135,158,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,183,-135,-135,-135,-123,-135,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,-62,-66,-135,-125,158,-89,-91,-92,-94,-95,-122,-103,-106,-107,-110,-42,-45,183,-63,-135,-56,-96,-97,-98,-99,-100,-101,-111,-118,-90,-93,-104,-105,-108,-109,-44,]),'L_S_BRACKET':([34,46,47,67,90,123,140,179,],[-135,53,-28,75,107,107,107,224,]),'RPAR':([35,65,66,72,73,74,97,106,108,115,116,123,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,147,148,149,157,159,160,161,162,163,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,189,190,193,194,199,201,202,204,205,207,208,209,216,219,220,223,225,226,229,230,236,237,238,241,242,243,244,245,246,254,259,260,261,262,263,264,265,266,267,268,282,290,291,],[48,-135,-135,98,-36,99,-135,-135,-43,-135,-39,-135,-135,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-135,-135,-135,-135,-135,-35,-135,-38,200,-58,-135,-123,-135,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,227,-60,228,-65,-62,-66,-135,-125,231,-72,233,-37,236,-135,-89,-91,-92,-94,-95,-122,-103,-106,-107,-110,-42,-45,-135,-63,-135,-56,-57,-96,-97,-98,-99,-100,-101,-64,273,-111,-118,-90,-93,-104,-105,-108,-109,-44,-135,297,-80,]),'L_C_BRACKET':([48,98,99,231,233,257,258,288,295,296,297,],[54,117,118,255,-135,272,-86,-135,301,-74,302,]),'CTE_I':([53,75,104,105,107,110,111,121,122,124,146,155,156,158,164,165,166,167,168,169,183,203,206,210,211,212,213,214,215,217,218,221,222,224,232,234,239,240,247,248,249,250,277,],[62,100,-135,134,134,134,134,134,-119,-135,134,134,-117,134,-135,-135,-135,-135,-135,-135,134,-135,-135,134,134,134,134,134,134,-135,-135,-135,-135,134,134,134,134,134,134,134,134,134,134,]),'R_S_BRACKET':([62,100,106,108,123,126,127,128,129,130,131,132,133,134,135,136,137,138,160,161,162,163,170,171,172,173,174,175,176,177,178,179,202,204,205,207,208,209,216,219,220,223,225,226,236,237,241,242,243,244,245,246,251,260,261,262,263,264,265,266,267,268,],[67,119,-135,-43,-135,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,179,-135,-123,-135,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,-89,-91,-92,-94,-95,-122,-103,-106,-107,-110,-42,-45,-135,-56,-96,-97,-98,-99,-100,-101,268,-111,-118,-90,-93,-104,-105,-108,-109,-44,]),'EQUAL':([89,90,106,108,136,137,145,179,191,192,225,226,268,],[104,-135,-135,-43,-40,-41,-135,-135,232,-78,-42,-45,-44,]),'CTE_F':([104,105,107,110,111,121,122,124,146,155,156,158,164,165,166,167,168,169,183,203,206,210,211,212,213,214,215,217,218,221,222,224,232,234,239,240,247,248,249,250,277,],[-135,135,135,135,135,135,-119,-135,135,135,-117,135,-135,-135,-135,-135,-135,-135,135,-135,-135,135,135,135,135,135,135,-135,-135,-135,-135,135,135,135,135,135,135,135,135,135,135,]),'TIMES':([106,108,123,130,131,132,133,134,135,136,137,173,174,175,176,177,178,179,225,226,236,237,260,261,268,],[-135,-43,-135,-135,-112,-113,-114,-135,-135,-40,-41,221,-120,-115,-124,-116,-126,-135,-42,-45,-135,-56,-111,-118,-44,]),'DIVIDE':([106,108,123,130,131,132,133,134,135,136,137,173,174,175,176,177,178,179,225,226,236,237,260,261,268,],[-135,-43,-135,-135,-112,-113,-114,-135,-135,-40,-41,222,-120,-115,-124,-116,-126,-135,-42,-45,-135,-56,-111,-118,-44,]),'PLUS':([106,108,123,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,220,223,225,226,236,237,260,261,266,267,268,],[-135,-43,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,217,-121,-135,-120,-115,-124,-116,-126,-135,-107,-110,-42,-45,-135,-56,-111,-118,-108,-109,-44,]),'MINUS':([106,108,123,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,220,223,225,226,236,237,260,261,266,267,268,],[-135,-43,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,218,-121,-135,-120,-115,-124,-116,-126,-135,-107,-110,-42,-45,-135,-56,-111,-118,-108,-109,-44,]),'LESS_EQUAL':([106,108,123,128,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,216,219,220,223,225,226,236,237,260,261,264,265,266,267,268,],[-135,-43,-135,164,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-121,-135,-120,-115,-124,-116,-126,-135,-103,-106,-107,-110,-42,-45,-135,-56,-111,-118,-104,-105,-108,-109,-44,]),'LESS':([106,108,123,128,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,216,219,220,223,225,226,236,237,260,261,264,265,266,267,268,],[-135,-43,-135,165,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-121,-135,-120,-115,-124,-116,-126,-135,-103,-106,-107,-110,-42,-45,-135,-56,-111,-118,-104,-105,-108,-109,-44,]),'GREATER_EQUAL':([106,108,123,128,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,216,219,220,223,225,226,236,237,260,261,264,265,266,267,268,],[-135,-43,-135,166,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-121,-135,-120,-115,-124,-116,-126,-135,-103,-106,-107,-110,-42,-45,-135,-56,-111,-118,-104,-105,-108,-109,-44,]),'GREATER':([106,108,123,128,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,216,219,220,223,225,226,236,237,260,261,264,265,266,267,268,],[-135,-43,-135,167,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-121,-135,-120,-115,-124,-116,-126,-135,-103,-106,-107,-110,-42,-45,-135,-56,-111,-118,-104,-105,-108,-109,-44,]),'COMPARE':([106,108,123,128,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,216,219,220,223,225,226,236,237,260,261,264,265,266,267,268,],[-135,-43,-135,168,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-121,-135,-120,-115,-124,-116,-126,-135,-103,-106,-107,-110,-42,-45,-135,-56,-111,-118,-104,-105,-108,-109,-44,]),'NOT_EQUAL':([106,108,123,128,129,130,131,132,133,134,135,136,137,171,172,173,174,175,176,177,178,179,216,219,220,223,225,226,236,237,260,261,264,265,266,267,268,],[-135,-43,-135,169,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-121,-135,-120,-115,-124,-116,-126,-135,-103,-106,-107,-110,-42,-45,-135,-56,-111,-118,-104,-105,-108,-109,-44,]),'AND':([106,108,123,127,128,129,130,131,132,133,134,135,136,137,161,162,163,170,171,172,173,174,175,176,177,178,179,208,209,216,219,220,223,225,226,236,237,241,242,243,244,245,246,260,261,264,265,266,267,268,],[-135,-43,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,-123,206,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,-95,-122,-103,-106,-107,-110,-42,-45,-135,-56,-96,-97,-98,-99,-100,-101,-111,-118,-104,-105,-108,-109,-44,]),'OR':([106,108,123,126,127,128,129,130,131,132,133,134,135,136,137,160,161,162,163,170,171,172,173,174,175,176,177,178,179,205,207,208,209,216,219,220,223,225,226,236,237,241,242,243,244,245,246,260,261,263,264,265,266,267,268,],[-135,-43,-135,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,203,-123,-135,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,-92,-94,-95,-122,-103,-106,-107,-110,-42,-45,-135,-56,-96,-97,-98,-99,-100,-101,-111,-118,-93,-104,-105,-108,-109,-44,]),'TO':([106,108,123,126,127,128,129,130,131,132,133,134,135,136,137,160,161,162,163,170,171,172,173,174,175,176,177,178,179,202,204,205,207,208,209,216,219,220,223,225,226,236,237,241,242,243,244,245,246,256,260,261,262,263,264,265,266,267,268,270,271,],[-135,-43,-135,-135,-135,-135,-135,-135,-112,-113,-114,-135,-135,-40,-41,-135,-123,-135,-135,-102,-135,-121,-135,-120,-115,-124,-116,-126,-135,-89,-91,-92,-94,-95,-122,-103,-106,-107,-110,-42,-45,-135,-56,-96,-97,-98,-99,-100,-101,-135,-111,-118,-90,-93,-104,-105,-108,-109,-44,277,-79,]),'CTE_S':([110,183,],[143,143,]),'ELSE':([281,],[288,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_point':([2,],[3,]),'empty':([2,6,8,13,14,29,31,34,49,50,51,64,65,66,67,69,80,90,95,97,101,104,106,115,119,123,124,125,126,127,128,129,130,134,135,139,140,141,142,143,144,145,148,154,160,162,163,164,165,166,167,168,169,171,173,179,187,201,203,206,217,218,221,222,229,233,236,255,256,269,272,274,278,281,282,283,288,294,298,301,302,305,306,308,314,],[4,10,15,24,27,41,44,47,57,59,61,70,73,73,78,96,103,108,114,116,103,122,137,149,153,108,156,159,161,161,170,172,174,176,178,181,108,184,186,188,190,192,73,198,204,207,209,122,122,122,122,122,122,219,223,226,186,159,122,122,122,122,122,122,184,258,261,96,271,276,96,276,285,289,291,285,296,300,304,96,96,276,310,310,316,]),'modules':([6,],[7,]),'modules_2':([6,],[8,]),'vars':([6,29,54,117,118,],[9,40,64,64,64,]),'main':([7,],[12,]),'modules_point':([8,],[14,]),'vars_2':([11,],[16,]),'tipo_comp':([11,],[17,]),'tipo_simple':([11,28,65,66,148,],[18,37,71,71,71,]),'main_point':([13,],[23,]),'modules_3':([14,],[25,]),'function':([14,49,],[26,56,]),'vars_3':([17,18,43,],[30,33,52,]),'vars_4':([18,],[32,]),'function_2':([28,],[36,]),'vars_8':([29,],[39,]),'vars_5':([31,34,],[42,42,]),'vars_6':([34,],[45,]),'punto_id_especial':([34,],[46,]),'function_3':([49,],[55,]),'function_punto1':([50,],[58,]),'function_punto2':([51,],[60,]),'body':([54,117,118,],[63,150,151,]),'func_agrega_v':([64,],[69,]),'param':([65,66,148,],[72,74,194,]),'vars_7':([67,],[76,]),'var_array':([67,],[77,]),'estatuto':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[80,101,101,269,274,278,274,283,283,305,306,274,308,308,]),'asigna':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'llamada':([69,80,101,105,107,110,111,121,146,155,158,183,210,211,212,213,214,215,224,232,234,239,240,247,248,249,250,255,269,272,274,277,278,283,301,302,305,306,308,],[82,82,82,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,82,82,82,82,132,82,82,82,82,82,82,82,]),'read':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'write':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'if_1':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'for_l':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'while_l':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'func_extra':([69,80,101,255,269,272,274,278,283,301,302,305,306,308,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'variable':([69,80,101,105,107,109,110,111,121,146,155,158,183,210,211,212,213,214,215,224,232,234,239,240,247,248,249,250,255,269,272,274,277,278,283,301,302,305,306,308,],[89,89,89,131,131,139,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,89,89,89,89,131,89,89,89,89,89,89,89,]),'body_2':([80,101,],[102,120,]),'variable_2':([90,123,140,],[106,106,106,]),'while_point':([95,],[113,]),'punto_param':([97,],[115,]),'add_operator':([104,164,165,166,167,168,169,203,206,217,218,221,222,],[121,210,211,212,213,214,215,239,240,247,248,249,250,]),'exp':([105,107,110,111,121,146,155,158,183,224,232,234,239,277,],[125,138,142,144,154,193,199,201,142,251,256,259,262,282,]),'t_exp':([105,107,110,111,121,146,155,158,183,224,232,234,239,240,277,],[126,126,126,126,126,126,126,126,126,126,126,126,126,263,126,]),'g_exp':([105,107,110,111,121,146,155,158,183,224,232,234,239,240,277,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'m_exp':([105,107,110,111,121,146,155,158,183,210,211,212,213,214,215,224,232,234,239,240,247,248,277,],[128,128,128,128,128,128,128,128,128,241,242,243,244,245,246,128,128,128,128,128,264,265,128,]),'t':([105,107,110,111,121,146,155,158,183,210,211,212,213,214,215,224,232,234,239,240,247,248,249,250,277,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,266,267,129,]),'f':([105,107,110,111,121,146,155,158,183,210,211,212,213,214,215,224,232,234,239,240,247,248,249,250,277,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'f_2':([105,107,110,111,121,146,155,158,183,210,211,212,213,214,215,224,232,234,239,240,247,248,249,250,277,],[133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'variable_point':([106,],[136,]),'write_2':([110,183,],[141,229,]),'param_2':([115,],[147,]),'var_mat':([119,],[152,]),'add_floor':([124,],[155,]),'llamada_2':([125,201,],[157,238,]),'add_operator_4':([126,127,],[160,162,]),'g_exp_2':([128,],[163,]),'add_operator_2':([129,],[171,]),'add_operator_1':([130,],[173,]),'add_constant_i':([134,],[175,]),'add_constant_f':([135,],[177,]),'read_point':([139,],[180,]),'write_3':([141,229,],[182,254,]),'write_point':([142,187,],[185,230,]),'add_constant_s':([143,],[187,]),'if_point':([144,],[189,]),'for_point_1':([145,],[191,]),'asigna_point':([154,],[197,]),'exp_2':([160,],[202,]),'t_exp_2':([162,],[205,]),'add_operator_3':([163,],[208,]),'m_exp_2':([171,],[216,]),'t_2':([173,],[220,]),'variable_3':([179,],[225,]),'while_point_2':([233,],[257,]),'remove_floor':([236,],[260,]),'for_point_2':([256,],[270,]),'if_2':([269,274,305,],[275,280,307,]),'while_l_2':([278,283,],[284,292,]),'if_3':([281,],[287,]),'for_point_3':([282,],[290,]),'if_point_3':([288,],[295,]),'if_point_2':([294,],[299,]),'while_point_3':([298,],[303,]),'for_l_2':([306,308,],[309,312,]),'for_point_4':([314,],[315,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM program_point ID COLON modules main','program',6,'p_program','parser_1.py',60),
  ('program_point -> empty','program_point',1,'p_program_point','parser_1.py',65),
  ('modules -> modules_2 modules_point modules_3','modules',3,'p_modules','parser_1.py',72),
  ('modules_point -> empty','modules_point',1,'p_modules_point','parser_1.py',77),
  ('modules_2 -> vars','modules_2',1,'p_modules_2','parser_1.py',92),
  ('modules_2 -> empty','modules_2',1,'p_modules_2','parser_1.py',93),
  ('modules_3 -> function','modules_3',1,'p_modules_3','parser_1.py',98),
  ('modules_3 -> empty','modules_3',1,'p_modules_3','parser_1.py',99),
  ('main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON','main',8,'p_main','parser_1.py',104),
  ('main_point -> empty','main_point',1,'p_main_point','parser_1.py',109),
  ('body -> vars func_agrega_v estatuto body_2','body',4,'p_body','parser_1.py',117),
  ('body_2 -> estatuto body_2','body_2',2,'p_body_2','parser_1.py',123),
  ('body_2 -> empty','body_2',1,'p_body_2','parser_1.py',124),
  ('tipo_simple -> INT','tipo_simple',1,'p_tipo_simple','parser_1.py',129),
  ('tipo_simple -> FLOAT','tipo_simple',1,'p_tipo_simple','parser_1.py',130),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','parser_1.py',131),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','parser_1.py',138),
  ('vars -> VAR vars_2 SEMICOLON vars_8','vars',4,'p_vars','parser_1.py',145),
  ('vars_2 -> tipo_comp vars_3','vars_2',2,'p_vars_2','parser_1.py',151),
  ('vars_2 -> tipo_simple vars_4','vars_2',2,'p_vars_2','parser_1.py',152),
  ('vars_3 -> ID vars_5','vars_3',2,'p_vars_3','parser_1.py',157),
  ('vars_4 -> vars_3','vars_4',1,'p_vars_4','parser_1.py',174),
  ('vars_4 -> ID vars_6','vars_4',2,'p_vars_4','parser_1.py',175),
  ('vars_5 -> COMMA vars_3','vars_5',2,'p_vars_5','parser_1.py',180),
  ('vars_5 -> empty','vars_5',1,'p_vars_5','parser_1.py',181),
  ('vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7','vars_6',5,'p_vars_6','parser_1.py',186),
  ('vars_6 -> empty','vars_6',1,'p_vars_6','parser_1.py',187),
  ('punto_id_especial -> empty','punto_id_especial',1,'p_punto_id_especial','parser_1.py',191),
  ('vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat','vars_7',4,'p_vars_7','parser_1.py',198),
  ('vars_7 -> var_array','vars_7',1,'p_vars_7','parser_1.py',199),
  ('var_array -> empty','var_array',1,'p_var_array','parser_1.py',204),
  ('var_mat -> empty','var_mat',1,'p_var_mat','parser_1.py',214),
  ('vars_8 -> vars','vars_8',1,'p_vars_8','parser_1.py',225),
  ('vars_8 -> empty','vars_8',1,'p_vars_8','parser_1.py',226),
  ('param -> tipo_simple ID punto_param param_2','param',4,'p_param','parser_1.py',231),
  ('param -> empty','param',1,'p_param','parser_1.py',232),
  ('param_2 -> COMMA param','param_2',2,'p_param_2','parser_1.py',237),
  ('param_2 -> empty','param_2',1,'p_param_2','parser_1.py',238),
  ('punto_param -> empty','punto_param',1,'p_punto_param','parser_1.py',243),
  ('variable -> ID variable_2 variable_point','variable',3,'p_variable','parser_1.py',251),
  ('variable_point -> empty','variable_point',1,'p_variable_point','parser_1.py',256),
  ('variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3','variable_2',4,'p_variable_2','parser_1.py',278),
  ('variable_2 -> empty','variable_2',1,'p_variable_2','parser_1.py',279),
  ('variable_3 -> L_S_BRACKET exp R_S_BRACKET','variable_3',3,'p_variable_3','parser_1.py',284),
  ('variable_3 -> empty','variable_3',1,'p_variable_3','parser_1.py',285),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','parser_1.py',290),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','parser_1.py',291),
  ('estatuto -> read','estatuto',1,'p_estatuto','parser_1.py',292),
  ('estatuto -> write','estatuto',1,'p_estatuto','parser_1.py',293),
  ('estatuto -> if_1','estatuto',1,'p_estatuto','parser_1.py',294),
  ('estatuto -> for_l','estatuto',1,'p_estatuto','parser_1.py',295),
  ('estatuto -> while_l','estatuto',1,'p_estatuto','parser_1.py',296),
  ('estatuto -> func_extra','estatuto',1,'p_estatuto','parser_1.py',297),
  ('asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON','asigna',6,'p_asigna','parser_1.py',302),
  ('asigna_point -> empty','asigna_point',1,'p_asigna_point','parser_1.py',307),
  ('llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON','llamada',6,'p_llamada','parser_1.py',333),
  ('llamada_2 -> COMMA exp llamada_2','llamada_2',3,'p_llamada_2','parser_1.py',338),
  ('llamada_2 -> empty','llamada_2',1,'p_llamada_2','parser_1.py',339),
  ('read -> READ LPAR variable read_point RPAR SEMICOLON','read',6,'p_read','parser_1.py',344),
  ('read_point -> empty','read_point',1,'p_read_point','parser_1.py',349),
  ('write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON','write',6,'p_write','parser_1.py',360),
  ('write_2 -> exp write_point','write_2',2,'p_write_2','parser_1.py',365),
  ('write_2 -> CTE_S add_constant_s write_point','write_2',3,'p_write_2','parser_1.py',366),
  ('write_3 -> COMMA write_2 write_3','write_3',3,'p_write_3','parser_1.py',371),
  ('write_3 -> empty','write_3',1,'p_write_3','parser_1.py',372),
  ('write_point -> empty','write_point',1,'p_write_point','parser_1.py',377),
  ('if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2','if_1',12,'p_if_1','parser_1.py',390),
  ('if_2 -> estatuto if_2','if_2',2,'p_if_2','parser_1.py',395),
  ('if_2 -> empty','if_2',1,'p_if_2','parser_1.py',396),
  ('if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET','if_3',6,'p_if_3','parser_1.py',401),
  ('if_3 -> empty','if_3',1,'p_if_3','parser_1.py',402),
  ('if_point -> empty','if_point',1,'p_if_point','parser_1.py',407),
  ('if_point_2 -> empty','if_point_2',1,'p_if_point_2','parser_1.py',425),
  ('if_point_3 -> empty','if_point_3',1,'p_if_point_3','parser_1.py',435),
  ('for_l -> FOR LPAR ID for_point_1 EQUAL exp for_point_2 TO exp for_point_3 RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON for_point_4','for_l',17,'p_for_l','parser_1.py',447),
  ('for_l_2 -> estatuto for_l_2','for_l_2',2,'p_for_l_2','parser_1.py',453),
  ('for_l_2 -> empty','for_l_2',1,'p_for_l_2','parser_1.py',454),
  ('for_point_1 -> empty','for_point_1',1,'p_for_point_1','parser_1.py',459),
  ('for_point_2 -> empty','for_point_2',1,'p_for_point_2','parser_1.py',474),
  ('for_point_3 -> empty','for_point_3',1,'p_for_point_3','parser_1.py',500),
  ('for_point_4 -> empty','for_point_4',1,'p_for_point_4','parser_1.py',533),
  ('while_l -> WHILE while_point LPAR exp RPAR while_point_2 L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON while_point_3','while_l',12,'p_while_l','parser_1.py',564),
  ('while_l_2 -> estatuto while_l_2','while_l_2',2,'p_while_l_2','parser_1.py',569),
  ('while_l_2 -> empty','while_l_2',1,'p_while_l_2','parser_1.py',570),
  ('while_point -> empty','while_point',1,'p_while_point','parser_1.py',575),
  ('while_point_2 -> empty','while_point_2',1,'p_while_point_2','parser_1.py',583),
  ('while_point_3 -> empty','while_point_3',1,'p_while_point_3','parser_1.py',603),
  ('func_extra -> empty','func_extra',1,'p_func_extra','parser_1.py',614),
  ('exp -> t_exp add_operator_4 exp_2','exp',3,'p_exp','parser_1.py',619),
  ('exp_2 -> OR add_operator exp','exp_2',3,'p_exp_2','parser_1.py',624),
  ('exp_2 -> empty','exp_2',1,'p_exp_2','parser_1.py',625),
  ('t_exp -> g_exp add_operator_4 t_exp_2','t_exp',3,'p_t_exp','parser_1.py',630),
  ('t_exp_2 -> AND add_operator t_exp','t_exp_2',3,'p_t_exp_2','parser_1.py',635),
  ('t_exp_2 -> empty','t_exp_2',1,'p_t_exp_2','parser_1.py',636),
  ('g_exp -> m_exp g_exp_2 add_operator_3','g_exp',3,'p_g_exp','parser_1.py',641),
  ('g_exp_2 -> LESS_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',646),
  ('g_exp_2 -> LESS add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',647),
  ('g_exp_2 -> GREATER_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',648),
  ('g_exp_2 -> GREATER add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',649),
  ('g_exp_2 -> COMPARE add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',650),
  ('g_exp_2 -> NOT_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',651),
  ('g_exp_2 -> empty','g_exp_2',1,'p_g_exp_2','parser_1.py',652),
  ('m_exp -> t add_operator_2 m_exp_2','m_exp',3,'p_m_exp','parser_1.py',657),
  ('m_exp_2 -> PLUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',662),
  ('m_exp_2 -> MINUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',663),
  ('m_exp_2 -> empty','m_exp_2',1,'p_m_exp_2','parser_1.py',664),
  ('t -> f add_operator_1 t_2','t',3,'p_t','parser_1.py',669),
  ('t_2 -> TIMES add_operator t','t_2',3,'p_t_2','parser_1.py',674),
  ('t_2 -> DIVIDE add_operator t','t_2',3,'p_t_2','parser_1.py',675),
  ('t_2 -> empty','t_2',1,'p_t_2','parser_1.py',676),
  ('f -> LPAR add_floor exp RPAR remove_floor','f',5,'p_f','parser_1.py',681),
  ('f -> variable','f',1,'p_f','parser_1.py',682),
  ('f -> llamada','f',1,'p_f','parser_1.py',683),
  ('f -> f_2','f',1,'p_f','parser_1.py',684),
  ('f_2 -> CTE_I add_constant_i','f_2',2,'p_f_2','parser_1.py',689),
  ('f_2 -> CTE_F add_constant_f','f_2',2,'p_f_2','parser_1.py',690),
  ('add_floor -> empty','add_floor',1,'p_add_floor','parser_1.py',695),
  ('remove_floor -> empty','remove_floor',1,'p_remove_floor','parser_1.py',702),
  ('add_operator -> empty','add_operator',1,'p_add_operator','parser_1.py',709),
  ('add_operator_1 -> empty','add_operator_1',1,'p_add_operator_1','parser_1.py',718),
  ('add_operator_2 -> empty','add_operator_2',1,'p_add_operator_2','parser_1.py',748),
  ('add_operator_3 -> empty','add_operator_3',1,'p_add_operator_3','parser_1.py',778),
  ('add_operator_4 -> empty','add_operator_4',1,'p_add_operator_4','parser_1.py',808),
  ('add_constant_i -> empty','add_constant_i',1,'p_add_constant_i','parser_1.py',837),
  ('add_constant_s -> empty','add_constant_s',1,'p_add_constant_s','parser_1.py',855),
  ('add_constant_f -> empty','add_constant_f',1,'p_add_constant_f','parser_1.py',872),
  ('function -> FUNC function_2 SEMICOLON function_3','function',4,'p_function','parser_1.py',889),
  ('function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET','function_2',14,'p_function_2','parser_1.py',894),
  ('function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET','function_2',9,'p_function_2','parser_1.py',895),
  ('function_3 -> function','function_3',1,'p_function_3','parser_1.py',900),
  ('function_3 -> empty','function_3',1,'p_function_3','parser_1.py',901),
  ('function_punto1 -> empty','function_punto1',1,'p_function_punto1','parser_1.py',906),
  ('function_punto2 -> empty','function_punto2',1,'p_function_punto2','parser_1.py',916),
  ('func_agrega_v -> empty','func_agrega_v',1,'p_func_agrega_v','parser_1.py',924),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',935),
]
