
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA COMPARE CTE_F CTE_I CTE_S DATAFRAME DIVIDE ELSE EQUAL FLOAT FOR FUNC GREATER GREATER_EQUAL ID IF INT LESS LESS_EQUAL LPAR L_C_BRACKET L_S_BRACKET MAIN MINUS NOT_EQUAL OR PLUS PROGRAM READ RETURN RPAR R_C_BRACKET R_S_BRACKET SEMICOLON STRING TIMES TO VAR VOID WHILE WRITE\n    program : PROGRAM program_point ID COLON modules main\n    \n    program_point : empty\n    \n    modules : modules_2 modules_point modules_3\n    \n    modules_point : empty\n    \n    modules_2 : vars\n                | empty\n    \n    modules_3 : function\n                    | empty\n    \n    main : MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON\n    \n    body : vars func_agrega_v estatuto body_2\n    \n    body_2 : estatuto body_2\n                | empty\n    \n    tipo_simple : INT \n                | FLOAT\n                | CHAR\n    \n    tipo_comp : DATAFRAME\n    \n    vars : VAR vars_2 SEMICOLON vars_8\n    \n    vars_2 : tipo_comp vars_3\n                        | tipo_simple vars_4\n    \n    vars_3 : ID vars_5\n    \n    vars_4 : vars_3 \n                | ID vars_6\n    \n    vars_5 : COMMA vars_3\n            | empty\n    \n    vars_6 : punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7\n                | empty\n    \n    punto_id_especial : empty\n    \n    vars_7 : L_S_BRACKET CTE_I R_S_BRACKET var_mat\n                | var_array\n    \n    var_array : empty\n    \n    var_mat : empty\n    \n    vars_8 : vars \n                | empty\n    \n    param : tipo_simple ID punto_param param_2\n                | empty\n    \n    param_2 : COMMA param\n                | empty\n    \n    punto_param : empty\n    \n    variable : ID variable_2 variable_point\n    \n    variable_point : empty\n    \n    variable_2 : L_S_BRACKET exp R_S_BRACKET variable_3 \n                    | empty\n    \n    variable_3 : L_S_BRACKET exp R_S_BRACKET\n                    | empty\n    \n    estatuto : asigna\n                | llamada\n                | read\n                | write\n                | if_1\n                | for_l\n                | while_l\n                | func_extra\n    \n    asigna : variable EQUAL add_operator exp asigna_point SEMICOLON\n    \n    asigna_point : empty\n    \n    llamada : ID LPAR exp llamada_2 RPAR SEMICOLON\n    \n    llamada_2 : COMMA exp llamada_2 \n                | empty\n    \n    read : READ LPAR variable read_point RPAR SEMICOLON\n    \n    read_point : empty\n    \n    write : WRITE LPAR write_2 write_3 RPAR SEMICOLON\n    \n    write_2 : exp write_point\n                | CTE_S add_constant_s write_point\n    \n    write_3 : COMMA write_2 write_3 \n                | empty\n    \n    write_point : empty\n    \n    if_1 : IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON\n    \n    if_2 : estatuto if_2 \n            | empty\n    \n    if_3 : ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET\n    \n    for_l : FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON\n    \n    for_l_2 : estatuto for_l_2\n                | empty\n    \n    while_l : WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON\n    \n    while_l_2 : estatuto while_l_2\n                    | empty\n    \n    func_extra : empty\n    \n    exp : t_exp add_operator_4 exp_2 \n    \n    exp_2 : OR add_operator exp \n            | empty\n    \n    t_exp : g_exp add_operator_4 t_exp_2 \n    \n    t_exp_2 : AND add_operator t_exp \n                | empty\n    \n    g_exp : m_exp g_exp_2 add_operator_3\n    \n    g_exp_2 : LESS_EQUAL add_operator m_exp \n                | LESS add_operator m_exp \n                | GREATER_EQUAL add_operator m_exp \n                | GREATER add_operator m_exp \n                | COMPARE add_operator m_exp \n                | NOT_EQUAL add_operator m_exp \n                | empty\n    \n    m_exp : t add_operator_2 m_exp_2\n    \n    m_exp_2 : PLUS add_operator m_exp \n                | MINUS add_operator m_exp\n                | empty\n    \n    t : f add_operator_1 t_2\n    \n    t_2 : TIMES add_operator t \n            | DIVIDE add_operator t\n            | empty\n    \n    f : LPAR add_floor exp RPAR remove_floor\n            | variable\n            | llamada\n            | f_2\n    \n    f_2 : CTE_I add_constant_i\n            | CTE_F add_constant_f\n    \n    add_floor : empty\n    \n    remove_floor : empty\n    \n    add_operator : empty \n    \n    add_operator_1 : empty \n    \n    add_operator_2 : empty \n    \n    add_operator_3 : empty \n    \n    add_operator_4 : empty \n    \n    add_constant_i : empty\n    \n    add_constant_s : empty\n    \n    add_constant_f : empty\n    \n    function : FUNC function_2 SEMICOLON function_3\n    \n    function_2 : tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET \n                    | VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET\n    \n    function_3 : function\n                    | empty\n    \n    function_punto1 : empty\n    \n    function_punto2 : empty\n    \n    func_agrega_v : empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,69,],[0,-1,-9,]),'ID':([2,3,4,17,18,19,20,21,22,28,36,37,38,39,40,42,54,64,65,70,71,72,73,74,75,76,77,78,86,87,95,97,98,99,101,103,104,105,106,107,113,114,116,145,146,148,154,155,156,157,158,159,173,195,198,202,203,204,205,206,207,209,210,213,214,216,223,224,225,229,231,233,234,241,242,243,244,246,247,249,251,252,262,264,265,266,268,279,281,282,283,285,286,288,290,294,],[-123,5,-2,30,33,-16,-13,-14,-15,-123,49,50,-17,-32,-33,30,-123,80,-122,80,-45,-46,-47,-48,-49,-50,-51,-52,-76,108,80,-76,-123,115,115,132,115,115,137,115,115,-107,-123,115,-105,115,-123,-123,-123,-123,-123,-123,115,-123,-123,115,115,115,115,115,115,-123,-123,-123,-123,115,80,115,80,-53,-55,115,115,115,115,115,115,-58,-60,80,80,115,80,-76,115,80,-76,-73,-66,80,80,80,80,80,-76,-70,]),'COLON':([5,],[6,]),'VAR':([6,28,47,141,142,],[11,11,11,11,11,]),'FUNC':([6,8,9,10,14,15,28,38,39,40,48,],[-123,-123,-5,-6,27,-4,-123,-17,-32,-33,27,]),'MAIN':([6,7,8,9,10,14,15,24,25,26,28,38,39,40,48,55,56,57,],[-123,13,-123,-5,-6,-123,-4,-3,-7,-8,-123,-17,-32,-33,-123,-115,-118,-119,]),'DATAFRAME':([11,],[19,]),'INT':([11,27,66,67,183,],[20,20,20,20,20,]),'FLOAT':([11,27,66,67,183,],[21,21,21,21,21,]),'CHAR':([11,27,66,67,183,],[22,22,22,22,22,]),'LPAR':([13,49,50,58,59,60,61,80,81,82,83,84,85,98,99,101,104,105,107,113,114,115,116,145,146,148,154,155,156,157,158,159,173,195,198,202,203,204,205,206,207,209,210,213,214,216,224,227,233,234,241,242,243,244,252,265,],[23,-123,-123,66,-120,67,-121,99,103,104,105,106,107,-123,116,116,116,116,116,116,-107,99,-123,116,-105,116,-123,-123,-123,-123,-123,-123,116,-123,-123,116,116,116,116,116,116,-123,-123,-123,-123,116,116,252,116,116,116,116,116,116,116,116,]),'SEMICOLON':([16,29,30,31,32,33,35,41,43,44,46,51,63,68,92,93,94,100,102,115,118,119,120,121,122,123,124,125,126,127,128,129,143,144,150,151,152,153,160,161,162,163,164,165,166,167,168,169,187,188,189,190,192,194,196,197,199,200,201,208,211,212,215,217,218,219,220,228,230,231,235,236,237,238,239,240,253,254,255,256,257,258,259,260,261,274,275,276,284,291,293,],[28,-18,-123,-19,-21,-123,48,-20,-24,-22,-24,-23,69,-123,-25,-29,-30,-123,-42,-123,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-123,-123,-111,-123,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,-28,-31,229,-54,231,-77,-79,-80,-82,-83,-110,-91,-94,-95,-98,-41,-44,246,247,-117,-123,-55,-84,-85,-86,-87,-88,-89,-99,-106,-78,-81,-92,-93,-96,-97,-43,279,280,281,-116,-69,294,]),'RPAR':([23,66,67,88,89,90,100,102,108,115,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,135,136,137,138,139,140,147,149,150,151,152,153,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,177,178,182,183,184,191,193,194,196,197,199,200,201,208,211,212,215,217,218,221,222,226,230,231,232,235,236,237,238,239,240,248,253,254,255,256,257,258,259,260,261,269,272,],[34,-123,-123,109,-35,110,-123,-42,-123,-123,-123,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-123,-123,-123,-123,179,180,181,-123,-38,192,-57,-123,-111,-123,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,219,-59,220,-64,-61,-65,-123,-113,-34,-123,-37,230,-123,-77,-79,-80,-82,-83,-110,-91,-94,-95,-98,-41,-44,-123,-62,-36,-123,-55,-56,-84,-85,-86,-87,-88,-89,-63,-99,-106,-78,-81,-92,-93,-96,-97,-43,275,278,]),'VOID':([27,],[37,]),'READ':([28,38,39,40,54,64,65,70,71,72,73,74,75,76,77,78,86,95,97,223,225,229,231,246,247,249,251,262,264,266,268,279,281,282,283,285,286,288,290,294,],[-123,-17,-32,-33,-123,81,-122,81,-45,-46,-47,-48,-49,-50,-51,-52,-76,81,-76,81,81,-53,-55,-58,-60,81,81,81,-76,81,-76,-73,-66,81,81,81,81,81,-76,-70,]),'WRITE':([28,38,39,40,54,64,65,70,71,72,73,74,75,76,77,78,86,95,97,223,225,229,231,246,247,249,251,262,264,266,268,279,281,282,283,285,286,288,290,294,],[-123,-17,-32,-33,-123,82,-122,82,-45,-46,-47,-48,-49,-50,-51,-52,-76,82,-76,82,82,-53,-55,-58,-60,82,82,82,-76,82,-76,-73,-66,82,82,82,82,82,-76,-70,]),'IF':([28,38,39,40,54,64,65,70,71,72,73,74,75,76,77,78,86,95,97,223,225,229,231,246,247,249,251,262,264,266,268,279,281,282,283,285,286,288,290,294,],[-123,-17,-32,-33,-123,83,-122,83,-45,-46,-47,-48,-49,-50,-51,-52,-76,83,-76,83,83,-53,-55,-58,-60,83,83,83,-76,83,-76,-73,-66,83,83,83,83,83,-76,-70,]),'FOR':([28,38,39,40,54,64,65,70,71,72,73,74,75,76,77,78,86,95,97,223,225,229,231,246,247,249,251,262,264,266,268,279,281,282,283,285,286,288,290,294,],[-123,-17,-32,-33,-123,84,-122,84,-45,-46,-47,-48,-49,-50,-51,-52,-76,84,-76,84,84,-53,-55,-58,-60,84,84,84,-76,84,-76,-73,-66,84,84,84,84,84,-76,-70,]),'WHILE':([28,38,39,40,54,64,65,70,71,72,73,74,75,76,77,78,86,95,97,223,225,229,231,246,247,249,251,262,264,266,268,279,281,282,283,285,286,288,290,294,],[-123,-17,-32,-33,-123,85,-122,85,-45,-46,-47,-48,-49,-50,-51,-52,-76,85,-76,85,85,-53,-55,-58,-60,85,85,85,-76,85,-76,-73,-66,85,85,85,85,85,-76,-70,]),'R_C_BRACKET':([28,38,39,40,53,54,64,65,70,71,72,73,74,75,76,77,78,86,95,96,97,112,186,223,225,229,231,246,247,249,251,262,263,264,266,267,268,270,273,279,280,281,282,283,285,286,287,288,289,290,292,294,],[-123,-17,-32,-33,63,-123,-123,-122,-123,-45,-46,-47,-48,-49,-50,-51,-52,-76,-123,-10,-12,-11,228,-123,-123,-53,-55,-58,-60,-123,-123,-123,271,-68,-123,274,-75,-67,-74,-73,284,-66,-123,-123,-123,-123,291,-123,293,-72,-71,-70,]),'RETURN':([28,38,39,40,54,64,65,70,71,72,73,74,75,76,77,78,86,95,96,97,112,185,229,231,246,247,279,281,294,],[-123,-17,-32,-33,-123,-123,-122,-123,-45,-46,-47,-48,-49,-50,-51,-52,-76,-123,-10,-12,-11,227,-53,-55,-58,-60,-73,-66,-70,]),'COMMA':([30,33,100,102,108,115,117,118,119,120,121,122,123,124,125,126,127,128,129,133,134,135,139,140,150,151,152,153,160,161,162,163,164,165,166,167,168,169,175,176,177,178,193,194,196,197,199,200,201,208,211,212,215,217,218,221,222,230,231,235,236,237,238,239,240,253,254,255,256,257,258,259,260,261,],[42,42,-123,-42,-123,-123,148,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,173,-123,-123,183,-38,-123,-111,-123,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,-61,-65,-123,-113,148,-77,-79,-80,-82,-83,-110,-91,-94,-95,-98,-41,-44,173,-62,-123,-55,-84,-85,-86,-87,-88,-89,-99,-106,-78,-81,-92,-93,-96,-97,-43,]),'L_S_BRACKET':([33,45,46,68,80,115,132,169,],[-123,52,-27,91,101,101,101,216,]),'L_C_BRACKET':([34,109,110,179,181,277,278,],[47,141,142,223,225,282,283,]),'CTE_I':([52,91,98,99,101,104,105,107,113,114,116,145,146,148,154,155,156,157,158,159,173,195,198,202,203,204,205,206,207,209,210,213,214,216,224,233,234,241,242,243,244,252,265,],[62,111,-123,126,126,126,126,126,126,-107,-123,126,-105,126,-123,-123,-123,-123,-123,-123,126,-123,-123,126,126,126,126,126,126,-123,-123,-123,-123,126,126,126,126,126,126,126,126,126,126,]),'R_S_BRACKET':([62,100,102,111,115,118,119,120,121,122,123,124,125,126,127,128,129,130,150,151,152,153,160,161,162,163,164,165,166,167,168,169,194,196,197,199,200,201,208,211,212,215,217,218,230,231,235,236,237,238,239,240,245,253,254,255,256,257,258,259,260,261,],[68,-123,-42,143,-123,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,169,-123,-111,-123,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,-77,-79,-80,-82,-83,-110,-91,-94,-95,-98,-41,-44,-123,-55,-84,-85,-86,-87,-88,-89,261,-99,-106,-78,-81,-92,-93,-96,-97,-43,]),'EQUAL':([79,80,100,102,128,129,169,180,217,218,261,],[98,-123,-123,-42,-39,-40,-123,224,-41,-44,-43,]),'CTE_F':([98,99,101,104,105,107,113,114,116,145,146,148,154,155,156,157,158,159,173,195,198,202,203,204,205,206,207,209,210,213,214,216,224,233,234,241,242,243,244,252,265,],[-123,127,127,127,127,127,127,-107,-123,127,-105,127,-123,-123,-123,-123,-123,-123,127,-123,-123,127,127,127,127,127,127,-123,-123,-123,-123,127,127,127,127,127,127,127,127,127,127,]),'TIMES':([100,102,115,122,123,124,125,126,127,128,129,163,164,165,166,167,168,169,217,218,230,231,253,254,261,],[-123,-42,-123,-123,-100,-101,-102,-123,-123,-39,-40,213,-108,-103,-112,-104,-114,-123,-41,-44,-123,-55,-99,-106,-43,]),'DIVIDE':([100,102,115,122,123,124,125,126,127,128,129,163,164,165,166,167,168,169,217,218,230,231,253,254,261,],[-123,-42,-123,-123,-100,-101,-102,-123,-123,-39,-40,214,-108,-103,-112,-104,-114,-123,-41,-44,-123,-55,-99,-106,-43,]),'PLUS':([100,102,115,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,212,215,217,218,230,231,253,254,259,260,261,],[-123,-42,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,209,-109,-123,-108,-103,-112,-104,-114,-123,-95,-98,-41,-44,-123,-55,-99,-106,-96,-97,-43,]),'MINUS':([100,102,115,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,212,215,217,218,230,231,253,254,259,260,261,],[-123,-42,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,210,-109,-123,-108,-103,-112,-104,-114,-123,-95,-98,-41,-44,-123,-55,-99,-106,-96,-97,-43,]),'LESS_EQUAL':([100,102,115,120,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,208,211,212,215,217,218,230,231,253,254,257,258,259,260,261,],[-123,-42,-123,154,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-109,-123,-108,-103,-112,-104,-114,-123,-91,-94,-95,-98,-41,-44,-123,-55,-99,-106,-92,-93,-96,-97,-43,]),'LESS':([100,102,115,120,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,208,211,212,215,217,218,230,231,253,254,257,258,259,260,261,],[-123,-42,-123,155,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-109,-123,-108,-103,-112,-104,-114,-123,-91,-94,-95,-98,-41,-44,-123,-55,-99,-106,-92,-93,-96,-97,-43,]),'GREATER_EQUAL':([100,102,115,120,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,208,211,212,215,217,218,230,231,253,254,257,258,259,260,261,],[-123,-42,-123,156,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-109,-123,-108,-103,-112,-104,-114,-123,-91,-94,-95,-98,-41,-44,-123,-55,-99,-106,-92,-93,-96,-97,-43,]),'GREATER':([100,102,115,120,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,208,211,212,215,217,218,230,231,253,254,257,258,259,260,261,],[-123,-42,-123,157,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-109,-123,-108,-103,-112,-104,-114,-123,-91,-94,-95,-98,-41,-44,-123,-55,-99,-106,-92,-93,-96,-97,-43,]),'COMPARE':([100,102,115,120,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,208,211,212,215,217,218,230,231,253,254,257,258,259,260,261,],[-123,-42,-123,158,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-109,-123,-108,-103,-112,-104,-114,-123,-91,-94,-95,-98,-41,-44,-123,-55,-99,-106,-92,-93,-96,-97,-43,]),'NOT_EQUAL':([100,102,115,120,121,122,123,124,125,126,127,128,129,161,162,163,164,165,166,167,168,169,208,211,212,215,217,218,230,231,253,254,257,258,259,260,261,],[-123,-42,-123,159,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-109,-123,-108,-103,-112,-104,-114,-123,-91,-94,-95,-98,-41,-44,-123,-55,-99,-106,-92,-93,-96,-97,-43,]),'AND':([100,102,115,119,120,121,122,123,124,125,126,127,128,129,151,152,153,160,161,162,163,164,165,166,167,168,169,200,201,208,211,212,215,217,218,230,231,235,236,237,238,239,240,253,254,257,258,259,260,261,],[-123,-42,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,-111,198,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,-83,-110,-91,-94,-95,-98,-41,-44,-123,-55,-84,-85,-86,-87,-88,-89,-99,-106,-92,-93,-96,-97,-43,]),'OR':([100,102,115,118,119,120,121,122,123,124,125,126,127,128,129,150,151,152,153,160,161,162,163,164,165,166,167,168,169,197,199,200,201,208,211,212,215,217,218,230,231,235,236,237,238,239,240,253,254,256,257,258,259,260,261,],[-123,-42,-123,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,195,-111,-123,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,-80,-82,-83,-110,-91,-94,-95,-98,-41,-44,-123,-55,-84,-85,-86,-87,-88,-89,-99,-106,-81,-92,-93,-96,-97,-43,]),'TO':([100,102,115,118,119,120,121,122,123,124,125,126,127,128,129,150,151,152,153,160,161,162,163,164,165,166,167,168,169,194,196,197,199,200,201,208,211,212,215,217,218,230,231,235,236,237,238,239,240,250,253,254,255,256,257,258,259,260,261,],[-123,-42,-123,-123,-123,-123,-123,-123,-100,-101,-102,-123,-123,-39,-40,-123,-111,-123,-123,-90,-123,-109,-123,-108,-103,-112,-104,-114,-123,-77,-79,-80,-82,-83,-110,-91,-94,-95,-98,-41,-44,-123,-55,-84,-85,-86,-87,-88,-89,265,-99,-106,-78,-81,-92,-93,-96,-97,-43,]),'CTE_S':([104,173,],[135,135,]),'ELSE':([271,],[277,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_point':([2,],[3,]),'empty':([2,6,8,14,28,30,33,48,49,50,54,64,66,67,68,70,80,95,98,100,108,115,116,117,118,119,120,121,122,126,127,131,132,133,134,135,139,143,144,150,152,153,154,155,156,157,158,159,161,163,169,177,183,193,195,198,209,210,213,214,221,223,225,230,249,251,262,266,282,283,285,286,288,],[4,10,15,26,40,43,46,57,59,61,65,86,89,89,94,97,102,97,114,129,140,102,146,149,151,151,160,162,164,166,168,171,102,174,176,178,184,188,190,196,199,201,114,114,114,114,114,114,211,215,218,176,89,149,114,114,114,114,114,114,174,86,86,254,264,268,264,268,86,86,264,290,290,]),'modules':([6,],[7,]),'modules_2':([6,],[8,]),'vars':([6,28,47,141,142,],[9,39,54,54,54,]),'main':([7,],[12,]),'modules_point':([8,],[14,]),'vars_2':([11,],[16,]),'tipo_comp':([11,],[17,]),'tipo_simple':([11,27,66,67,183,],[18,36,87,87,87,]),'modules_3':([14,],[24,]),'function':([14,48,],[25,56,]),'vars_3':([17,18,42,],[29,32,51,]),'vars_4':([18,],[31,]),'function_2':([27,],[35,]),'vars_8':([28,],[38,]),'vars_5':([30,33,],[41,41,]),'vars_6':([33,],[44,]),'punto_id_especial':([33,],[45,]),'body':([47,141,142,],[53,185,186,]),'function_3':([48,],[55,]),'function_punto1':([49,],[58,]),'function_punto2':([50,],[60,]),'func_agrega_v':([54,],[64,]),'estatuto':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[70,95,95,249,251,262,266,262,266,285,286,262,288,288,]),'asigna':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'llamada':([64,70,95,99,101,104,105,107,113,145,148,173,202,203,204,205,206,207,216,223,224,225,233,234,241,242,243,244,249,251,252,262,265,266,282,283,285,286,288,],[72,72,72,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,72,124,72,124,124,124,124,124,124,72,72,124,72,124,72,72,72,72,72,72,]),'read':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'write':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'if_1':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'for_l':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'while_l':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'func_extra':([64,70,95,223,225,249,251,262,266,282,283,285,286,288,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'variable':([64,70,95,99,101,103,104,105,107,113,145,148,173,202,203,204,205,206,207,216,223,224,225,233,234,241,242,243,244,249,251,252,262,265,266,282,283,285,286,288,],[79,79,79,123,123,131,123,123,123,123,123,123,123,123,123,123,123,123,123,123,79,123,79,123,123,123,123,123,123,79,79,123,79,123,79,79,79,79,79,79,]),'param':([66,67,183,],[88,90,226,]),'vars_7':([68,],[92,]),'var_array':([68,],[93,]),'body_2':([70,95,],[96,112,]),'variable_2':([80,115,132,],[100,100,100,]),'add_operator':([98,154,155,156,157,158,159,195,198,209,210,213,214,],[113,202,203,204,205,206,207,233,234,241,242,243,244,]),'exp':([99,101,104,105,107,113,145,148,173,216,224,233,252,265,],[117,130,134,136,138,144,191,193,134,245,250,255,269,272,]),'t_exp':([99,101,104,105,107,113,145,148,173,216,224,233,234,252,265,],[118,118,118,118,118,118,118,118,118,118,118,118,256,118,118,]),'g_exp':([99,101,104,105,107,113,145,148,173,216,224,233,234,252,265,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'m_exp':([99,101,104,105,107,113,145,148,173,202,203,204,205,206,207,216,224,233,234,241,242,252,265,],[120,120,120,120,120,120,120,120,120,235,236,237,238,239,240,120,120,120,120,257,258,120,120,]),'t':([99,101,104,105,107,113,145,148,173,202,203,204,205,206,207,216,224,233,234,241,242,243,244,252,265,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,259,260,121,121,]),'f':([99,101,104,105,107,113,145,148,173,202,203,204,205,206,207,216,224,233,234,241,242,243,244,252,265,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'f_2':([99,101,104,105,107,113,145,148,173,202,203,204,205,206,207,216,224,233,234,241,242,243,244,252,265,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'variable_point':([100,],[128,]),'write_2':([104,173,],[133,221,]),'punto_param':([108,],[139,]),'add_floor':([116,],[145,]),'llamada_2':([117,193,],[147,232,]),'add_operator_4':([118,119,],[150,152,]),'g_exp_2':([120,],[153,]),'add_operator_2':([121,],[161,]),'add_operator_1':([122,],[163,]),'add_constant_i':([126,],[165,]),'add_constant_f':([127,],[167,]),'read_point':([131,],[170,]),'write_3':([133,221,],[172,248,]),'write_point':([134,177,],[175,222,]),'add_constant_s':([135,],[177,]),'param_2':([139,],[182,]),'var_mat':([143,],[187,]),'asigna_point':([144,],[189,]),'exp_2':([150,],[194,]),'t_exp_2':([152,],[197,]),'add_operator_3':([153,],[200,]),'m_exp_2':([161,],[208,]),'t_2':([163,],[212,]),'variable_3':([169,],[217,]),'remove_floor':([230,],[253,]),'if_2':([249,262,285,],[263,270,287,]),'while_l_2':([251,266,],[267,273,]),'if_3':([271,],[276,]),'for_l_2':([286,288,],[289,292,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM program_point ID COLON modules main','program',6,'p_program','parser_1.py',31),
  ('program_point -> empty','program_point',1,'p_program_point','parser_1.py',36),
  ('modules -> modules_2 modules_point modules_3','modules',3,'p_modules','parser_1.py',43),
  ('modules_point -> empty','modules_point',1,'p_modules_point','parser_1.py',48),
  ('modules_2 -> vars','modules_2',1,'p_modules_2','parser_1.py',63),
  ('modules_2 -> empty','modules_2',1,'p_modules_2','parser_1.py',64),
  ('modules_3 -> function','modules_3',1,'p_modules_3','parser_1.py',69),
  ('modules_3 -> empty','modules_3',1,'p_modules_3','parser_1.py',70),
  ('main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON','main',7,'p_main','parser_1.py',75),
  ('body -> vars func_agrega_v estatuto body_2','body',4,'p_body','parser_1.py',80),
  ('body_2 -> estatuto body_2','body_2',2,'p_body_2','parser_1.py',86),
  ('body_2 -> empty','body_2',1,'p_body_2','parser_1.py',87),
  ('tipo_simple -> INT','tipo_simple',1,'p_tipo_simple','parser_1.py',92),
  ('tipo_simple -> FLOAT','tipo_simple',1,'p_tipo_simple','parser_1.py',93),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','parser_1.py',94),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','parser_1.py',101),
  ('vars -> VAR vars_2 SEMICOLON vars_8','vars',4,'p_vars','parser_1.py',108),
  ('vars_2 -> tipo_comp vars_3','vars_2',2,'p_vars_2','parser_1.py',114),
  ('vars_2 -> tipo_simple vars_4','vars_2',2,'p_vars_2','parser_1.py',115),
  ('vars_3 -> ID vars_5','vars_3',2,'p_vars_3','parser_1.py',120),
  ('vars_4 -> vars_3','vars_4',1,'p_vars_4','parser_1.py',130),
  ('vars_4 -> ID vars_6','vars_4',2,'p_vars_4','parser_1.py',131),
  ('vars_5 -> COMMA vars_3','vars_5',2,'p_vars_5','parser_1.py',136),
  ('vars_5 -> empty','vars_5',1,'p_vars_5','parser_1.py',137),
  ('vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7','vars_6',5,'p_vars_6','parser_1.py',142),
  ('vars_6 -> empty','vars_6',1,'p_vars_6','parser_1.py',143),
  ('punto_id_especial -> empty','punto_id_especial',1,'p_punto_id_especial','parser_1.py',147),
  ('vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat','vars_7',4,'p_vars_7','parser_1.py',154),
  ('vars_7 -> var_array','vars_7',1,'p_vars_7','parser_1.py',155),
  ('var_array -> empty','var_array',1,'p_var_array','parser_1.py',160),
  ('var_mat -> empty','var_mat',1,'p_var_mat','parser_1.py',170),
  ('vars_8 -> vars','vars_8',1,'p_vars_8','parser_1.py',181),
  ('vars_8 -> empty','vars_8',1,'p_vars_8','parser_1.py',182),
  ('param -> tipo_simple ID punto_param param_2','param',4,'p_param','parser_1.py',187),
  ('param -> empty','param',1,'p_param','parser_1.py',188),
  ('param_2 -> COMMA param','param_2',2,'p_param_2','parser_1.py',193),
  ('param_2 -> empty','param_2',1,'p_param_2','parser_1.py',194),
  ('punto_param -> empty','punto_param',1,'p_punto_param','parser_1.py',199),
  ('variable -> ID variable_2 variable_point','variable',3,'p_variable','parser_1.py',207),
  ('variable_point -> empty','variable_point',1,'p_variable_point','parser_1.py',212),
  ('variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3','variable_2',4,'p_variable_2','parser_1.py',234),
  ('variable_2 -> empty','variable_2',1,'p_variable_2','parser_1.py',235),
  ('variable_3 -> L_S_BRACKET exp R_S_BRACKET','variable_3',3,'p_variable_3','parser_1.py',240),
  ('variable_3 -> empty','variable_3',1,'p_variable_3','parser_1.py',241),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','parser_1.py',246),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','parser_1.py',247),
  ('estatuto -> read','estatuto',1,'p_estatuto','parser_1.py',248),
  ('estatuto -> write','estatuto',1,'p_estatuto','parser_1.py',249),
  ('estatuto -> if_1','estatuto',1,'p_estatuto','parser_1.py',250),
  ('estatuto -> for_l','estatuto',1,'p_estatuto','parser_1.py',251),
  ('estatuto -> while_l','estatuto',1,'p_estatuto','parser_1.py',252),
  ('estatuto -> func_extra','estatuto',1,'p_estatuto','parser_1.py',253),
  ('asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON','asigna',6,'p_asigna','parser_1.py',258),
  ('asigna_point -> empty','asigna_point',1,'p_asigna_point','parser_1.py',263),
  ('llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON','llamada',6,'p_llamada','parser_1.py',289),
  ('llamada_2 -> COMMA exp llamada_2','llamada_2',3,'p_llamada_2','parser_1.py',294),
  ('llamada_2 -> empty','llamada_2',1,'p_llamada_2','parser_1.py',295),
  ('read -> READ LPAR variable read_point RPAR SEMICOLON','read',6,'p_read','parser_1.py',300),
  ('read_point -> empty','read_point',1,'p_read_point','parser_1.py',305),
  ('write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON','write',6,'p_write','parser_1.py',316),
  ('write_2 -> exp write_point','write_2',2,'p_write_2','parser_1.py',321),
  ('write_2 -> CTE_S add_constant_s write_point','write_2',3,'p_write_2','parser_1.py',322),
  ('write_3 -> COMMA write_2 write_3','write_3',3,'p_write_3','parser_1.py',327),
  ('write_3 -> empty','write_3',1,'p_write_3','parser_1.py',328),
  ('write_point -> empty','write_point',1,'p_write_point','parser_1.py',333),
  ('if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON','if_1',10,'p_if_1','parser_1.py',345),
  ('if_2 -> estatuto if_2','if_2',2,'p_if_2','parser_1.py',350),
  ('if_2 -> empty','if_2',1,'p_if_2','parser_1.py',351),
  ('if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET','if_3',5,'p_if_3','parser_1.py',356),
  ('for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON','for_l',14,'p_for_l','parser_1.py',361),
  ('for_l_2 -> estatuto for_l_2','for_l_2',2,'p_for_l_2','parser_1.py',366),
  ('for_l_2 -> empty','for_l_2',1,'p_for_l_2','parser_1.py',367),
  ('while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON','while_l',9,'p_while_l','parser_1.py',372),
  ('while_l_2 -> estatuto while_l_2','while_l_2',2,'p_while_l_2','parser_1.py',377),
  ('while_l_2 -> empty','while_l_2',1,'p_while_l_2','parser_1.py',378),
  ('func_extra -> empty','func_extra',1,'p_func_extra','parser_1.py',383),
  ('exp -> t_exp add_operator_4 exp_2','exp',3,'p_exp','parser_1.py',388),
  ('exp_2 -> OR add_operator exp','exp_2',3,'p_exp_2','parser_1.py',393),
  ('exp_2 -> empty','exp_2',1,'p_exp_2','parser_1.py',394),
  ('t_exp -> g_exp add_operator_4 t_exp_2','t_exp',3,'p_t_exp','parser_1.py',399),
  ('t_exp_2 -> AND add_operator t_exp','t_exp_2',3,'p_t_exp_2','parser_1.py',404),
  ('t_exp_2 -> empty','t_exp_2',1,'p_t_exp_2','parser_1.py',405),
  ('g_exp -> m_exp g_exp_2 add_operator_3','g_exp',3,'p_g_exp','parser_1.py',410),
  ('g_exp_2 -> LESS_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',415),
  ('g_exp_2 -> LESS add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',416),
  ('g_exp_2 -> GREATER_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',417),
  ('g_exp_2 -> GREATER add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',418),
  ('g_exp_2 -> COMPARE add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',419),
  ('g_exp_2 -> NOT_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',420),
  ('g_exp_2 -> empty','g_exp_2',1,'p_g_exp_2','parser_1.py',421),
  ('m_exp -> t add_operator_2 m_exp_2','m_exp',3,'p_m_exp','parser_1.py',426),
  ('m_exp_2 -> PLUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',431),
  ('m_exp_2 -> MINUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',432),
  ('m_exp_2 -> empty','m_exp_2',1,'p_m_exp_2','parser_1.py',433),
  ('t -> f add_operator_1 t_2','t',3,'p_t','parser_1.py',438),
  ('t_2 -> TIMES add_operator t','t_2',3,'p_t_2','parser_1.py',443),
  ('t_2 -> DIVIDE add_operator t','t_2',3,'p_t_2','parser_1.py',444),
  ('t_2 -> empty','t_2',1,'p_t_2','parser_1.py',445),
  ('f -> LPAR add_floor exp RPAR remove_floor','f',5,'p_f','parser_1.py',450),
  ('f -> variable','f',1,'p_f','parser_1.py',451),
  ('f -> llamada','f',1,'p_f','parser_1.py',452),
  ('f -> f_2','f',1,'p_f','parser_1.py',453),
  ('f_2 -> CTE_I add_constant_i','f_2',2,'p_f_2','parser_1.py',458),
  ('f_2 -> CTE_F add_constant_f','f_2',2,'p_f_2','parser_1.py',459),
  ('add_floor -> empty','add_floor',1,'p_add_floor','parser_1.py',464),
  ('remove_floor -> empty','remove_floor',1,'p_remove_floor','parser_1.py',471),
  ('add_operator -> empty','add_operator',1,'p_add_operator','parser_1.py',478),
  ('add_operator_1 -> empty','add_operator_1',1,'p_add_operator_1','parser_1.py',487),
  ('add_operator_2 -> empty','add_operator_2',1,'p_add_operator_2','parser_1.py',517),
  ('add_operator_3 -> empty','add_operator_3',1,'p_add_operator_3','parser_1.py',547),
  ('add_operator_4 -> empty','add_operator_4',1,'p_add_operator_4','parser_1.py',577),
  ('add_constant_i -> empty','add_constant_i',1,'p_add_constant_i','parser_1.py',606),
  ('add_constant_s -> empty','add_constant_s',1,'p_add_constant_s','parser_1.py',616),
  ('add_constant_f -> empty','add_constant_f',1,'p_add_constant_f','parser_1.py',626),
  ('function -> FUNC function_2 SEMICOLON function_3','function',4,'p_function','parser_1.py',636),
  ('function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET','function_2',14,'p_function_2','parser_1.py',641),
  ('function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET','function_2',9,'p_function_2','parser_1.py',642),
  ('function_3 -> function','function_3',1,'p_function_3','parser_1.py',647),
  ('function_3 -> empty','function_3',1,'p_function_3','parser_1.py',648),
  ('function_punto1 -> empty','function_punto1',1,'p_function_punto1','parser_1.py',653),
  ('function_punto2 -> empty','function_punto2',1,'p_function_punto2','parser_1.py',663),
  ('func_agrega_v -> empty','func_agrega_v',1,'p_func_agrega_v','parser_1.py',671),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',682),
]
