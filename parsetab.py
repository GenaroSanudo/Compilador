
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA COMPARE CTE_F CTE_I CTE_S DATAFRAME DIVIDE ELSE EQUAL FLOAT FOR FUNC GREATER GREATER_EQUAL ID IF INT LESS LESS_EQUAL LPAR L_C_BRACKET L_S_BRACKET MAIN MINUS NOT_EQUAL OR PLUS PROGRAM READ RETURN RPAR R_C_BRACKET R_S_BRACKET SEMICOLON STRING TIMES TO VAR VOID WHILE WRITE\n    program : PROGRAM program_point ID COLON modules main\n    \n    program_point : empty\n    \n    modules : modules_2 modules_point modules_3\n    \n    modules_point : empty\n    \n    modules_2 : vars\n                | empty\n    \n    modules_3 : function\n                    | empty\n    \n    main : MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON\n    \n    main_point : empty\n    \n    body : vars func_agrega_v estatuto body_2\n    \n    body_2 : estatuto body_2\n                | empty\n    \n    tipo_simple : INT \n                | FLOAT\n                | CHAR\n    \n    tipo_comp : DATAFRAME\n    \n    vars : VAR vars_2 SEMICOLON vars_8\n    \n    vars_2 : tipo_comp vars_3\n                        | tipo_simple vars_4\n    \n    vars_3 : ID vars_5\n    \n    vars_4 : vars_3 \n                | ID vars_6\n    \n    vars_5 : COMMA vars_3\n            | empty\n    \n    vars_6 : punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7\n                | empty\n    \n    punto_id_especial : empty\n    \n    vars_7 : L_S_BRACKET CTE_I R_S_BRACKET var_mat\n                | var_array\n    \n    var_array : empty\n    \n    var_mat : empty\n    \n    vars_8 : vars \n                | empty\n    \n    param : tipo_simple ID punto_param param_2\n                | empty\n    \n    param_2 : COMMA param\n                | empty\n    \n    punto_param : empty\n    \n    variable : ID variable_2 variable_point\n    \n    variable_point : empty\n    \n    variable_2 : L_S_BRACKET exp R_S_BRACKET variable_3 \n                    | empty\n    \n    variable_3 : L_S_BRACKET exp R_S_BRACKET\n                    | empty\n    \n    estatuto : asigna\n                | llamada\n                | read\n                | write\n                | if_1\n                | for_l\n                | while_l\n                | func_extra\n    \n    asigna : variable EQUAL add_operator exp asigna_point SEMICOLON\n    \n    asigna_point : empty\n    \n    llamada : ID LPAR exp llamada_2 RPAR SEMICOLON\n    \n    llamada_2 : COMMA exp llamada_2 \n                | empty\n    \n    read : READ LPAR variable read_point RPAR SEMICOLON\n    \n    read_point : empty\n    \n    write : WRITE LPAR write_2 write_3 RPAR SEMICOLON\n    \n    write_2 : exp write_point\n                | CTE_S add_constant_s write_point\n    \n    write_3 : COMMA write_2 write_3 \n                | empty\n    \n    write_point : empty\n    \n    if_1 : IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2\n    \n    if_2 :  estatuto if_2 \n            | empty\n    \n    if_3 : ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET\n            | empty\n    \n    if_point : empty\n    \n    if_point_2 : empty\n    \n    if_point_3 : empty\n    \n    for_l : FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON\n    \n    for_l_2 : estatuto for_l_2\n                | empty\n    \n    while_l : WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON\n    \n    while_l_2 : estatuto while_l_2\n                    | empty\n    \n    func_extra : empty\n    \n    exp : t_exp add_operator_4 exp_2 \n    \n    exp_2 : OR add_operator exp \n            | empty\n    \n    t_exp : g_exp add_operator_4 t_exp_2 \n    \n    t_exp_2 : AND add_operator t_exp \n                | empty\n    \n    g_exp : m_exp g_exp_2 add_operator_3\n    \n    g_exp_2 : LESS_EQUAL add_operator m_exp \n                | LESS add_operator m_exp \n                | GREATER_EQUAL add_operator m_exp \n                | GREATER add_operator m_exp \n                | COMPARE add_operator m_exp \n                | NOT_EQUAL add_operator m_exp \n                | empty\n    \n    m_exp : t add_operator_2 m_exp_2\n    \n    m_exp_2 : PLUS add_operator m_exp \n                | MINUS add_operator m_exp\n                | empty\n    \n    t : f add_operator_1 t_2\n    \n    t_2 : TIMES add_operator t \n            | DIVIDE add_operator t\n            | empty\n    \n    f : LPAR add_floor exp RPAR remove_floor\n            | variable\n            | llamada\n            | f_2\n    \n    f_2 : CTE_I add_constant_i\n            | CTE_F add_constant_f\n    \n    add_floor : empty\n    \n    remove_floor : empty\n    \n    add_operator : empty \n    \n    add_operator_1 : empty \n    \n    add_operator_2 : empty \n    \n    add_operator_3 : empty \n    \n    add_operator_4 : empty \n    \n    add_constant_i : empty\n    \n    add_constant_s : empty\n    \n    add_constant_f : empty\n    \n    function : FUNC function_2 SEMICOLON function_3\n    \n    function_2 : tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET \n                    | VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET\n    \n    function_3 : function\n                    | empty\n    \n    function_punto1 : empty\n    \n    function_punto2 : empty\n    \n    func_agrega_v : empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,79,],[0,-1,-9,]),'ID':([2,3,4,17,18,19,20,21,22,29,37,38,39,40,41,43,64,69,70,71,80,81,82,83,84,85,86,87,88,96,101,103,104,105,107,109,110,111,112,113,120,121,123,154,155,157,163,164,165,166,167,168,182,201,204,208,209,210,211,212,213,215,216,219,220,222,230,231,232,233,235,237,238,245,246,247,248,250,251,253,255,266,267,268,270,272,274,282,287,288,291,292,293,294,295,297,298,302,],[-128,5,-2,31,34,-17,-14,-15,-16,-128,50,51,-18,-33,-34,31,-128,90,-127,97,90,-46,-47,-48,-49,-50,-51,-52,-53,-81,90,-81,-128,122,122,139,122,122,144,122,122,-112,-128,122,-110,122,-128,-128,-128,-128,-128,-128,122,-128,-128,122,122,122,122,122,122,-128,-128,-128,-128,122,122,90,122,-54,-56,122,122,122,122,122,122,-59,-61,90,90,90,122,90,-81,90,-81,-78,90,-128,90,-67,-73,90,90,-81,90,-75,]),'COLON':([5,],[6,]),'VAR':([6,29,54,116,117,],[11,11,11,11,11,]),'FUNC':([6,8,9,10,14,15,29,39,40,41,49,],[-128,-128,-5,-6,28,-4,-128,-18,-33,-34,28,]),'MAIN':([6,7,8,9,10,14,15,25,26,27,29,39,40,41,49,55,56,57,],[-128,13,-128,-5,-6,-128,-4,-3,-7,-8,-128,-18,-33,-34,-128,-120,-123,-124,]),'DATAFRAME':([11,],[19,]),'INT':([11,28,65,66,147,],[20,20,20,20,20,]),'FLOAT':([11,28,65,66,147,],[21,21,21,21,21,]),'CHAR':([11,28,65,66,147,],[22,22,22,22,22,]),'LPAR':([13,23,24,50,51,58,59,60,61,90,91,92,93,94,95,104,105,107,110,111,113,120,121,122,123,154,155,157,163,164,165,166,167,168,182,193,201,204,208,209,210,211,212,213,215,216,219,220,222,230,232,237,238,245,246,247,248,267,],[-128,35,-10,-128,-128,65,-125,66,-126,105,109,110,111,112,113,-128,123,123,123,123,123,123,-112,105,-128,123,-110,123,-128,-128,-128,-128,-128,-128,123,232,-128,-128,123,123,123,123,123,123,-128,-128,-128,-128,123,123,123,123,123,123,123,123,123,123,]),'SEMICOLON':([16,30,31,32,33,34,36,42,44,45,47,52,67,68,76,77,78,106,108,118,122,125,126,127,128,129,130,131,132,133,134,135,136,151,152,153,159,160,161,162,169,170,171,172,173,174,175,176,177,178,194,195,196,198,200,202,203,205,206,207,214,217,218,221,223,224,225,226,234,235,239,240,241,242,243,244,257,258,259,260,261,262,263,264,265,271,277,280,283,284,286,300,303,],[29,-19,-128,-20,-22,-128,49,-21,-25,-23,-25,-24,-128,79,-26,-30,-31,-128,-43,-128,-128,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,-29,-32,-128,-128,-116,-128,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,-122,233,-55,235,-82,-84,-85,-87,-88,-115,-96,-99,-100,-103,-42,-45,250,251,-128,-56,-89,-90,-91,-92,-93,-94,-104,-111,-83,-86,-97,-98,-101,-102,-44,278,282,-128,-121,288,-71,302,-70,]),'VOID':([28,],[38,]),'READ':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,231,233,235,250,251,253,255,266,268,270,272,274,282,287,288,291,292,293,294,295,297,298,302,],[-128,-18,-33,-34,-128,91,-127,91,-46,-47,-48,-49,-50,-51,-52,-53,-81,91,-81,91,-54,-56,-59,-61,91,91,91,91,-81,91,-81,-78,91,-128,91,-67,-73,91,91,-81,91,-75,]),'WRITE':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,231,233,235,250,251,253,255,266,268,270,272,274,282,287,288,291,292,293,294,295,297,298,302,],[-128,-18,-33,-34,-128,92,-127,92,-46,-47,-48,-49,-50,-51,-52,-53,-81,92,-81,92,-54,-56,-59,-61,92,92,92,92,-81,92,-81,-78,92,-128,92,-67,-73,92,92,-81,92,-75,]),'IF':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,231,233,235,250,251,253,255,266,268,270,272,274,282,287,288,291,292,293,294,295,297,298,302,],[-128,-18,-33,-34,-128,93,-127,93,-46,-47,-48,-49,-50,-51,-52,-53,-81,93,-81,93,-54,-56,-59,-61,93,93,93,93,-81,93,-81,-78,93,-128,93,-67,-73,93,93,-81,93,-75,]),'FOR':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,231,233,235,250,251,253,255,266,268,270,272,274,282,287,288,291,292,293,294,295,297,298,302,],[-128,-18,-33,-34,-128,94,-127,94,-46,-47,-48,-49,-50,-51,-52,-53,-81,94,-81,94,-54,-56,-59,-61,94,94,94,94,-81,94,-81,-78,94,-128,94,-67,-73,94,94,-81,94,-75,]),'WHILE':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,103,231,233,235,250,251,253,255,266,268,270,272,274,282,287,288,291,292,293,294,295,297,298,302,],[-128,-18,-33,-34,-128,95,-127,95,-46,-47,-48,-49,-50,-51,-52,-53,-81,95,-81,95,-54,-56,-59,-61,95,95,95,95,-81,95,-81,-78,95,-128,95,-67,-73,95,95,-81,95,-75,]),'R_C_BRACKET':([29,39,40,41,63,64,69,70,80,81,82,83,84,85,86,87,88,96,101,102,103,119,150,231,233,235,250,251,253,255,266,268,269,270,272,273,274,276,278,279,282,287,288,291,292,293,294,295,296,297,298,299,301,302,],[-128,-18,-33,-34,68,-128,-128,-127,-128,-46,-47,-48,-49,-50,-51,-52,-53,-81,-128,-11,-13,-12,194,-128,-54,-56,-59,-61,-128,-128,-128,-128,277,-80,-128,280,-69,-79,283,-68,-78,-128,-128,-128,-67,-73,-128,-128,300,-77,-128,-76,303,-75,]),'RETURN':([29,39,40,41,64,69,70,80,81,82,83,84,85,86,87,88,96,101,102,103,119,149,233,235,250,251,282,288,292,293,302,],[-128,-18,-33,-34,-128,-128,-127,-128,-46,-47,-48,-49,-50,-51,-52,-53,-81,-128,-11,-13,-12,193,-54,-56,-59,-61,-78,-128,-67,-73,-75,]),'COMMA':([31,34,97,106,108,114,115,122,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,159,160,161,162,169,170,171,172,173,174,175,176,177,178,184,185,186,187,199,200,202,203,205,206,207,214,217,218,221,223,224,227,228,234,235,239,240,241,242,243,244,257,258,259,260,261,262,263,264,265,],[43,43,-128,-128,-43,147,-39,-128,157,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,182,-128,-128,-128,-116,-128,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,-62,-66,-128,-118,157,-82,-84,-85,-87,-88,-115,-96,-99,-100,-103,-42,-45,182,-63,-128,-56,-89,-90,-91,-92,-93,-94,-104,-111,-83,-86,-97,-98,-101,-102,-44,]),'L_S_BRACKET':([34,46,47,67,90,122,139,178,],[-128,53,-28,75,107,107,107,222,]),'RPAR':([35,65,66,72,73,74,97,106,108,114,115,122,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,148,156,158,159,160,161,162,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,186,187,188,189,192,197,199,200,202,203,205,206,207,214,217,218,221,223,224,227,228,234,235,236,239,240,241,242,243,244,252,256,257,258,259,260,261,262,263,264,265,275,],[48,-128,-128,98,-36,99,-128,-128,-43,-128,-39,-128,-128,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-128,-128,-128,-128,-128,190,191,-35,-128,-38,198,-58,-128,-116,-128,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,225,-60,226,-65,-62,-66,-128,-118,229,-72,-37,234,-128,-82,-84,-85,-87,-88,-115,-96,-99,-100,-103,-42,-45,-128,-63,-128,-56,-57,-89,-90,-91,-92,-93,-94,-64,271,-104,-111,-83,-86,-97,-98,-101,-102,-44,281,]),'L_C_BRACKET':([48,98,99,191,229,281,285,289,290,],[54,116,117,231,253,287,-128,294,-74,]),'CTE_I':([53,75,104,105,107,110,111,113,120,121,123,154,155,157,163,164,165,166,167,168,182,201,204,208,209,210,211,212,213,215,216,219,220,222,230,232,237,238,245,246,247,248,267,],[62,100,-128,133,133,133,133,133,133,-112,-128,133,-110,133,-128,-128,-128,-128,-128,-128,133,-128,-128,133,133,133,133,133,133,-128,-128,-128,-128,133,133,133,133,133,133,133,133,133,133,]),'R_S_BRACKET':([62,100,106,108,122,125,126,127,128,129,130,131,132,133,134,135,136,137,159,160,161,162,169,170,171,172,173,174,175,176,177,178,200,202,203,205,206,207,214,217,218,221,223,224,234,235,239,240,241,242,243,244,249,257,258,259,260,261,262,263,264,265,],[67,118,-128,-43,-128,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,178,-128,-116,-128,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,-82,-84,-85,-87,-88,-115,-96,-99,-100,-103,-42,-45,-128,-56,-89,-90,-91,-92,-93,-94,265,-104,-111,-83,-86,-97,-98,-101,-102,-44,]),'EQUAL':([89,90,106,108,135,136,178,190,223,224,265,],[104,-128,-128,-43,-40,-41,-128,230,-42,-45,-44,]),'CTE_F':([104,105,107,110,111,113,120,121,123,154,155,157,163,164,165,166,167,168,182,201,204,208,209,210,211,212,213,215,216,219,220,222,230,232,237,238,245,246,247,248,267,],[-128,134,134,134,134,134,134,-112,-128,134,-110,134,-128,-128,-128,-128,-128,-128,134,-128,-128,134,134,134,134,134,134,-128,-128,-128,-128,134,134,134,134,134,134,134,134,134,134,]),'TIMES':([106,108,122,129,130,131,132,133,134,135,136,172,173,174,175,176,177,178,223,224,234,235,257,258,265,],[-128,-43,-128,-128,-105,-106,-107,-128,-128,-40,-41,219,-113,-108,-117,-109,-119,-128,-42,-45,-128,-56,-104,-111,-44,]),'DIVIDE':([106,108,122,129,130,131,132,133,134,135,136,172,173,174,175,176,177,178,223,224,234,235,257,258,265,],[-128,-43,-128,-128,-105,-106,-107,-128,-128,-40,-41,220,-113,-108,-117,-109,-119,-128,-42,-45,-128,-56,-104,-111,-44,]),'PLUS':([106,108,122,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,218,221,223,224,234,235,257,258,263,264,265,],[-128,-43,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,215,-114,-128,-113,-108,-117,-109,-119,-128,-100,-103,-42,-45,-128,-56,-104,-111,-101,-102,-44,]),'MINUS':([106,108,122,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,218,221,223,224,234,235,257,258,263,264,265,],[-128,-43,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,216,-114,-128,-113,-108,-117,-109,-119,-128,-100,-103,-42,-45,-128,-56,-104,-111,-101,-102,-44,]),'LESS_EQUAL':([106,108,122,127,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,214,217,218,221,223,224,234,235,257,258,261,262,263,264,265,],[-128,-43,-128,163,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-114,-128,-113,-108,-117,-109,-119,-128,-96,-99,-100,-103,-42,-45,-128,-56,-104,-111,-97,-98,-101,-102,-44,]),'LESS':([106,108,122,127,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,214,217,218,221,223,224,234,235,257,258,261,262,263,264,265,],[-128,-43,-128,164,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-114,-128,-113,-108,-117,-109,-119,-128,-96,-99,-100,-103,-42,-45,-128,-56,-104,-111,-97,-98,-101,-102,-44,]),'GREATER_EQUAL':([106,108,122,127,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,214,217,218,221,223,224,234,235,257,258,261,262,263,264,265,],[-128,-43,-128,165,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-114,-128,-113,-108,-117,-109,-119,-128,-96,-99,-100,-103,-42,-45,-128,-56,-104,-111,-97,-98,-101,-102,-44,]),'GREATER':([106,108,122,127,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,214,217,218,221,223,224,234,235,257,258,261,262,263,264,265,],[-128,-43,-128,166,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-114,-128,-113,-108,-117,-109,-119,-128,-96,-99,-100,-103,-42,-45,-128,-56,-104,-111,-97,-98,-101,-102,-44,]),'COMPARE':([106,108,122,127,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,214,217,218,221,223,224,234,235,257,258,261,262,263,264,265,],[-128,-43,-128,167,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-114,-128,-113,-108,-117,-109,-119,-128,-96,-99,-100,-103,-42,-45,-128,-56,-104,-111,-97,-98,-101,-102,-44,]),'NOT_EQUAL':([106,108,122,127,128,129,130,131,132,133,134,135,136,170,171,172,173,174,175,176,177,178,214,217,218,221,223,224,234,235,257,258,261,262,263,264,265,],[-128,-43,-128,168,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-114,-128,-113,-108,-117,-109,-119,-128,-96,-99,-100,-103,-42,-45,-128,-56,-104,-111,-97,-98,-101,-102,-44,]),'AND':([106,108,122,126,127,128,129,130,131,132,133,134,135,136,160,161,162,169,170,171,172,173,174,175,176,177,178,206,207,214,217,218,221,223,224,234,235,239,240,241,242,243,244,257,258,261,262,263,264,265,],[-128,-43,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,-116,204,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,-88,-115,-96,-99,-100,-103,-42,-45,-128,-56,-89,-90,-91,-92,-93,-94,-104,-111,-97,-98,-101,-102,-44,]),'OR':([106,108,122,125,126,127,128,129,130,131,132,133,134,135,136,159,160,161,162,169,170,171,172,173,174,175,176,177,178,203,205,206,207,214,217,218,221,223,224,234,235,239,240,241,242,243,244,257,258,260,261,262,263,264,265,],[-128,-43,-128,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,201,-116,-128,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,-85,-87,-88,-115,-96,-99,-100,-103,-42,-45,-128,-56,-89,-90,-91,-92,-93,-94,-104,-111,-86,-97,-98,-101,-102,-44,]),'TO':([106,108,122,125,126,127,128,129,130,131,132,133,134,135,136,159,160,161,162,169,170,171,172,173,174,175,176,177,178,200,202,203,205,206,207,214,217,218,221,223,224,234,235,239,240,241,242,243,244,254,257,258,259,260,261,262,263,264,265,],[-128,-43,-128,-128,-128,-128,-128,-128,-105,-106,-107,-128,-128,-40,-41,-128,-116,-128,-128,-95,-128,-114,-128,-113,-108,-117,-109,-119,-128,-82,-84,-85,-87,-88,-115,-96,-99,-100,-103,-42,-45,-128,-56,-89,-90,-91,-92,-93,-94,267,-104,-111,-83,-86,-97,-98,-101,-102,-44,]),'CTE_S':([110,182,],[142,142,]),'ELSE':([280,],[285,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_point':([2,],[3,]),'empty':([2,6,8,13,14,29,31,34,49,50,51,64,65,66,67,69,80,90,97,101,104,106,114,118,122,123,124,125,126,127,128,129,133,134,138,139,140,141,142,143,147,153,159,161,162,163,164,165,166,167,168,170,172,178,186,199,201,204,215,216,219,220,227,231,234,253,255,266,268,272,280,285,287,288,291,294,295,298,],[4,10,15,24,27,41,44,47,57,59,61,70,73,73,78,96,103,108,115,103,121,136,148,152,108,155,158,160,160,169,171,173,175,177,180,108,183,185,187,189,73,196,202,205,207,121,121,121,121,121,121,217,221,224,185,158,121,121,121,121,121,121,183,96,258,96,270,274,270,274,286,290,96,293,297,96,297,274,]),'modules':([6,],[7,]),'modules_2':([6,],[8,]),'vars':([6,29,54,116,117,],[9,40,64,64,64,]),'main':([7,],[12,]),'modules_point':([8,],[14,]),'vars_2':([11,],[16,]),'tipo_comp':([11,],[17,]),'tipo_simple':([11,28,65,66,147,],[18,37,71,71,71,]),'main_point':([13,],[23,]),'modules_3':([14,],[25,]),'function':([14,49,],[26,56,]),'vars_3':([17,18,43,],[30,33,52,]),'vars_4':([18,],[32,]),'function_2':([28,],[36,]),'vars_8':([29,],[39,]),'vars_5':([31,34,],[42,42,]),'vars_6':([34,],[45,]),'punto_id_especial':([34,],[46,]),'function_3':([49,],[55,]),'function_punto1':([50,],[58,]),'function_punto2':([51,],[60,]),'body':([54,116,117,],[63,149,150,]),'func_agrega_v':([64,],[69,]),'param':([65,66,147,],[72,74,192,]),'vars_7':([67,],[76,]),'var_array':([67,],[77,]),'estatuto':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[80,101,101,255,266,268,272,268,272,291,295,298,295,272,]),'asigna':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'llamada':([69,80,101,105,107,110,111,113,120,154,157,182,208,209,210,211,212,213,222,230,231,232,237,238,245,246,247,248,253,255,266,267,268,272,287,291,294,295,298,],[82,82,82,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,82,131,131,131,131,131,131,131,82,82,82,131,82,82,82,82,82,82,82,]),'read':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'write':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'if_1':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'for_l':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'while_l':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'func_extra':([69,80,101,231,253,255,266,268,272,287,291,294,295,298,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'variable':([69,80,101,105,107,109,110,111,113,120,154,157,182,208,209,210,211,212,213,222,230,231,232,237,238,245,246,247,248,253,255,266,267,268,272,287,291,294,295,298,],[89,89,89,130,130,138,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,89,130,130,130,130,130,130,130,89,89,89,130,89,89,89,89,89,89,89,]),'body_2':([80,101,],[102,119,]),'variable_2':([90,122,139,],[106,106,106,]),'punto_param':([97,],[114,]),'add_operator':([104,163,164,165,166,167,168,201,204,215,216,219,220,],[120,208,209,210,211,212,213,237,238,245,246,247,248,]),'exp':([105,107,110,111,113,120,154,157,182,222,230,232,237,267,],[124,137,141,143,145,153,197,199,141,249,254,256,259,275,]),'t_exp':([105,107,110,111,113,120,154,157,182,222,230,232,237,238,267,],[125,125,125,125,125,125,125,125,125,125,125,125,125,260,125,]),'g_exp':([105,107,110,111,113,120,154,157,182,222,230,232,237,238,267,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'m_exp':([105,107,110,111,113,120,154,157,182,208,209,210,211,212,213,222,230,232,237,238,245,246,267,],[127,127,127,127,127,127,127,127,127,239,240,241,242,243,244,127,127,127,127,127,261,262,127,]),'t':([105,107,110,111,113,120,154,157,182,208,209,210,211,212,213,222,230,232,237,238,245,246,247,248,267,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,263,264,128,]),'f':([105,107,110,111,113,120,154,157,182,208,209,210,211,212,213,222,230,232,237,238,245,246,247,248,267,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'f_2':([105,107,110,111,113,120,154,157,182,208,209,210,211,212,213,222,230,232,237,238,245,246,247,248,267,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'variable_point':([106,],[135,]),'write_2':([110,182,],[140,227,]),'param_2':([114,],[146,]),'var_mat':([118,],[151,]),'add_floor':([123,],[154,]),'llamada_2':([124,199,],[156,236,]),'add_operator_4':([125,126,],[159,161,]),'g_exp_2':([127,],[162,]),'add_operator_2':([128,],[170,]),'add_operator_1':([129,],[172,]),'add_constant_i':([133,],[174,]),'add_constant_f':([134,],[176,]),'read_point':([138,],[179,]),'write_3':([140,227,],[181,252,]),'write_point':([141,186,],[184,228,]),'add_constant_s':([142,],[186,]),'if_point':([143,],[188,]),'asigna_point':([153,],[195,]),'exp_2':([159,],[200,]),'t_exp_2':([161,],[203,]),'add_operator_3':([162,],[206,]),'m_exp_2':([170,],[214,]),'t_2':([172,],[218,]),'variable_3':([178,],[223,]),'remove_floor':([234,],[257,]),'while_l_2':([255,268,],[269,276,]),'if_2':([266,272,298,],[273,279,301,]),'if_3':([280,],[284,]),'if_point_3':([285,],[289,]),'if_point_2':([288,],[292,]),'for_l_2':([291,295,],[296,299,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM program_point ID COLON modules main','program',6,'p_program','parser_1.py',55),
  ('program_point -> empty','program_point',1,'p_program_point','parser_1.py',60),
  ('modules -> modules_2 modules_point modules_3','modules',3,'p_modules','parser_1.py',67),
  ('modules_point -> empty','modules_point',1,'p_modules_point','parser_1.py',72),
  ('modules_2 -> vars','modules_2',1,'p_modules_2','parser_1.py',87),
  ('modules_2 -> empty','modules_2',1,'p_modules_2','parser_1.py',88),
  ('modules_3 -> function','modules_3',1,'p_modules_3','parser_1.py',93),
  ('modules_3 -> empty','modules_3',1,'p_modules_3','parser_1.py',94),
  ('main -> MAIN main_point LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON','main',8,'p_main','parser_1.py',99),
  ('main_point -> empty','main_point',1,'p_main_point','parser_1.py',104),
  ('body -> vars func_agrega_v estatuto body_2','body',4,'p_body','parser_1.py',112),
  ('body_2 -> estatuto body_2','body_2',2,'p_body_2','parser_1.py',118),
  ('body_2 -> empty','body_2',1,'p_body_2','parser_1.py',119),
  ('tipo_simple -> INT','tipo_simple',1,'p_tipo_simple','parser_1.py',124),
  ('tipo_simple -> FLOAT','tipo_simple',1,'p_tipo_simple','parser_1.py',125),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','parser_1.py',126),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','parser_1.py',133),
  ('vars -> VAR vars_2 SEMICOLON vars_8','vars',4,'p_vars','parser_1.py',140),
  ('vars_2 -> tipo_comp vars_3','vars_2',2,'p_vars_2','parser_1.py',146),
  ('vars_2 -> tipo_simple vars_4','vars_2',2,'p_vars_2','parser_1.py',147),
  ('vars_3 -> ID vars_5','vars_3',2,'p_vars_3','parser_1.py',152),
  ('vars_4 -> vars_3','vars_4',1,'p_vars_4','parser_1.py',169),
  ('vars_4 -> ID vars_6','vars_4',2,'p_vars_4','parser_1.py',170),
  ('vars_5 -> COMMA vars_3','vars_5',2,'p_vars_5','parser_1.py',175),
  ('vars_5 -> empty','vars_5',1,'p_vars_5','parser_1.py',176),
  ('vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7','vars_6',5,'p_vars_6','parser_1.py',181),
  ('vars_6 -> empty','vars_6',1,'p_vars_6','parser_1.py',182),
  ('punto_id_especial -> empty','punto_id_especial',1,'p_punto_id_especial','parser_1.py',186),
  ('vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat','vars_7',4,'p_vars_7','parser_1.py',193),
  ('vars_7 -> var_array','vars_7',1,'p_vars_7','parser_1.py',194),
  ('var_array -> empty','var_array',1,'p_var_array','parser_1.py',199),
  ('var_mat -> empty','var_mat',1,'p_var_mat','parser_1.py',209),
  ('vars_8 -> vars','vars_8',1,'p_vars_8','parser_1.py',220),
  ('vars_8 -> empty','vars_8',1,'p_vars_8','parser_1.py',221),
  ('param -> tipo_simple ID punto_param param_2','param',4,'p_param','parser_1.py',226),
  ('param -> empty','param',1,'p_param','parser_1.py',227),
  ('param_2 -> COMMA param','param_2',2,'p_param_2','parser_1.py',232),
  ('param_2 -> empty','param_2',1,'p_param_2','parser_1.py',233),
  ('punto_param -> empty','punto_param',1,'p_punto_param','parser_1.py',238),
  ('variable -> ID variable_2 variable_point','variable',3,'p_variable','parser_1.py',246),
  ('variable_point -> empty','variable_point',1,'p_variable_point','parser_1.py',251),
  ('variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3','variable_2',4,'p_variable_2','parser_1.py',273),
  ('variable_2 -> empty','variable_2',1,'p_variable_2','parser_1.py',274),
  ('variable_3 -> L_S_BRACKET exp R_S_BRACKET','variable_3',3,'p_variable_3','parser_1.py',279),
  ('variable_3 -> empty','variable_3',1,'p_variable_3','parser_1.py',280),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','parser_1.py',285),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','parser_1.py',286),
  ('estatuto -> read','estatuto',1,'p_estatuto','parser_1.py',287),
  ('estatuto -> write','estatuto',1,'p_estatuto','parser_1.py',288),
  ('estatuto -> if_1','estatuto',1,'p_estatuto','parser_1.py',289),
  ('estatuto -> for_l','estatuto',1,'p_estatuto','parser_1.py',290),
  ('estatuto -> while_l','estatuto',1,'p_estatuto','parser_1.py',291),
  ('estatuto -> func_extra','estatuto',1,'p_estatuto','parser_1.py',292),
  ('asigna -> variable EQUAL add_operator exp asigna_point SEMICOLON','asigna',6,'p_asigna','parser_1.py',297),
  ('asigna_point -> empty','asigna_point',1,'p_asigna_point','parser_1.py',302),
  ('llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON','llamada',6,'p_llamada','parser_1.py',328),
  ('llamada_2 -> COMMA exp llamada_2','llamada_2',3,'p_llamada_2','parser_1.py',333),
  ('llamada_2 -> empty','llamada_2',1,'p_llamada_2','parser_1.py',334),
  ('read -> READ LPAR variable read_point RPAR SEMICOLON','read',6,'p_read','parser_1.py',339),
  ('read_point -> empty','read_point',1,'p_read_point','parser_1.py',344),
  ('write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON','write',6,'p_write','parser_1.py',355),
  ('write_2 -> exp write_point','write_2',2,'p_write_2','parser_1.py',360),
  ('write_2 -> CTE_S add_constant_s write_point','write_2',3,'p_write_2','parser_1.py',361),
  ('write_3 -> COMMA write_2 write_3','write_3',3,'p_write_3','parser_1.py',366),
  ('write_3 -> empty','write_3',1,'p_write_3','parser_1.py',367),
  ('write_point -> empty','write_point',1,'p_write_point','parser_1.py',372),
  ('if_1 -> IF LPAR exp if_point RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON if_point_2','if_1',12,'p_if_1','parser_1.py',385),
  ('if_2 -> estatuto if_2','if_2',2,'p_if_2','parser_1.py',390),
  ('if_2 -> empty','if_2',1,'p_if_2','parser_1.py',391),
  ('if_3 -> ELSE if_point_3 L_C_BRACKET estatuto if_2 R_C_BRACKET','if_3',6,'p_if_3','parser_1.py',396),
  ('if_3 -> empty','if_3',1,'p_if_3','parser_1.py',397),
  ('if_point -> empty','if_point',1,'p_if_point','parser_1.py',402),
  ('if_point_2 -> empty','if_point_2',1,'p_if_point_2','parser_1.py',420),
  ('if_point_3 -> empty','if_point_3',1,'p_if_point_3','parser_1.py',430),
  ('for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON','for_l',14,'p_for_l','parser_1.py',442),
  ('for_l_2 -> estatuto for_l_2','for_l_2',2,'p_for_l_2','parser_1.py',447),
  ('for_l_2 -> empty','for_l_2',1,'p_for_l_2','parser_1.py',448),
  ('while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON','while_l',9,'p_while_l','parser_1.py',453),
  ('while_l_2 -> estatuto while_l_2','while_l_2',2,'p_while_l_2','parser_1.py',458),
  ('while_l_2 -> empty','while_l_2',1,'p_while_l_2','parser_1.py',459),
  ('func_extra -> empty','func_extra',1,'p_func_extra','parser_1.py',464),
  ('exp -> t_exp add_operator_4 exp_2','exp',3,'p_exp','parser_1.py',469),
  ('exp_2 -> OR add_operator exp','exp_2',3,'p_exp_2','parser_1.py',474),
  ('exp_2 -> empty','exp_2',1,'p_exp_2','parser_1.py',475),
  ('t_exp -> g_exp add_operator_4 t_exp_2','t_exp',3,'p_t_exp','parser_1.py',480),
  ('t_exp_2 -> AND add_operator t_exp','t_exp_2',3,'p_t_exp_2','parser_1.py',485),
  ('t_exp_2 -> empty','t_exp_2',1,'p_t_exp_2','parser_1.py',486),
  ('g_exp -> m_exp g_exp_2 add_operator_3','g_exp',3,'p_g_exp','parser_1.py',491),
  ('g_exp_2 -> LESS_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',496),
  ('g_exp_2 -> LESS add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',497),
  ('g_exp_2 -> GREATER_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',498),
  ('g_exp_2 -> GREATER add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',499),
  ('g_exp_2 -> COMPARE add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',500),
  ('g_exp_2 -> NOT_EQUAL add_operator m_exp','g_exp_2',3,'p_g_exp_2','parser_1.py',501),
  ('g_exp_2 -> empty','g_exp_2',1,'p_g_exp_2','parser_1.py',502),
  ('m_exp -> t add_operator_2 m_exp_2','m_exp',3,'p_m_exp','parser_1.py',507),
  ('m_exp_2 -> PLUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',512),
  ('m_exp_2 -> MINUS add_operator m_exp','m_exp_2',3,'p_m_exp_2','parser_1.py',513),
  ('m_exp_2 -> empty','m_exp_2',1,'p_m_exp_2','parser_1.py',514),
  ('t -> f add_operator_1 t_2','t',3,'p_t','parser_1.py',519),
  ('t_2 -> TIMES add_operator t','t_2',3,'p_t_2','parser_1.py',524),
  ('t_2 -> DIVIDE add_operator t','t_2',3,'p_t_2','parser_1.py',525),
  ('t_2 -> empty','t_2',1,'p_t_2','parser_1.py',526),
  ('f -> LPAR add_floor exp RPAR remove_floor','f',5,'p_f','parser_1.py',531),
  ('f -> variable','f',1,'p_f','parser_1.py',532),
  ('f -> llamada','f',1,'p_f','parser_1.py',533),
  ('f -> f_2','f',1,'p_f','parser_1.py',534),
  ('f_2 -> CTE_I add_constant_i','f_2',2,'p_f_2','parser_1.py',539),
  ('f_2 -> CTE_F add_constant_f','f_2',2,'p_f_2','parser_1.py',540),
  ('add_floor -> empty','add_floor',1,'p_add_floor','parser_1.py',545),
  ('remove_floor -> empty','remove_floor',1,'p_remove_floor','parser_1.py',552),
  ('add_operator -> empty','add_operator',1,'p_add_operator','parser_1.py',559),
  ('add_operator_1 -> empty','add_operator_1',1,'p_add_operator_1','parser_1.py',568),
  ('add_operator_2 -> empty','add_operator_2',1,'p_add_operator_2','parser_1.py',598),
  ('add_operator_3 -> empty','add_operator_3',1,'p_add_operator_3','parser_1.py',628),
  ('add_operator_4 -> empty','add_operator_4',1,'p_add_operator_4','parser_1.py',658),
  ('add_constant_i -> empty','add_constant_i',1,'p_add_constant_i','parser_1.py',687),
  ('add_constant_s -> empty','add_constant_s',1,'p_add_constant_s','parser_1.py',705),
  ('add_constant_f -> empty','add_constant_f',1,'p_add_constant_f','parser_1.py',722),
  ('function -> FUNC function_2 SEMICOLON function_3','function',4,'p_function','parser_1.py',739),
  ('function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET','function_2',14,'p_function_2','parser_1.py',744),
  ('function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET','function_2',9,'p_function_2','parser_1.py',745),
  ('function_3 -> function','function_3',1,'p_function_3','parser_1.py',750),
  ('function_3 -> empty','function_3',1,'p_function_3','parser_1.py',751),
  ('function_punto1 -> empty','function_punto1',1,'p_function_punto1','parser_1.py',756),
  ('function_punto2 -> empty','function_punto2',1,'p_function_punto2','parser_1.py',766),
  ('func_agrega_v -> empty','func_agrega_v',1,'p_func_agrega_v','parser_1.py',774),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',785),
]
