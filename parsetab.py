
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COLON COMMA COMPARE CTE_F CTE_I CTE_S DATAFRAME DIVIDE ELSE EQUAL FLOAT FOR FUNC GREATER GREATER_EQUAL ID IF INT LESS LESS_EQUAL LPAR L_C_BRACKET L_S_BRACKET MAIN MINUS NOT_EQUAL OR PLUS PROGRAM READ RETURN RPAR R_C_BRACKET R_S_BRACKET SEMICOLON STRING TIMES TO VAR VOID WHILE WRITE\n    program : PROGRAM program_point ID COLON modules main\n    \n    program_point : empty\n    \n    modules : modules_2 modules_point modules_3\n    \n    modules_point : empty\n    \n    modules_2 : vars\n                | empty\n    \n    modules_3 : function\n                    | empty\n    \n    main : MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON\n    \n    body : vars estatuto body_2\n    \n    body_2 : estatuto body_2\n                | empty\n    \n    tipo_simple : INT \n                | FLOAT\n                | CHAR\n    \n    tipo_comp : DATAFRAME\n    \n    vars : VAR vars_2 SEMICOLON vars_8\n    \n    vars_2 : tipo_comp vars_3\n                        | tipo_simple vars_4\n    \n    vars_3 : ID vars_5\n    \n    vars_4 : vars_3 \n                | ID vars_6\n    \n    vars_5 : COMMA vars_3\n            | empty\n    \n    vars_6 : punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7\n                | empty\n    \n    punto_id_especial : empty\n    \n    vars_7 : L_S_BRACKET CTE_I R_S_BRACKET var_mat\n                | var_array\n    \n    var_array : empty\n    \n    var_mat : empty\n    \n    vars_8 : vars \n                | empty\n    \n    param : tipo_simple ID punto_param param_2\n                | empty\n    \n    param_2 : COMMA param\n                | empty\n    \n    punto_param : empty\n    \n    variable : ID variable_2\n    \n    variable_2 : L_S_BRACKET exp R_S_BRACKET variable_3 \n                    | empty\n    \n    variable_3 : L_S_BRACKET exp R_S_BRACKET\n                    | empty\n    \n    estatuto : asigna\n                | llamada\n                | read\n                | write\n                | if_1\n                | for_l\n                | while_l\n                | func_extra\n    \n    asigna : variable EQUAL exp SEMICOLON\n    \n    llamada : ID LPAR exp llamada_2 RPAR SEMICOLON\n    \n    llamada_2 : COMMA exp llamada_2 \n                | empty\n    \n    read : READ LPAR variable RPAR SEMICOLON\n    \n    write : WRITE LPAR write_2 write_3 RPAR SEMICOLON\n    \n    write_2 : exp\n                | CTE_S\n    \n    write_3 : COMMA write_2 write_3 \n                | empty\n    \n    if_1 : IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON\n    \n    if_2 : estatuto if_2 \n            | empty\n    \n    if_3 : ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET\n    \n    for_l : FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON\n    \n    for_l_2 : estatuto for_l_2\n                | empty\n    \n    while_l : WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON\n    \n    while_l_2 : estatuto while_l_2\n                    | empty\n    \n    func_extra : empty\n    \n    exp : t_exp exp_2\n    \n    exp_2 : OR exp\n            | empty\n    \n    t_exp : g_exp t_exp_2\n    \n    t_exp_2 : AND t_exp\n                | empty\n    \n    g_exp : m_exp g_exp_2\n    \n    g_exp_2 : LESS_EQUAL g_exp_3\n                | LESS g_exp_3\n                | GREATER_EQUAL g_exp_3\n                | GREATER g_exp_3\n                | COMPARE g_exp_3\n                | NOT_EQUAL g_exp_3\n                | empty\n    \n    g_exp_3 : m_exp\n    \n    m_exp : t m_exp_2\n    \n    m_exp_2 : PLUS m_exp\n                | MINUS m_exp\n                | empty\n    \n    t : f t_2\n    \n    t_2 : TIMES t\n            | DIVIDE t\n            | empty\n    \n    f : LPAR m_exp RPAR\n            | variable\n            | llamada\n            | f_2\n    \n    f_2 : CTE_I\n            | CTE_F\n    \n    function : FUNC function_2 SEMICOLON function_3\n    \n    function_2 : tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v\n                    | VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v\n    \n    function_3 : function\n                    | empty\n    \n    function_punto1 : empty\n    \n    function_punto2 : empty\n    \n    func_agrega_v : empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,84,],[0,-1,-9,]),'ID':([2,3,4,17,18,19,20,21,22,28,36,37,38,39,40,42,54,64,65,66,67,68,69,70,71,72,80,85,87,88,89,91,93,94,95,96,97,98,114,134,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,193,196,197,198,206,209,211,213,218,220,221,222,224,225,237,239,240,241,243,244,247,249,254,],[-110,5,-2,30,33,-16,-13,-14,-15,-110,49,50,-17,-32,-33,30,74,74,-44,-45,-46,-47,-48,-49,-50,-51,-72,74,-72,117,117,117,123,117,117,128,117,130,117,-52,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-56,74,117,74,-53,-57,74,74,74,-72,117,74,-72,117,-69,-62,74,74,74,74,74,-72,-66,]),'COLON':([5,],[6,]),'VAR':([6,28,47,171,172,],[11,11,11,11,11,]),'FUNC':([6,8,9,10,14,15,28,38,39,40,48,],[-110,-110,-5,-6,27,-4,-110,-17,-32,-33,27,]),'MAIN':([6,7,8,9,10,14,15,24,25,26,28,38,39,40,48,55,56,57,],[-110,13,-110,-5,-6,-110,-4,-3,-7,-8,-110,-17,-32,-33,-110,-102,-105,-106,]),'DATAFRAME':([11,],[19,]),'INT':([11,27,81,82,200,],[20,20,20,20,20,]),'FLOAT':([11,27,81,82,200,],[21,21,21,21,21,]),'CHAR':([11,27,81,82,200,],[22,22,22,22,22,]),'LPAR':([13,49,50,58,59,60,61,74,75,76,77,78,79,88,89,91,94,95,97,114,117,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,197,215,221,225,],[23,-110,-110,81,-107,82,-108,89,93,94,95,96,97,114,114,114,114,114,114,114,89,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,225,114,114,]),'SEMICOLON':([16,29,30,31,32,33,35,41,43,44,46,51,63,83,90,92,103,104,105,107,108,109,110,111,112,113,115,116,117,118,119,135,137,138,140,141,148,149,152,153,156,161,162,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,191,192,194,204,205,206,216,217,226,227,232,234,238,245,250,251,253,],[28,-18,-110,-19,-21,-110,48,-20,-24,-22,-24,-23,84,-110,-39,-41,-25,-29,-30,-97,134,-110,-110,-110,-110,-110,-98,-99,-110,-100,-101,-73,-75,-76,-78,-79,-86,-88,-91,-92,-95,-110,193,-110,-74,-77,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,206,-40,-43,209,-28,-31,-53,-110,-42,-104,-109,237,239,242,-110,-103,-65,254,]),'RPAR':([23,81,82,90,92,99,100,101,107,109,110,111,112,113,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,135,137,138,140,141,148,149,152,153,156,157,158,160,161,163,165,169,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,191,192,195,199,200,201,206,207,210,214,217,230,233,],[34,-110,-110,-39,-41,131,-35,132,-97,-110,-110,-110,-110,-110,-98,-99,-110,-100,-101,-110,162,-110,-110,-58,-59,166,167,168,-110,-73,-75,-76,-78,-79,-86,-88,-91,-92,-95,187,188,-55,-110,194,-61,-110,-38,-74,-77,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,-110,-40,-43,-110,-34,-110,-37,-53,-54,-60,-36,-42,236,238,]),'VOID':([27,],[37,]),'READ':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,193,196,198,206,209,211,213,218,220,222,224,237,239,240,241,243,244,247,249,254,],[-110,-17,-32,-33,75,75,-44,-45,-46,-47,-48,-49,-50,-51,-72,75,-72,-52,-56,75,75,-53,-57,75,75,75,-72,75,-72,-69,-62,75,75,75,75,75,-72,-66,]),'WRITE':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,193,196,198,206,209,211,213,218,220,222,224,237,239,240,241,243,244,247,249,254,],[-110,-17,-32,-33,76,76,-44,-45,-46,-47,-48,-49,-50,-51,-72,76,-72,-52,-56,76,76,-53,-57,76,76,76,-72,76,-72,-69,-62,76,76,76,76,76,-72,-66,]),'IF':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,193,196,198,206,209,211,213,218,220,222,224,237,239,240,241,243,244,247,249,254,],[-110,-17,-32,-33,77,77,-44,-45,-46,-47,-48,-49,-50,-51,-72,77,-72,-52,-56,77,77,-53,-57,77,77,77,-72,77,-72,-69,-62,77,77,77,77,77,-72,-66,]),'FOR':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,193,196,198,206,209,211,213,218,220,222,224,237,239,240,241,243,244,247,249,254,],[-110,-17,-32,-33,78,78,-44,-45,-46,-47,-48,-49,-50,-51,-72,78,-72,-52,-56,78,78,-53,-57,78,78,78,-72,78,-72,-69,-62,78,78,78,78,78,-72,-66,]),'WHILE':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,87,134,193,196,198,206,209,211,213,218,220,222,224,237,239,240,241,243,244,247,249,254,],[-110,-17,-32,-33,79,79,-44,-45,-46,-47,-48,-49,-50,-51,-72,79,-72,-52,-56,79,79,-53,-57,79,79,79,-72,79,-72,-69,-62,79,79,79,79,79,-72,-66,]),'R_C_BRACKET':([28,38,39,40,53,54,64,65,66,67,68,69,70,71,72,80,85,86,87,106,134,193,196,198,203,206,209,211,213,218,219,220,222,223,224,228,231,237,239,240,241,242,243,244,246,247,248,249,252,254,],[-110,-17,-32,-33,63,-110,-110,-44,-45,-46,-47,-48,-49,-50,-51,-72,-110,-10,-12,-11,-52,-56,-110,-110,216,-53,-57,-110,-110,-110,229,-64,-110,232,-71,-63,-70,-69,-62,-110,-110,245,-110,-110,251,-110,253,-68,-67,-66,]),'RETURN':([28,38,39,40,54,64,65,66,67,68,69,70,71,72,80,85,86,87,106,134,193,202,206,209,237,239,254,],[-110,-17,-32,-33,-110,-110,-44,-45,-46,-47,-48,-49,-50,-51,-72,-110,-10,-12,-11,-52,-56,215,-53,-57,-69,-62,-66,]),'COMMA':([30,33,90,92,107,109,110,111,112,113,115,116,117,118,119,120,124,125,126,130,135,137,138,140,141,148,149,152,153,156,161,169,170,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,191,192,195,206,217,],[42,42,-39,-41,-97,-110,-110,-110,-110,-110,-98,-99,-110,-100,-101,159,164,-58,-59,-110,-73,-75,-76,-78,-79,-86,-88,-91,-92,-95,-110,200,-38,-74,-77,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,159,-40,-43,164,-53,-42,]),'L_S_BRACKET':([33,45,46,74,83,117,123,161,],[-110,52,-27,91,102,91,91,190,]),'L_C_BRACKET':([34,131,132,166,168,235,236,],[47,171,172,196,198,240,241,]),'CTE_I':([52,88,89,91,94,95,97,102,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,197,221,225,],[62,118,118,118,118,118,118,133,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'R_S_BRACKET':([62,90,92,107,109,110,111,112,113,115,116,117,118,119,121,133,135,137,138,140,141,148,149,152,153,156,161,174,175,176,177,178,179,180,181,182,183,184,185,186,187,191,192,206,208,217,],[83,-39,-41,-97,-110,-110,-110,-110,-110,-98,-99,-110,-100,-101,161,173,-73,-75,-76,-78,-79,-86,-88,-91,-92,-95,-110,-74,-77,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,-40,-43,-53,217,-42,]),'EQUAL':([73,74,90,92,161,167,191,192,217,],[88,-110,-39,-41,-110,197,-40,-43,-42,]),'CTE_F':([88,89,91,94,95,97,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,197,221,225,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'TIMES':([90,92,107,113,115,116,117,118,119,161,187,191,192,206,217,],[-39,-41,-97,154,-98,-99,-110,-100,-101,-110,-96,-40,-43,-53,-42,]),'DIVIDE':([90,92,107,113,115,116,117,118,119,161,187,191,192,206,217,],[-39,-41,-97,155,-98,-99,-110,-100,-101,-110,-96,-40,-43,-53,-42,]),'PLUS':([90,92,107,112,113,115,116,117,118,119,153,156,161,185,186,187,191,192,206,217,],[-39,-41,-97,150,-110,-98,-99,-110,-100,-101,-92,-95,-110,-93,-94,-96,-40,-43,-53,-42,]),'MINUS':([90,92,107,112,113,115,116,117,118,119,153,156,161,185,186,187,191,192,206,217,],[-39,-41,-97,151,-110,-98,-99,-110,-100,-101,-92,-95,-110,-93,-94,-96,-40,-43,-53,-42,]),'LESS_EQUAL':([90,92,107,111,112,113,115,116,117,118,119,149,152,153,156,161,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,142,-110,-110,-98,-99,-110,-100,-101,-88,-91,-92,-95,-110,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'LESS':([90,92,107,111,112,113,115,116,117,118,119,149,152,153,156,161,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,143,-110,-110,-98,-99,-110,-100,-101,-88,-91,-92,-95,-110,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'GREATER_EQUAL':([90,92,107,111,112,113,115,116,117,118,119,149,152,153,156,161,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,144,-110,-110,-98,-99,-110,-100,-101,-88,-91,-92,-95,-110,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'GREATER':([90,92,107,111,112,113,115,116,117,118,119,149,152,153,156,161,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,145,-110,-110,-98,-99,-110,-100,-101,-88,-91,-92,-95,-110,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'COMPARE':([90,92,107,111,112,113,115,116,117,118,119,149,152,153,156,161,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,146,-110,-110,-98,-99,-110,-100,-101,-88,-91,-92,-95,-110,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'NOT_EQUAL':([90,92,107,111,112,113,115,116,117,118,119,149,152,153,156,161,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,147,-110,-110,-98,-99,-110,-100,-101,-88,-91,-92,-95,-110,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'AND':([90,92,107,110,111,112,113,115,116,117,118,119,141,148,149,152,153,156,161,176,177,178,179,180,181,182,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,139,-110,-110,-110,-98,-99,-110,-100,-101,-79,-86,-88,-91,-92,-95,-110,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'OR':([90,92,107,109,110,111,112,113,115,116,117,118,119,138,140,141,148,149,152,153,156,161,175,176,177,178,179,180,181,182,183,184,185,186,187,191,192,206,217,],[-39,-41,-97,136,-110,-110,-110,-110,-98,-99,-110,-100,-101,-76,-78,-79,-86,-88,-91,-92,-95,-110,-77,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,-40,-43,-53,-42,]),'TO':([90,92,107,109,110,111,112,113,115,116,117,118,119,135,137,138,140,141,148,149,152,153,156,161,174,175,176,177,178,179,180,181,182,183,184,185,186,187,191,192,206,212,217,],[-39,-41,-97,-110,-110,-110,-110,-110,-98,-99,-110,-100,-101,-73,-75,-76,-78,-79,-86,-88,-91,-92,-95,-110,-74,-77,-80,-87,-81,-82,-83,-84,-85,-89,-90,-93,-94,-96,-40,-43,-53,221,-42,]),'CTE_S':([94,164,],[126,126,]),'ELSE':([229,],[235,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_point':([2,],[3,]),'empty':([2,6,8,14,28,30,33,48,49,50,54,64,74,81,82,83,85,109,110,111,112,113,117,120,123,124,130,161,169,173,189,195,196,198,200,211,213,216,218,222,240,241,243,244,245,247,],[4,10,15,26,40,43,46,57,59,61,80,87,92,100,100,105,87,137,140,148,152,156,92,160,92,165,170,192,201,205,160,165,80,80,100,220,224,227,220,224,80,80,220,249,227,249,]),'modules':([6,],[7,]),'modules_2':([6,],[8,]),'vars':([6,28,47,171,172,],[9,39,54,54,54,]),'main':([7,],[12,]),'modules_point':([8,],[14,]),'vars_2':([11,],[16,]),'tipo_comp':([11,],[17,]),'tipo_simple':([11,27,81,82,200,],[18,36,98,98,98,]),'modules_3':([14,],[24,]),'function':([14,48,],[25,56,]),'vars_3':([17,18,42,],[29,32,51,]),'vars_4':([18,],[31,]),'function_2':([27,],[35,]),'vars_8':([28,],[38,]),'vars_5':([30,33,],[41,41,]),'vars_6':([33,],[44,]),'punto_id_especial':([33,],[45,]),'body':([47,171,172,],[53,202,203,]),'function_3':([48,],[55,]),'function_punto1':([49,],[58,]),'function_punto2':([50,],[60,]),'estatuto':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[64,85,85,211,213,218,222,218,222,243,244,218,247,247,]),'asigna':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'llamada':([54,64,85,88,89,91,94,95,97,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,196,197,198,211,213,218,221,222,225,240,241,243,244,247,],[66,66,66,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,66,115,66,66,66,66,115,66,115,66,66,66,66,66,]),'read':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'write':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'if_1':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'for_l':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'while_l':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'func_extra':([54,64,85,196,198,211,213,218,222,240,241,243,244,247,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'variable':([54,64,85,88,89,91,93,94,95,97,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,196,197,198,211,213,218,221,222,225,240,241,243,244,247,],[73,73,73,107,107,107,122,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,73,107,73,73,73,73,107,73,107,73,73,73,73,73,]),'body_2':([64,85,],[86,106,]),'variable_2':([74,117,123,],[90,90,90,]),'param':([81,82,200,],[99,101,214,]),'vars_7':([83,],[103,]),'var_array':([83,],[104,]),'exp':([88,89,91,94,95,97,136,159,164,190,197,221,225,],[108,120,121,125,127,129,174,189,125,208,212,230,233,]),'t_exp':([88,89,91,94,95,97,136,139,159,164,190,197,221,225,],[109,109,109,109,109,109,109,175,109,109,109,109,109,109,]),'g_exp':([88,89,91,94,95,97,136,139,159,164,190,197,221,225,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'m_exp':([88,89,91,94,95,97,114,136,139,142,143,144,145,146,147,150,151,159,164,190,197,221,225,],[111,111,111,111,111,111,157,111,111,177,177,177,177,177,177,183,184,111,111,111,111,111,111,]),'t':([88,89,91,94,95,97,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,197,221,225,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,185,186,112,112,112,112,112,112,]),'f':([88,89,91,94,95,97,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,197,221,225,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'f_2':([88,89,91,94,95,97,114,136,139,142,143,144,145,146,147,150,151,154,155,159,164,190,197,221,225,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'write_2':([94,164,],[124,195,]),'exp_2':([109,],[135,]),'t_exp_2':([110,],[138,]),'g_exp_2':([111,],[141,]),'m_exp_2':([112,],[149,]),'t_2':([113,],[153,]),'llamada_2':([120,189,],[158,207,]),'write_3':([124,195,],[163,210,]),'punto_param':([130,],[169,]),'g_exp_3':([142,143,144,145,146,147,],[176,178,179,180,181,182,]),'variable_3':([161,],[191,]),'param_2':([169,],[199,]),'var_mat':([173,],[204,]),'if_2':([211,218,243,],[219,228,246,]),'while_l_2':([213,222,],[223,231,]),'func_agrega_v':([216,245,],[226,250,]),'if_3':([229,],[234,]),'for_l_2':([244,247,],[248,252,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM program_point ID COLON modules main','program',6,'p_program','parser_1.py',17),
  ('program_point -> empty','program_point',1,'p_program_point','parser_1.py',22),
  ('modules -> modules_2 modules_point modules_3','modules',3,'p_modules','parser_1.py',29),
  ('modules_point -> empty','modules_point',1,'p_modules_point','parser_1.py',34),
  ('modules_2 -> vars','modules_2',1,'p_modules_2','parser_1.py',47),
  ('modules_2 -> empty','modules_2',1,'p_modules_2','parser_1.py',48),
  ('modules_3 -> function','modules_3',1,'p_modules_3','parser_1.py',53),
  ('modules_3 -> empty','modules_3',1,'p_modules_3','parser_1.py',54),
  ('main -> MAIN LPAR RPAR L_C_BRACKET body R_C_BRACKET SEMICOLON','main',7,'p_main','parser_1.py',59),
  ('body -> vars estatuto body_2','body',3,'p_body','parser_1.py',64),
  ('body_2 -> estatuto body_2','body_2',2,'p_body_2','parser_1.py',70),
  ('body_2 -> empty','body_2',1,'p_body_2','parser_1.py',71),
  ('tipo_simple -> INT','tipo_simple',1,'p_tipo_simple','parser_1.py',76),
  ('tipo_simple -> FLOAT','tipo_simple',1,'p_tipo_simple','parser_1.py',77),
  ('tipo_simple -> CHAR','tipo_simple',1,'p_tipo_simple','parser_1.py',78),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','parser_1.py',85),
  ('vars -> VAR vars_2 SEMICOLON vars_8','vars',4,'p_vars','parser_1.py',92),
  ('vars_2 -> tipo_comp vars_3','vars_2',2,'p_vars_2','parser_1.py',98),
  ('vars_2 -> tipo_simple vars_4','vars_2',2,'p_vars_2','parser_1.py',99),
  ('vars_3 -> ID vars_5','vars_3',2,'p_vars_3','parser_1.py',104),
  ('vars_4 -> vars_3','vars_4',1,'p_vars_4','parser_1.py',113),
  ('vars_4 -> ID vars_6','vars_4',2,'p_vars_4','parser_1.py',114),
  ('vars_5 -> COMMA vars_3','vars_5',2,'p_vars_5','parser_1.py',119),
  ('vars_5 -> empty','vars_5',1,'p_vars_5','parser_1.py',120),
  ('vars_6 -> punto_id_especial L_S_BRACKET CTE_I R_S_BRACKET vars_7','vars_6',5,'p_vars_6','parser_1.py',125),
  ('vars_6 -> empty','vars_6',1,'p_vars_6','parser_1.py',126),
  ('punto_id_especial -> empty','punto_id_especial',1,'p_punto_id_especial','parser_1.py',130),
  ('vars_7 -> L_S_BRACKET CTE_I R_S_BRACKET var_mat','vars_7',4,'p_vars_7','parser_1.py',137),
  ('vars_7 -> var_array','vars_7',1,'p_vars_7','parser_1.py',138),
  ('var_array -> empty','var_array',1,'p_var_array','parser_1.py',143),
  ('var_mat -> empty','var_mat',1,'p_var_mat','parser_1.py',151),
  ('vars_8 -> vars','vars_8',1,'p_vars_8','parser_1.py',160),
  ('vars_8 -> empty','vars_8',1,'p_vars_8','parser_1.py',161),
  ('param -> tipo_simple ID punto_param param_2','param',4,'p_param','parser_1.py',166),
  ('param -> empty','param',1,'p_param','parser_1.py',167),
  ('param_2 -> COMMA param','param_2',2,'p_param_2','parser_1.py',172),
  ('param_2 -> empty','param_2',1,'p_param_2','parser_1.py',173),
  ('punto_param -> empty','punto_param',1,'p_punto_param','parser_1.py',178),
  ('variable -> ID variable_2','variable',2,'p_variable','parser_1.py',186),
  ('variable_2 -> L_S_BRACKET exp R_S_BRACKET variable_3','variable_2',4,'p_variable_2','parser_1.py',191),
  ('variable_2 -> empty','variable_2',1,'p_variable_2','parser_1.py',192),
  ('variable_3 -> L_S_BRACKET exp R_S_BRACKET','variable_3',3,'p_variable_3','parser_1.py',197),
  ('variable_3 -> empty','variable_3',1,'p_variable_3','parser_1.py',198),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','parser_1.py',203),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','parser_1.py',204),
  ('estatuto -> read','estatuto',1,'p_estatuto','parser_1.py',205),
  ('estatuto -> write','estatuto',1,'p_estatuto','parser_1.py',206),
  ('estatuto -> if_1','estatuto',1,'p_estatuto','parser_1.py',207),
  ('estatuto -> for_l','estatuto',1,'p_estatuto','parser_1.py',208),
  ('estatuto -> while_l','estatuto',1,'p_estatuto','parser_1.py',209),
  ('estatuto -> func_extra','estatuto',1,'p_estatuto','parser_1.py',210),
  ('asigna -> variable EQUAL exp SEMICOLON','asigna',4,'p_asigna','parser_1.py',215),
  ('llamada -> ID LPAR exp llamada_2 RPAR SEMICOLON','llamada',6,'p_llamada','parser_1.py',220),
  ('llamada_2 -> COMMA exp llamada_2','llamada_2',3,'p_llamada_2','parser_1.py',225),
  ('llamada_2 -> empty','llamada_2',1,'p_llamada_2','parser_1.py',226),
  ('read -> READ LPAR variable RPAR SEMICOLON','read',5,'p_read','parser_1.py',231),
  ('write -> WRITE LPAR write_2 write_3 RPAR SEMICOLON','write',6,'p_write','parser_1.py',236),
  ('write_2 -> exp','write_2',1,'p_write_2','parser_1.py',241),
  ('write_2 -> CTE_S','write_2',1,'p_write_2','parser_1.py',242),
  ('write_3 -> COMMA write_2 write_3','write_3',3,'p_write_3','parser_1.py',247),
  ('write_3 -> empty','write_3',1,'p_write_3','parser_1.py',248),
  ('if_1 -> IF LPAR exp RPAR L_C_BRACKET estatuto if_2 R_C_BRACKET if_3 SEMICOLON','if_1',10,'p_if_1','parser_1.py',253),
  ('if_2 -> estatuto if_2','if_2',2,'p_if_2','parser_1.py',258),
  ('if_2 -> empty','if_2',1,'p_if_2','parser_1.py',259),
  ('if_3 -> ELSE L_C_BRACKET estatuto if_2 R_C_BRACKET','if_3',5,'p_if_3','parser_1.py',264),
  ('for_l -> FOR LPAR ID RPAR EQUAL exp TO exp RPAR L_C_BRACKET estatuto for_l_2 R_C_BRACKET SEMICOLON','for_l',14,'p_for_l','parser_1.py',269),
  ('for_l_2 -> estatuto for_l_2','for_l_2',2,'p_for_l_2','parser_1.py',274),
  ('for_l_2 -> empty','for_l_2',1,'p_for_l_2','parser_1.py',275),
  ('while_l -> WHILE LPAR exp RPAR L_C_BRACKET estatuto while_l_2 R_C_BRACKET SEMICOLON','while_l',9,'p_while_l','parser_1.py',280),
  ('while_l_2 -> estatuto while_l_2','while_l_2',2,'p_while_l_2','parser_1.py',285),
  ('while_l_2 -> empty','while_l_2',1,'p_while_l_2','parser_1.py',286),
  ('func_extra -> empty','func_extra',1,'p_func_extra','parser_1.py',291),
  ('exp -> t_exp exp_2','exp',2,'p_exp','parser_1.py',296),
  ('exp_2 -> OR exp','exp_2',2,'p_exp_2','parser_1.py',301),
  ('exp_2 -> empty','exp_2',1,'p_exp_2','parser_1.py',302),
  ('t_exp -> g_exp t_exp_2','t_exp',2,'p_t_exp','parser_1.py',307),
  ('t_exp_2 -> AND t_exp','t_exp_2',2,'p_t_exp_2','parser_1.py',312),
  ('t_exp_2 -> empty','t_exp_2',1,'p_t_exp_2','parser_1.py',313),
  ('g_exp -> m_exp g_exp_2','g_exp',2,'p_g_exp','parser_1.py',318),
  ('g_exp_2 -> LESS_EQUAL g_exp_3','g_exp_2',2,'p_g_exp_2','parser_1.py',323),
  ('g_exp_2 -> LESS g_exp_3','g_exp_2',2,'p_g_exp_2','parser_1.py',324),
  ('g_exp_2 -> GREATER_EQUAL g_exp_3','g_exp_2',2,'p_g_exp_2','parser_1.py',325),
  ('g_exp_2 -> GREATER g_exp_3','g_exp_2',2,'p_g_exp_2','parser_1.py',326),
  ('g_exp_2 -> COMPARE g_exp_3','g_exp_2',2,'p_g_exp_2','parser_1.py',327),
  ('g_exp_2 -> NOT_EQUAL g_exp_3','g_exp_2',2,'p_g_exp_2','parser_1.py',328),
  ('g_exp_2 -> empty','g_exp_2',1,'p_g_exp_2','parser_1.py',329),
  ('g_exp_3 -> m_exp','g_exp_3',1,'p_g_exp_3','parser_1.py',334),
  ('m_exp -> t m_exp_2','m_exp',2,'p_m_exp','parser_1.py',339),
  ('m_exp_2 -> PLUS m_exp','m_exp_2',2,'p_m_exp_2','parser_1.py',344),
  ('m_exp_2 -> MINUS m_exp','m_exp_2',2,'p_m_exp_2','parser_1.py',345),
  ('m_exp_2 -> empty','m_exp_2',1,'p_m_exp_2','parser_1.py',346),
  ('t -> f t_2','t',2,'p_t','parser_1.py',351),
  ('t_2 -> TIMES t','t_2',2,'p_t_2','parser_1.py',356),
  ('t_2 -> DIVIDE t','t_2',2,'p_t_2','parser_1.py',357),
  ('t_2 -> empty','t_2',1,'p_t_2','parser_1.py',358),
  ('f -> LPAR m_exp RPAR','f',3,'p_f','parser_1.py',363),
  ('f -> variable','f',1,'p_f','parser_1.py',364),
  ('f -> llamada','f',1,'p_f','parser_1.py',365),
  ('f -> f_2','f',1,'p_f','parser_1.py',366),
  ('f_2 -> CTE_I','f_2',1,'p_f_2','parser_1.py',371),
  ('f_2 -> CTE_F','f_2',1,'p_f_2','parser_1.py',372),
  ('function -> FUNC function_2 SEMICOLON function_3','function',4,'p_function','parser_1.py',377),
  ('function_2 -> tipo_simple ID function_punto1 LPAR param RPAR L_C_BRACKET body RETURN LPAR exp RPAR SEMICOLON R_C_BRACKET func_agrega_v','function_2',15,'p_function_2','parser_1.py',382),
  ('function_2 -> VOID ID function_punto2 LPAR param RPAR L_C_BRACKET body R_C_BRACKET func_agrega_v','function_2',10,'p_function_2','parser_1.py',383),
  ('function_3 -> function','function_3',1,'p_function_3','parser_1.py',388),
  ('function_3 -> empty','function_3',1,'p_function_3','parser_1.py',389),
  ('function_punto1 -> empty','function_punto1',1,'p_function_punto1','parser_1.py',394),
  ('function_punto2 -> empty','function_punto2',1,'p_function_punto2','parser_1.py',403),
  ('func_agrega_v -> empty','func_agrega_v',1,'p_func_agrega_v','parser_1.py',412),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',423),
]
